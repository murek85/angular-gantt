{"version":3,"sources":["ng://angular-gantt/lib/shared/services/gantt-config.service.ts","ng://angular-gantt/lib/shared/services/gantt.service.ts","ng://angular-gantt/lib/gantt.component.ts","ng://angular-gantt/lib/header/gantt-header.component.ts","ng://angular-gantt/lib/footer/gantt-footer.component.ts","ng://angular-gantt/lib/activity/gantt-activity.component.ts","ng://angular-gantt/lib/activity/time-scale/gantt-time-scale.component.ts","ng://angular-gantt/lib/activity/background/activity-background.component.ts","ng://angular-gantt/lib/activity/bars/activity-bars.component.ts","ng://angular-gantt/lib/activity/gantt-activity.module.ts","ng://angular-gantt/lib/gantt.module.ts"],"names":["GanttConfig","Injectable","this","cellWidth","rowHeight","activityHeight","barHeight","barLineHeight","barMoveable","GanttService","prototype","calculateBarWidth","start","end","Date","days","calculateDiffDays","calculateBarLeft","scale","left","i","length","getTime","calculateBarLeftDelta","getDate","calculateGanttHeight","TASK_CACHE","startHours","getHours","getMinutes","getSeconds","calculateBar","task","index","barStyle","getBarStyle","color","top","barTop","height","line-height","width","background-color","border-left","style","secondary","primary","Math","abs","err","calculateScale","addDays","push","isDayWeekend","date","day","getDay","result","setDate","removeDays","calculateGridScale","tasks","dates","map","min","apply","t","max","getComputedStyle","element","attribute","parseInt","document","defaultView","calculateContainerWidth","windowInnerWidth","window","innerWidth","gridWidth","calculateContainerHeight","innerHeight","calculateActivityContainerDimensions","gridHeight","calculateGanttActivityWidth","ganttActions","ganttGridElem","offsetWidth","calculateGanttActivityHeight","offsetHeight","scrollTop","verticalScrollElem","ganttActivityAreaElem","verticalScrollTop","scroll","setScrollTop","undefined","groupData","doTaskCheck","setIdPrefix","id","hourCellWidth","hoursCellWidth","ganttConfig","GanttComponent","Object","defineProperty","_project","project","setDefaultProject","_options","options","setDefaultOptions","ngOnInit","setSizes","ganttContainerWidth","ganttService","name","startDate","gridRowClicked","onGridRowClick","emit","popoverOpened","onPopoverOpen","onResize","$event","Component","args","selector","template","providers","Input","Output","EventEmitter","GanttHeaderComponent","GanttFooterComponent","GanttActivityComponent","TIME_SCALE","containerWidth","containerHeight","activityContainerSizes","setScale","setDimensions","ngDoCheck","onVerticalScroll","verticalScroll","ganttGrid","ganttActivityArea","gridRowClick","popoverOpen","event","ganttActivityHeight","ganttActivityWidth","dimensions","setGridRowStyle","setGridScaleStyle","changeDetection","ChangeDetectionStrategy","Default","ElementRef","elem","upTriangle","downTriangle","activityActions","expanded","expandedIcon","gridColumns","GanttTimeScaleComponent","setTimescaleStyle","setTimescaleLineStyle","borderTop","position","border-top","setTimescaleCellStyle","GanttActivityBackgroundComponent","drawGrid","setRowStyle","setCellStyle","cells","timeScale","ViewChild","rows","GanttActivityBarsComponent","drawBar","addMouseEventListeners","dragFn","stopFn","documentElement","removeEventListener","addEventListener","GanttActivityModule","NgModule","imports","CommonModule","MatCardModule","MdePopoverModule","exports","declarations","GanttModule","FormsModule","schemas","CUSTOM_ELEMENTS_SCHEMA"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class GanttConfig {\r\n    public cellWidth = 38;\r\n    public rowHeight = 30;\r\n    public activityHeight = 420;\r\n    public barHeight = 25;\r\n    public barLineHeight = 35;\r\n    public barMoveable = false;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { GanttConfig } from './gantt-config.service';\r\nimport { Task, IScale } from '../interfaces';\r\n\r\n@Injectable()\r\nexport class GanttService {\r\n    public rowHeight = 0;\r\n    public hourCellWidth = 60; // change to 60 so minutes can been seen more easily\r\n    public hoursCellWidth = this.hourCellWidth * 25;\r\n    public cellWidth = 0;\r\n    public windowInnerWidth = 0;\r\n    public activityHeight = 0;\r\n    public barHeight = 0;\r\n    public barLineHeight = 0;\r\n    public barTop = 0;\r\n    public barMoveable = false;\r\n    public gridWidth = 542; //188\r\n    public gridHeight = 332;\r\n    public TASK_CACHE: any[];\r\n    public TIME_SCALE: any[];\r\n\r\n    constructor() {\r\n        const ganttConfig = new GanttConfig();\r\n\r\n        this.rowHeight = ganttConfig.rowHeight;\r\n        this.cellWidth = ganttConfig.cellWidth;\r\n        this.activityHeight = ganttConfig.activityHeight;\r\n        this.barHeight = ganttConfig.barHeight;\r\n        this.barLineHeight = ganttConfig.barLineHeight;\r\n        this.barTop = ganttConfig.rowHeight;\r\n        this.barMoveable = ganttConfig.barMoveable;\r\n    }\r\n\r\n    private calculateBarWidth(start: Date, end: Date): number {\r\n        if (typeof start === 'string') {\r\n            start = new Date(start);\r\n        }\r\n\r\n        if (typeof end === 'string') {\r\n            end = new Date(end);\r\n        }\r\n\r\n        const days = this.calculateDiffDays(start, end);\r\n        const width: number = (days / 7 * this.cellWidth + days / 7);\r\n        return width;\r\n    }\r\n\r\n    private calculateBarLeft(start: Date, scale: any[]): number {\r\n        let left = 0;\r\n\r\n        if (start != null) {\r\n            if (typeof start === 'string') {\r\n                start = new Date();\r\n            }\r\n\r\n            for (var i = 0; i < scale.length; i++) {\r\n                if ((start.getTime() >= scale[i].getTime() && start.getTime() < scale[i + 1].getTime())) {\r\n                    \r\n                    left = i * this.cellWidth + i + this.calculateBarLeftDelta(start) + ((7 / (scale[i + 1].getDate() - start.getDate()) / 7) * this.cellWidth) - this.cellWidth / 7;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return left;\r\n    }\r\n\r\n    /** Calculates the height of the gantt grid, activity and vertical scroll */\r\n    public calculateGanttHeight(): string {\r\n        return `${this.TASK_CACHE.length * this.rowHeight}px`;\r\n    }\r\n\r\n    private calculateBarLeftDelta(start: Date): number {\r\n        let offset = 0;\r\n        const hoursInDay = 24;\r\n        const minutesInHour = 60;\r\n        const secondsInHour = 3600;\r\n        const startHours: number =\r\n            start.getHours() + start.getMinutes() / minutesInHour + start.getSeconds() / secondsInHour;\r\n\r\n        offset = this.cellWidth / hoursInDay * startHours;\r\n        return offset;\r\n    }\r\n\r\n    /** Calculate the bar styles */\r\n    public calculateBar(task: any, index: number, scale: any) {\r\n        const barStyle = this.getBarStyle(task.color);\r\n        return {\r\n            'top': this.barTop * index + 2 + 'px',\r\n            'left': this.calculateBarLeft(task.start, scale) + 'px',\r\n            'height': this.barHeight + 'px',\r\n            'line-height': this.barLineHeight + 'px',\r\n            'width': this.calculateBarWidth(task.start, task.end) + 'px',\r\n            'background-color': barStyle[\"background-color\"],\r\n            'border-left': barStyle[\"border-left\"]\r\n        };\r\n    }\r\n\r\n    /** Get the bar style based on task status */\r\n    private getBarStyle(color: any): any {\r\n        const style = {};\r\n        style[\"background-color\"] = color.secondary;\r\n        style[\"border-left\"] = `5px solid ${color.primary}`;\r\n\r\n        return style;\r\n    }\r\n\r\n    /** Calculates the difference in two dates and returns number of days */\r\n    public calculateDiffDays(start: Date, end: Date): number {\r\n        try {\r\n            const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds /ms\r\n            const diffDays = Math.abs((start.getTime() - end.getTime()) / (oneDay));\r\n            const days = diffDays; // don't use Math.round as it will draw an incorrect bar\r\n            return days;\r\n        } catch (err) {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /** Calculate the gantt scale range given the start and end date of tasks*/\r\n    public calculateScale(start: Date = new Date(), end: Date = this.addDays(start, 7)) {\r\n        const scale: any[] = [];\r\n        try {\r\n            while (start.getTime() <= end.getTime()) {\r\n                scale.push(start);\r\n                start = this.addDays(start, 7);\r\n            }\r\n            return scale;\r\n\r\n        } catch (err) {\r\n            return scale;\r\n        }\r\n    }\r\n\r\n    /** Determines whether given date is a weekend */\r\n    public isDayWeekend(date: Date): boolean {\r\n        const day = date.getDay();\r\n        if (day === 6 || day === 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** Add x number of days to a date object */\r\n    public addDays(date: Date, days: number): Date {\r\n        const result = new Date(date);\r\n        result.setDate(result.getDate() + days);\r\n        return result;\r\n    }\r\n\r\n    //** Remove x number of days from a date object */\r\n    public removeDays(date: Date, days: number): Date {\r\n        const result = new Date(date);\r\n        result.setDate(result.getDate() - days);\r\n        return result;\r\n    }\r\n\r\n    /** Calculates the grid scale for gantt based on tasks start and end dates */\r\n    public calculateGridScale(tasks: Task[]): IScale {\r\n        let start: Date;\r\n        let end: Date;\r\n        const dates = tasks.map((task: any) => {\r\n            return {\r\n                start: new Date(task.start),\r\n                end: new Date(task.end)\r\n            };\r\n        });\r\n\r\n        start = new Date(Math.min.apply(null, dates.map((t) => {\r\n            return t.start;\r\n        })));\r\n\r\n        end = new Date(Math.max.apply(null, dates.map((t) => {\r\n            return t.end;\r\n        })));\r\n\r\n        return {\r\n            start: start,\r\n            end: end\r\n        };\r\n    }\r\n\r\n    public getComputedStyle(element: any, attribute: any) {\r\n        return parseInt(document.defaultView.getComputedStyle(element)[attribute], 10);\r\n    }\r\n\r\n    //TODO(dale): determine whether this is needed\r\n    public calculateContainerWidth(): number {\r\n        this.windowInnerWidth = window.innerWidth;\r\n        const containerWidth = this.gridWidth - 18;\r\n        return containerWidth;\r\n    }\r\n\r\n    public calculateContainerHeight(): number {\r\n        const containerHeight = (innerHeight - 18);\r\n        return containerHeight;\r\n    }\r\n\r\n    public calculateActivityContainerDimensions(): any {\r\n        const scrollWidth = 18;\r\n        this.windowInnerWidth = window.innerWidth;\r\n        const width = window.innerWidth - this.gridWidth - scrollWidth;\r\n\r\n        const height = window.innerHeight - this.gridHeight;\r\n\r\n        return { height: this.activityHeight, width: width };\r\n    }\r\n\r\n    public calculateGanttActivityWidth(ganttActions: HTMLElement, ganttGridElem: HTMLElement): any {\r\n        return `${ganttActions.offsetWidth - ganttGridElem.offsetWidth}px`;\r\n    }\r\n\r\n    public calculateGanttActivityHeight(ganttGridElem: HTMLElement): any {\r\n        return `${ganttGridElem.offsetHeight}px`;\r\n    }\r\n\r\n    /** Set the vertical scroll top positions for gantt */\r\n    public scrollTop(verticalScrollElem: any, ganttGridElem: any, ganttActivityAreaElem: any) {\r\n        const verticalScrollTop = verticalScrollElem.scrollTop;\r\n        const scroll = this.setScrollTop;\r\n\r\n        // debounce\r\n        if (verticalScrollTop !== null && verticalScrollTop !== undefined) {\r\n            scroll(verticalScrollTop, ganttActivityAreaElem);\r\n            scroll(ganttActivityAreaElem.scrollTop, ganttGridElem);\r\n        }\r\n    }\r\n\r\n    /** Group data by id , only supports one level*/\r\n    public groupData(tasks: any): any {\r\n        return tasks;\r\n    }\r\n\r\n    /** Checks whether any new data needs to be added to task cache  */\r\n    public doTaskCheck(tasks: any[]): boolean {\r\n        // const cachedTaskIds = this.TASK_CACHE.map((task: any) => { return task.id });\r\n        // const itemsToCache: any[] = [];\r\n\r\n        // only look at tasks that are not cached\r\n        // tasks.filter((task: any) => {\r\n        //     return cachedTaskIds.indexOf(task.id) === -1;\r\n        // }).forEach((task: any) => {\r\n        //     itemsToCache.push(task);\r\n        // });\r\n\r\n        // itemsToCache.forEach((item: any) => {\r\n        //     this.TASK_CACHE.push(item);\r\n        // });\r\n\r\n        // if (itemsToCache.length > 0) {\r\n        //     return true;\r\n        // }\r\n\r\n        this.TASK_CACHE = tasks;\r\n\r\n        return false;\r\n    }\r\n\r\n    /** Set a id prefix so CSS3 query selector can work with ids that contain numbers */\r\n    public setIdPrefix(id: string): string {\r\n        return `_${id}`;\r\n    }\r\n\r\n    // /** Remove the id prefix to allow querying of data */\r\n    // public removeIdPrefix(id: string): string {\r\n    //     return id.substring(1, id.length - 1);\r\n    // }\r\n\r\n    /** Set the scroll top property of a native DOM element */\r\n    public setScrollTop(scrollTop: number, element: any): void {\r\n        if (element !== null && element !== undefined) {\r\n            element.scrollTop = scrollTop;\r\n        }\r\n    }\r\n}\r\n","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\r\nimport { NgStyle } from '@angular/common';\r\nimport { GanttService } from './shared/services/gantt.service';\r\nimport { IGanttOptions, Project } from './shared/interfaces';\r\n\r\n@Component({\r\n    selector: 'gantt',\r\n    template: `\r\n        <div [ngStyle]=\"{ 'width': '100%' }\">\r\n            <div class=\"gantt-container\" (window:resize)=\"onResize($event)\">\r\n                <!--<gantt-header [name]=\"_project.name\" [startDate]=\"_project.startDate\"></gantt-header>-->\r\n                <gantt-activity [project]=\"_project\" [options]=\"_options\" (onGridRowClick)=\"gridRowClicked($event)\" (onPopoverOpen)=\"popoverOpened($event)\"></gantt-activity>\r\n                <!--<gantt-footer [project]=\"_project\"></gantt-footer>-->\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .gantt-container {\r\n            font-family: Arial;\r\n            font-size: 13px;\r\n            border: 1px solid #cecece;\r\n            position: relative;\r\n            white-space: nowrap;\r\n            margin-top: 0px;\r\n        }\r\n    `],\r\n    providers: []\r\n})\r\nexport class GanttComponent implements OnInit {\r\n    _project: Project;\r\n    _options: IGanttOptions;\r\n\r\n    @Input()\r\n    set project(project: any) {\r\n        if (project) {\r\n            this._project = project;\r\n        } else {\r\n            this.setDefaultProject();\r\n        }\r\n    }\r\n    get project() { return this._project; }\r\n\r\n    @Input()\r\n    set options(options: any) {\r\n        if (options.scale) {\r\n            this._options = options;\r\n        } else {\r\n            this.setDefaultOptions();\r\n        }\r\n    }\r\n    get options() { return this._options; }\r\n\r\n    @Output() onGridRowClick: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() onPopoverOpen: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    ganttContainerWidth: number;\r\n\r\n    constructor(public ganttService: GanttService) { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    setSizes(): void {\r\n        this.ganttContainerWidth = this.ganttService.calculateContainerWidth();\r\n    }\r\n\r\n    setDefaultOptions() {\r\n        const scale = this.ganttService.calculateGridScale(this._project.tasks);\r\n        this._options = {\r\n            scale\r\n        };\r\n    }\r\n\r\n    setDefaultProject() {\r\n        this._project = {\r\n            id: '',\r\n            name: '',\r\n            startDate: null,\r\n            tasks: []\r\n        };\r\n    }\r\n\r\n    gridRowClicked(task: any) {\r\n        this.onGridRowClick.emit(task);\r\n    }\r\n\r\n    popoverOpened(task: any) {\r\n        this.onPopoverOpen.emit(task);\r\n    }\r\n\r\n    onResize($event: any): void {\r\n        this.setSizes();\r\n    }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'gantt-header',\r\n    template: `\r\n        <div class=\"gantt-header\">\r\n            <div class=\"gantt-header-title\">\r\n                <div style=\"flex:1\">{{ name }}</div>\r\n                <div>Started: {{ startDate | date: 'medium'}}</div>\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .gantt-header {\r\n            background-color: whitesmoke;\r\n            height: 40px;\r\n            border-bottom: 1px solid #e0e0e0;\r\n        }\r\n        .gantt-header-title {\r\n            padding: 12px;\r\n            display: flex;\r\n            flex-wrap:wrap;\r\n            font-family: Arial, Helvetica, sans-serif;\r\n            font-size: 16px;\r\n        }\r\n        .gantt-header-actions {\r\n            display: inline;\r\n            float: right;\r\n            padding: 6px;\r\n        }\r\n    `]\r\n})\r\nexport class GanttHeaderComponent {\r\n    @Input() name: any;\r\n    @Input() startDate: Date;\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'gantt-footer',\r\n    template: `<div class=\"gantt-footer\"></div>`,\r\n    styles: [`\r\n        .gantt-footer {\r\n            background-color: whitesmoke;\r\n            height: 36px;\r\n            border-top: 1px solid #e0e0e0;\r\n        }\r\n        .gantt-footer-actions {\r\n            float: right;\r\n        }\r\n    `]\r\n})\r\nexport class GanttFooterComponent {\r\n    @Input() project: any;\r\n    constructor() { }\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, ElementRef,  ChangeDetectionStrategy, OnChanges, DoCheck } from '@angular/core';\r\n\r\nimport { GanttService } from '../shared/services/gantt.service';\r\n\r\n@Component({\r\n    selector: 'gantt-activity',\r\n    template: `\r\n    <div class=\"grid\" #ganttGrid>\r\n        <div class=\"grid-scale\" [ngStyle]=\"setGridScaleStyle()\">\r\n            <div class=\"grid-head-cell\"\r\n                *ngFor=\"let column of gridColumns\" [style.width]=\"column.width + 'px'\"\r\n                [style.left]=\"column.left + 'px'\">\r\n\r\n                <label>\r\n                    {{column.name}}\r\n                </label>\r\n            </div>\r\n        </div>\r\n        <div class=\"grid-data\"\r\n            #ganttGridData\r\n            [ngStyle]=\"{ 'height': ganttService.calculateGanttHeight() }\">\r\n\r\n            <div #row\r\n                *ngFor=\"let data of ganttService.TASK_CACHE\" class=\"grid-row\"\r\n                [ngStyle]=\"setGridRowStyle()\">\r\n\r\n                <div class=\"grid-cell\"\r\n                    [ngStyle]=\"{ 'width': gridColumns[1].width + 'px', 'padding-left': 2 + 'px' }\">\r\n\r\n                    <div class=\"gantt-tree-content\">{{data.name}}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"gantt-activity\"\r\n        (window:resize)=\"onResize($event)\"\r\n        [ngStyle]=\"{ 'height': ganttService.calculateGanttHeight() + 60, 'width': ganttActivityWidth + 36 + 'px' }\">\r\n\r\n        <time-scale [timeScale]=\"ganttService.TIME_SCALE\"\r\n            [dimensions]=\"dimensions\"></time-scale>\r\n        <div class=\"gantt-activity-area\"\r\n            #ganttActivityArea\r\n            [ngStyle]=\"{ 'height': ganttService.calculateGanttHeight(), 'width': containerWidth + 36 + 'px' }\">\r\n\r\n            <activity-background [timeScale]=\"ganttService.TIME_SCALE\"\r\n                [tasks]=\"ganttService.TASK_CACHE\"></activity-background>\r\n            <activity-bars [timeScale]=\"ganttService.TIME_SCALE\"\r\n                [dimensions]=\"dimensions\"\r\n                [tasks]=\"ganttService.TASK_CACHE\"\r\n                (onGridRowClick)=\"gridRowClick($event)\"\r\n                (onPopoverOpen)=\"popoverOpen($event)\"></activity-bars>\r\n        </div>\r\n    </div>\r\n    `,\r\n    styles: [`\r\n        .gantt-activity {\r\n            overflow-y: hidden;\r\n            overflow-x: scroll;\r\n            display: inline-block;\r\n            vertical-align: top;\r\n            position: relative;\r\n        }\r\n        .gantt-activity-area {\r\n            position: relative;\r\n            overflow-x: hidden;\r\n            overflow-y: hidden;\r\n            -webkit-user-select: none;\r\n        }\r\n        .gantt-vertical-scroll {\r\n            background-color: transparent;\r\n            overflow-x: hidden;\r\n            overflow-y: scroll;\r\n            position: absolute;\r\n            right: -10px;\r\n            display: block;\r\n            top: -1px;\r\n            border: 1px solid #cecece;\r\n        }\r\n        .grid {\r\n            overflow-x: hidden;\r\n            overflow-y: hidden;\r\n            display: inline-block;\r\n            vertical-align: top;\r\n            border-right: 1px solid #cecece;\r\n        }\r\n        .grid-scale {\r\n            color: #6b6b6b;\r\n            font-size: 12px;\r\n            border-bottom: 1px solid #e0e0e0;\r\n            background-color: whitesmoke;\r\n        }\r\n        .grid-head-cell {\r\n            /*color: #a6a6a6;*/\r\n            border-top: none !important;\r\n            border-right: none !important;\r\n            line-height: inherit;\r\n            box-sizing: border-box;\r\n            display: inline-block;\r\n            vertical-align: top;\r\n            border-right: 1px solid #cecece;\r\n            /*text-align: center;*/\r\n            position: relative;\r\n            cursor: default;\r\n            height: 100%;\r\n            -moz-user-select: -moz-none;\r\n            -webkit-user-select: none;\r\n            overflow: hidden;\r\n        }\r\n        .grid-data {\r\n            overflow:hidden;\r\n        }\r\n        .grid-row {\r\n            box-sizing: border-box;\r\n            border-bottom: 1px solid #e0e0e0;\r\n            background-color: #fff;\r\n            position: relative;\r\n            -webkit-user-select: none;\r\n        }\r\n        .grid-row:hover {\r\n            background-color: #eeeeee;\r\n            cursor: pointer;\r\n        }\r\n        .grid-cell {\r\n            border-right: none;\r\n            color: #454545;\r\n            display: inline-block;\r\n            vertical-align: top;\r\n            padding-left: 6px;\r\n            padding-right: 6px;\r\n            height: 100%;\r\n            overflow: hidden;\r\n            white-space: nowrap;\r\n            font-size: 13px;\r\n            box-sizing: border-box;\r\n        }\r\n        .actions-bar {\r\n            /*border-top: 1px solid #cecece;*/\r\n            border-bottom: 1px solid #e0e0e0;\r\n            clear: both;\r\n            /*margin-top: 90px;*/\r\n            height: 28px;\r\n            background: whitesmoke;\r\n            color: #494949;\r\n            font-family: Arial, sans-serif;\r\n            font-size: 13px;\r\n            padding-left: 15px;\r\n            line-height: 25px;\r\n        }\r\n        .gantt-tree-content {\r\n            padding-left: 15px;\r\n        }\r\n    `],\r\n    changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class GanttActivityComponent implements OnInit, DoCheck {\r\n    @Input() project: any;\r\n    @Input() options: any;\r\n\r\n    @Output() onGridRowClick: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() onPopoverOpen: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    private upTriangle = '&#x25b2;'; // BLACK UP-POINTING TRIANGLE\r\n    private downTriangle = '&#x25bc;'; // BLACK DOWN-POINTING TRIANGLE\r\n\r\n    private start: Date;\r\n    private end: Date;\r\n    private timeScale: any;\r\n\r\n    private activityContainerSizes: any;\r\n\r\n    activityActions = {\r\n        expanded: false,\r\n        expandedIcon: this.downTriangle\r\n    };\r\n    containerHeight: any;\r\n    containerWidth: any;\r\n\r\n    ganttActivityHeight: any;\r\n    ganttActivityWidth: any;\r\n\r\n    private scale: any = {\r\n        start: null,\r\n        end: null\r\n    };\r\n\r\n    dimensions = {\r\n        height: 0,\r\n        width: 0\r\n    };\r\n\r\n    public gridColumns: any[] = [\r\n        { name: '', left: 0, width: 16 },\r\n        { name: 'Grupa asortymentÃ³w', left: 0, width: 330 }\r\n    ];\r\n\r\n    constructor(\r\n        public elem: ElementRef,\r\n        public ganttService: GanttService) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        // Cache the project data and only work with that. Only show parent tasks by default\r\n        this.ganttService.TASK_CACHE = this.project.tasks;\r\n        this.ganttService.TIME_SCALE = this.ganttService.calculateScale(this.options.scale.start, this.options.scale.end);\r\n\r\n        this.start = this.options.scale.start;\r\n        this.end = this.options.scale.end;\r\n        this.containerWidth = this.calculateContainerWidth();\r\n        this.containerHeight = this.calculateContainerHeight();\r\n        this.activityContainerSizes = this.ganttService.calculateActivityContainerDimensions();\r\n\r\n        // important that these are called last as it relies on values calculated above.\r\n        this.setScale();\r\n        this.setDimensions();\r\n        this.setSizes();\r\n    }\r\n\r\n    /** Custom model check */\r\n    ngDoCheck() {\r\n        // do a check to see whether any new tasks have been added. If the task is a child then push into array if tree expanded?\r\n        this.ganttService.doTaskCheck(this.project.tasks);\r\n    }\r\n\r\n    /** On vertical scroll set the scroll top of grid and activity  */\r\n    onVerticalScroll(verticalScroll: any, ganttGrid: any, ganttActivityArea: any): void {\r\n        this.ganttService.scrollTop(verticalScroll, ganttGrid, ganttActivityArea);\r\n    }\r\n\r\n    gridRowClick(task) {\r\n        try {\r\n            this.onGridRowClick.emit(task);\r\n        } catch (err) { }\r\n    }\r\n\r\n    popoverOpen(task) {\r\n        try {\r\n            this.onPopoverOpen.emit(task);\r\n        } catch (err) { }\r\n    }\r\n\r\n    /** On resize of browser window dynamically adjust gantt activity height and width */\r\n    onResize(event: any): void {\r\n        const activityContainerSizes = this.ganttService.calculateActivityContainerDimensions();\r\n        this.ganttActivityHeight = activityContainerSizes.height + 'px';\r\n        this.ganttActivityWidth = activityContainerSizes.width;\r\n    }\r\n\r\n    setScale() {\r\n        this.scale.start = this.start;\r\n        this.scale.end = this.end;\r\n    }\r\n\r\n    setDimensions() {\r\n        this.dimensions.height = this.containerHeight;\r\n        this.dimensions.width = this.containerWidth;\r\n    }\r\n\r\n    setGridRowStyle(): any {\r\n        return {\r\n            'height': this.ganttService.rowHeight + 'px',\r\n            'line-height': this.ganttService.rowHeight + 'px'\r\n        };\r\n    }\r\n\r\n    setGridScaleStyle() {\r\n        const height = this.ganttService.rowHeight + 30;\r\n        return {\r\n            'height': height + 'px',\r\n            'line-height': height + 'px'\r\n        };\r\n    }\r\n\r\n    private calculateContainerHeight(): number {\r\n        return this.ganttService.TASK_CACHE.length * this.ganttService.rowHeight;\r\n    }\r\n\r\n    private calculateContainerWidth(): number {\r\n        return this.ganttService.TIME_SCALE.length * this.ganttService.cellWidth + this.ganttService.cellWidth;\r\n    }\r\n\r\n    private setSizes(): void {\r\n        this.ganttActivityHeight = this.activityContainerSizes.height + 'px';\r\n        this.ganttActivityWidth = this.activityContainerSizes.width;\r\n    }\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { GanttService } from '../../shared/services/gantt.service';\r\n\r\n@Component({\r\n    selector: 'time-scale',\r\n    template: `\r\n        <div class=\"time-scale\" [ngStyle]=\"setTimescaleStyle()\">\r\n            <div class=\"time-scale-line\" [ngStyle]=\"setTimescaleLineStyle('none')\">\r\n                <div class=\"time-scale-cell\" *ngFor=\"let date of timeScale; let i = index\"\r\n                    [ngClass]=\"(i % 2) ? 'weekend' : ''\" [ngStyle]=\"setTimescaleCellStyle()\">{{date | date: 'dd-MM'}}</div>\r\n            </div>\r\n            <div class=\"time-scale-line\" [ngStyle]=\"setTimescaleLineStyle('none')\">\r\n                <div class=\"time-scale-cell\" *ngFor=\"let date of timeScale; let i = index\"\r\n                [ngClass]=\"(i % 2) ? 'weekend' : ''\" [ngStyle]=\"setTimescaleCellStyle()\">{{i + 1}}</div>\r\n            </div>\r\n        </div>`,\r\n    styles: [`\r\n        .weekend {\r\n            background-color: whitesmoke;\r\n        }\r\n        .time-scale {\r\n            font-size: 12px;\r\n            background-color: #fff;\r\n            border-bottom: 1px solid #cecece;\r\n        }\r\n        .time-scale-line {\r\n            box-sizing: border-box;\r\n            border-bottom: 1px solid #cecece;\r\n        }\r\n        .time-scale-line:first-child {\r\n            border-top: none;\r\n        }\r\n        .time-scale-cell {\r\n            display: inline-block;\r\n            white-space: nowrap;\r\n            overflow: hidden;\r\n            border-right: 1px solid #cecece;\r\n            text-align: center;\r\n            height: 100%;\r\n        }`\r\n    ],\r\n    providers: [\r\n        GanttService\r\n    ]\r\n})\r\nexport class GanttTimeScaleComponent implements OnInit {\r\n    @Input() timeScale: any;\r\n    @Input() dimensions: any;\r\n\r\n    constructor(public ganttService: GanttService) { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    setTimescaleStyle() {\r\n        return {\r\n            'width': (this.dimensions.width + 36) + 'px'\r\n        };\r\n    }\r\n\r\n    setTimescaleLineStyle(borderTop: string) {\r\n        return {\r\n            'height': this.ganttService.rowHeight + 'px',\r\n            'line-height': this.ganttService.rowHeight + 'px',\r\n            'position': 'relative',\r\n            'border-top': borderTop\r\n        };\r\n    }\r\n\r\n    setTimescaleCellStyle() {\r\n        return {\r\n            'width': this.ganttService.cellWidth + 'px'\r\n        };\r\n    }\r\n\r\n    isDayWeekend(date: Date): boolean {\r\n        return this.ganttService.isDayWeekend(date);\r\n    }\r\n}\r\n","import { Component, OnInit, Input, ViewChild, ElementRef } from '@angular/core';\r\nimport { GanttService } from '../../shared/services/gantt.service';\r\n\r\n@Component({\r\n    selector: 'activity-background',\r\n    template: `\r\n    <div #bg class=\"gantt-activity-bg\">\r\n        <div class=\"gantt-activity-row\"\r\n            [ngStyle]=\"setRowStyle()\"\r\n            *ngFor=\"let row of tasks\">\r\n\r\n            <div class=\"gantt-activity-cell\"\r\n                [ngStyle]=\"setCellStyle()\"\r\n                *ngFor=\"let cell of cells; let i = index; let l = last\" [ngClass]=\"(i % 2) ? 'weekend' : ''\" ></div>\r\n        </div>\r\n    </div>\r\n    `,\r\n    styles: [`\r\n        .weekend {\r\n            background-color: whitesmoke;\r\n        }\r\n        .gantt-activity-bg {\r\n            overflow: hidden;\r\n        }\r\n        .gantt-activity-row {\r\n            border-bottom: 1px solid #ebebeb;\r\n            background-color: #fff;\r\n            box-sizing: border-box;\r\n        }\r\n        .gantt-activity-cell {\r\n            display: inline-block;\r\n            height: 100%;\r\n            border-right: 1px solid #ebebeb;\r\n        }\r\n    `]\r\n})\r\nexport class GanttActivityBackgroundComponent implements OnInit {\r\n    @Input() tasks: any;\r\n    @Input() timeScale: any;\r\n\r\n    @ViewChild('bg') bg: ElementRef;\r\n\r\n    rows: any[] = [];\r\n    cells: any[] = [];\r\n\r\n    constructor(public ganttService: GanttService) { }\r\n\r\n    ngOnInit() {\r\n        this.drawGrid();\r\n    }\r\n\r\n    isDayWeekend(date: Date): boolean {\r\n        return this.ganttService.isDayWeekend(date);\r\n    }\r\n\r\n    setRowStyle() {\r\n        return {\r\n            'height': this.ganttService.rowHeight + 'px'\r\n        };\r\n    }\r\n\r\n    setCellStyle() {\r\n        return {\r\n            'width': this.ganttService.cellWidth + 'px'\r\n        };\r\n    }\r\n\r\n    private drawGrid(): void {\r\n        this.cells = this.timeScale;\r\n    }\r\n}\r\n","import { Component, OnInit, Input, ElementRef, EventEmitter, Output } from '@angular/core';\r\nimport { GanttService } from '../../shared/services/gantt.service';\r\n\r\n@Component({\r\n    selector: 'activity-bars',\r\n    template: `\r\n    <div class=\"gantt-activity-bars-area\"\r\n        [ngStyle]=\"{ 'height': containerHeight + 'px', 'width': containerWidth + 'px' }\">\r\n\r\n        <div #bar class=\"gantt-activity-line\"\r\n            *ngFor=\"let task of tasks; let i = index\" (click)=\"gridRowClicked(task)\"\r\n            [ngStyle]=\"drawBar(task, i)\">\r\n\r\n            <div #popoverTrigger=\"mdePopoverTrigger\"\r\n                [mdePopoverTriggerFor]=\"taskPopover\"\r\n                [mdePopoverBackdropCloseOnClick]=\"false\"\r\n                mdePopoverOffsetX=\"-15\"\r\n                mdePopoverOffsetY=\"0\"\r\n                (opened)=\"popoverOpened(task)\">\r\n\r\n                <mde-popover #taskPopover=\"mdePopover\" \r\n                    [mdePopoverEnterDelay]=\"100\"\r\n                    [mdePopoverLeaveDelay]=\"0\"\r\n                    [mdePopoverPositionY]=\"'above'\"\r\n                    [mdePopoverOverlapTrigger]=\"false\"\r\n                    [mdePopoverDisableAnimation]=\"false\"\r\n                    [mdeFocusTrapEnabled]=\"false\"\r\n                    [mdePopoverArrowWidth]=\"12\"\r\n                    [mdePopoverArrowColor]=\"task.color?.primary\"\r\n                    mdePopoverPlacement=\"bottom\">\r\n\r\n                    <ng-container *ngTemplateOutlet=\"templatePopoverTask; context: {task: task}\"></ng-container>\r\n                </mde-popover>\r\n\r\n                <div class=\"gantt-activity-content\"></div>\r\n                <div class=\"gantt-activity-link-control gantt-activity-right\" style=\"height: 26px; line-height: 30px\">\r\n                    <div class=\"gantt-link-point\"></div>\r\n                </div>\r\n                <div class=\"gantt-activity-link-control gantt-activity-left\" style=\"height: 26px; line-height: 30px\">\r\n                    <div class=\"gantt-link-point\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <ng-template #templatePopoverTask let-data=\"task\">\r\n        <mat-card *ngIf=\"data\" class=\"mat-elevation-z6\" \r\n            [ngStyle]=\"{ \r\n                borderBottomColor: data.color?.primary,\r\n                borderBottomWidth: '.25em',\r\n                borderBottomStyle: 'solid' \r\n            }\" style=\"width: 320px; max-width: 320px;\">\r\n\r\n            <mat-card-header>\r\n                <div mat-card-avatar [ngStyle]=\"{ borderColor: data.color?.primary }\" style=\"width: 0; height: calc(10vh - 30px); border-radius: 0; border-style: solid;\"></div>\r\n                <mat-card-title>\r\n                    <span style=\"font-size: 80%;\">{{data.name}}</span>\r\n                </mat-card-title>\r\n                <mat-card-subtitle>\r\n                    <span>{{data.start | date:'yyyy-MM-dd'}} - {{data.end | date:'yyyy-MM-dd'}}</span>\r\n                </mat-card-subtitle>\r\n                <mat-card-subtitle>\r\n                    <span style=\"padding-left: .75em; padding-right: 1em; font-stretch: condensed;\">&#x336;</span>\r\n                    <span>{{data.resource}}</span>\r\n                </mat-card-subtitle>\r\n            </mat-card-header>\r\n            <mat-card-content>\r\n                <footer *ngIf=\"data.description\">\r\n                    <span [innerHTML]=\"data.description\"></span>\r\n                </footer>\r\n            </mat-card-content>\r\n        </mat-card>\r\n    </ng-template>\r\n    `,\r\n    styles: [`\r\n    .gantt-activity-line {\r\n        /*border-radius: 2px;*/\r\n        position: absolute;\r\n        box-sizing: border-box;\r\n        -webkit-user-select: none;\r\n    }\r\n    .gantt-activity-line:hover {\r\n        cursor: pointer;\r\n    }\r\n    .gantt-activity-content {\r\n        font-size: 12px;\r\n        color: #fff;\r\n        width: 100%;\r\n        top: 0;\r\n        position: absolute;\r\n        white-space: nowrap;\r\n        text-align: center;\r\n        line-height: inherit;\r\n        overflow: hidden;\r\n        height: 100%;\r\n    }\r\n    .gantt-activity-link-control {\r\n        position: absolute;\r\n        width: 13px;\r\n        top: 0;\r\n    }\r\n    .gantt-activity-right {\r\n        right: 0;\r\n    }\r\n    .gantt-activity-left {\r\n        left: 0;\r\n    }\r\n    .gantt-activity-right:hover {\r\n        /*cursor:w-resize;*/\r\n    }\r\n    .gantt-activity-left:hover {\r\n        /*cursor:w-resize;*/\r\n    }\r\n    `],\r\n    providers: [\r\n        GanttService\r\n    ]\r\n})\r\nexport class GanttActivityBarsComponent implements OnInit {\r\n    @Input() timeScale: any;\r\n    @Input() dimensions: any;\r\n    @Input() tasks: any;\r\n\r\n    @Output() onGridRowClick: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() onPopoverOpen: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    containerHeight = 0;\r\n    containerWidth = 0;\r\n\r\n    constructor(public ganttService: GanttService) { }\r\n\r\n    ngOnInit() {\r\n        this.containerHeight = this.dimensions.height;\r\n        this.containerWidth = this.dimensions.width;\r\n    }\r\n\r\n    drawBar(task: any, index: number) {\r\n        let style = {};\r\n        style = this.ganttService.calculateBar(task, index, this.timeScale);\r\n\r\n        return style;\r\n    }\r\n\r\n    gridRowClicked(task: any) {\r\n        try {\r\n            this.onGridRowClick.emit(task);\r\n        } catch (err) { }\r\n    }\r\n\r\n    popoverOpened(task: any) {\r\n        try {\r\n            this.onPopoverOpen.emit(task);\r\n        } catch (err) { }\r\n    }\r\n\r\n    private addMouseEventListeners(dragFn: any) {\r\n        function stopFn() {\r\n            document.documentElement.removeEventListener('mousemove', dragFn, false);\r\n            document.documentElement.removeEventListener('mouseup', stopFn, false);\r\n            document.documentElement.removeEventListener('mouseleave', stopFn, false);\r\n        }\r\n\r\n        document.documentElement.addEventListener('mousemove', dragFn, false);\r\n        document.documentElement.addEventListener('mouseup', stopFn, false);\r\n        document.documentElement.addEventListener('mouseleave', stopFn, false);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { MatCardModule } from '@angular/material';\r\nimport { MdePopoverModule } from '@material-extended/mde';\r\n\r\nimport { GanttActivityComponent } from './gantt-activity.component';\r\nimport { GanttTimeScaleComponent } from './time-scale/gantt-time-scale.component';\r\nimport { GanttActivityBackgroundComponent } from './background/activity-background.component';\r\nimport { GanttActivityBarsComponent } from './bars/activity-bars.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        MatCardModule,\r\n        MdePopoverModule\r\n    ],\r\n    exports: [\r\n        GanttActivityComponent,\r\n        GanttTimeScaleComponent,\r\n        GanttActivityBackgroundComponent,\r\n        GanttActivityBarsComponent\r\n    ],\r\n    declarations: [\r\n        GanttActivityComponent,\r\n        GanttTimeScaleComponent,\r\n        GanttActivityBackgroundComponent,\r\n        GanttActivityBarsComponent\r\n    ],\r\n    providers: [],\r\n})\r\nexport class GanttActivityModule { }\r\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { GanttComponent } from './gantt.component';\r\nimport { GanttHeaderComponent } from './header/gantt-header.component';\r\nimport { GanttFooterComponent } from './footer/gantt-footer.component';\r\nimport { GanttService } from './shared/services/gantt.service';\r\nimport { GanttActivityModule } from './activity/gantt-activity.module';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        GanttActivityModule,\r\n    ],\r\n    exports: [\r\n        GanttComponent\r\n    ],\r\n    declarations: [\r\n        GanttComponent,\r\n        GanttHeaderComponent,\r\n        GanttFooterComponent\r\n    ],\r\n    providers: [GanttService],\r\n    schemas: [\r\n        CUSTOM_ELEMENTS_SCHEMA\r\n    ]\r\n})\r\nexport class GanttModule { }\r\n"]}