{"version":3,"sources":["ng://angular-gantt/lib/shared/services/gantt-config.service.ts","ng://angular-gantt/lib/shared/services/gantt.service.ts","ng://angular-gantt/lib/gantt.component.ts","ng://angular-gantt/lib/header/gantt-header.component.ts","ng://angular-gantt/lib/footer/gantt-footer.component.ts","ng://angular-gantt/lib/activity/gantt-activity.component.ts","ng://angular-gantt/lib/activity/time-scale/gantt-time-scale.component.ts","ng://angular-gantt/lib/activity/background/activity-background.component.ts","ng://angular-gantt/lib/activity/bars/activity-bars.component.ts","ng://angular-gantt/lib/activity/gantt-activity.module.ts","ng://angular-gantt/lib/gantt.module.ts"],"names":["GanttConfig","this","cellWidth","rowHeight","activityHeight","barHeight","barLineHeight","barMoveable","Injectable","GanttService","hourCellWidth","hoursCellWidth","windowInnerWidth","barTop","gridWidth","gridHeight","ganttConfig","prototype","calculateBarWidth","start","end","Date","days","calculateDiffDays","calculateBarLeft","scale","left","i","length","getTime","calculateBarLeftDelta","calculateGanttHeight","TASK_CACHE","startHours","getHours","getMinutes","getSeconds","calculateBar","task","index","barStyle","getBarStyle","color","top","height","line-height","width","background-color","border-left","style","secondary","primary","Math","abs","err","calculateScale","addDays","push","calculateMonthScale","calculateCellMonthWidth","isDayWeekend","date","day","getDay","result","setDate","getDate","removeDays","calculateGridScale","tasks","dates","map","min","apply","t","max","getComputedStyle","element","attribute","parseInt","document","defaultView","calculateContainerWidth","window","innerWidth","calculateContainerHeight","innerHeight","calculateActivityContainerDimensions","calculateGanttActivityWidth","elem","offsetWidth","calculateGanttActivityHeight","offsetHeight","minDate","maxDate","startDate","endDate","monthDiff","calculateDiffMonths","dayDiff","startOfMonth","getFullYear","endOfMonth","dayInMonth","floor","months","getMonth","newFrom","getYear","scrollTop","verticalScrollElem","ganttGridElem","ganttActivityAreaElem","verticalScrollTop","scroll","setScrollTop","groupData","doTaskCheck","TIME_SCALE","MONTH_SCALE","setIdPrefix","id","GanttComponent","ganttService","onGridRowClick","EventEmitter","onPopoverOpen","Object","defineProperty","_project","project","setDefaultProject","_options","options","setDefaultOptions","ngOnInit","setSizes","ganttContainerWidth","gridColumns","name","gridRowClicked","emit","popoverOpened","onResize","$event","Component","args","selector","template","providers","Input","Output","GanttHeaderComponent","GanttFooterComponent","GanttActivityComponent","dimensions","doWheel","event","preventDefault","stopPropagation","wheelDelta","detail","scrollLeft","deltaY","containerWidth","containerHeight","activityContainerSizes","setScale","setDimensions","ngDoCheck","onVerticalScroll","verticalScroll","ganttGrid","ganttActivityArea","gridRowClick","popoverOpen","ganttActivityHeight","ganttActivityWidth","setGridRowStyle","setGridScaleStyle","calculateColumnsWidth","column","reduce","pv","cv","changeDetection","ChangeDetectionStrategy","Default","ElementRef","GanttTimeScaleComponent","setTimescaleStyle","setTimescaleMonthLineStyle","borderTop","position","border-top","setTimescaleMonthCellStyle","setTimescaleWeekendLineStyle","setTimescaleWeekendCellStyle","GanttActivityBackgroundComponent","rows","cells","drawGrid","setRowStyle","setCellStyle","timeScale","ViewChild","GanttActivityBarsComponent","drawBar","addMouseEventListeners","dragFn","stopFn","documentElement","removeEventListener","addEventListener","GanttActivityModule","NgModule","imports","CommonModule","MatCardModule","MdePopoverModule","exports","declarations","GanttModule","forRoot","ngModule","FormsModule","schemas","CUSTOM_ELEMENTS_SCHEMA"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class GanttConfig {\r\n    public cellWidth = 38;\r\n    public rowHeight = 30;\r\n    public activityHeight = 420;\r\n    public barHeight = 25;\r\n    public barLineHeight = 35;\r\n    public barMoveable = false;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { GanttConfig } from './gantt-config.service';\r\nimport { Task, IScale } from '../interfaces';\r\n\r\n@Injectable()\r\nexport class GanttService {\r\n    public rowHeight = 0;\r\n    public hourCellWidth = 60; // change to 60 so minutes can been seen more easily\r\n    public hoursCellWidth = this.hourCellWidth * 25;\r\n    public cellWidth = 0;\r\n    public windowInnerWidth = 0;\r\n    public activityHeight = 0;\r\n    public barHeight = 0;\r\n    public barLineHeight = 0;\r\n    public barTop = 0;\r\n    public barMoveable = false;\r\n    public gridWidth = 0; //188\r\n    public gridHeight = 332;\r\n    public TASK_CACHE: any[];\r\n    public TIME_SCALE: any[];\r\n    public MONTH_SCALE: any[];\r\n\r\n    constructor() {\r\n        const ganttConfig = new GanttConfig();\r\n\r\n        this.rowHeight = ganttConfig.rowHeight;\r\n        this.cellWidth = ganttConfig.cellWidth;\r\n        this.activityHeight = ganttConfig.activityHeight;\r\n        this.barHeight = ganttConfig.barHeight;\r\n        this.barLineHeight = ganttConfig.barLineHeight;\r\n        this.barTop = ganttConfig.rowHeight;\r\n        this.barMoveable = ganttConfig.barMoveable;\r\n    }\r\n\r\n    private calculateBarWidth(start: Date, end: Date): number {\r\n        if (typeof start === 'string') {\r\n            start = new Date(start);\r\n        }\r\n\r\n        if (typeof end === 'string') {\r\n            end = new Date(end);\r\n        }\r\n\r\n        const days = this.calculateDiffDays(start, end);\r\n        const width: number = (days * this.cellWidth + days) / 7;\r\n        return width;\r\n    }\r\n\r\n    private calculateBarLeft(start: Date, scale: any[]): number {\r\n        let left = 0;\r\n\r\n        if (start != null) {\r\n            if (typeof start === 'string') {\r\n                start = new Date();\r\n            }\r\n\r\n            for (let i = 0; i < scale.length; i++) {\r\n                if (start.getTime() >= scale[i].getTime() && start.getTime() < scale[i + 1].getTime()) {\r\n                    // left = i * this.cellWidth + i + this.calculateBarLeftDelta(start) +\r\n                    //    ((7 / (scale[i + 1].getDate() - start.getDate()) / 7) * this.cellWidth) - this.cellWidth / 7;\r\n                    left = i * this.cellWidth + ((this.cellWidth) * this.calculateDiffDays(scale[i], start) / 7) +\r\n                        i + this.calculateBarLeftDelta(start);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return left;\r\n    }\r\n\r\n    /** Calculates the height of the gantt grid, activity and vertical scroll */\r\n    public calculateGanttHeight(): string {\r\n        return `${this.TASK_CACHE.length * this.rowHeight}px`;\r\n    }\r\n\r\n    private calculateBarLeftDelta(start: Date): number {\r\n        let offset = 0;\r\n        const hoursInDay = 24;\r\n        const minutesInHour = 60;\r\n        const secondsInHour = 3600;\r\n        const startHours: number =\r\n            (start.getHours() + start.getMinutes() / minutesInHour + start.getSeconds() / secondsInHour);\r\n\r\n        offset = this.cellWidth / hoursInDay * startHours;\r\n        return offset;\r\n    }\r\n\r\n    /** Calculate the bar styles */\r\n    public calculateBar(task: any, index: number, scale: any) {\r\n        const barStyle = this.getBarStyle(task.color);\r\n        return {\r\n            'top': this.barTop * index + 2 + 'px',\r\n            'left': this.calculateBarLeft(task.start, scale) + 'px',\r\n            'height': this.barHeight + 'px',\r\n            'line-height': this.barLineHeight + 'px',\r\n            'width': this.calculateBarWidth(task.start, task.end) + 'px',\r\n            'background-color': barStyle[\"background-color\"],\r\n            'border-left': barStyle[\"border-left\"]\r\n        };\r\n    }\r\n\r\n    /** Get the bar style based on task status */\r\n    private getBarStyle(color: any): any {\r\n        const style = {};\r\n        style[\"background-color\"] = color.secondary;\r\n        style[\"border-left\"] = `5px solid ${color.primary}`;\r\n\r\n        return style;\r\n    }\r\n\r\n    /** Calculates the difference in two dates and returns number of days */\r\n    public calculateDiffDays(start: Date, end: Date): number {\r\n        try {\r\n            const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds /ms\r\n            const diffDays = Math.abs((start.getTime() - end.getTime()) / (oneDay));\r\n            const days = diffDays; // don't use Math.round as it will draw an incorrect bar\r\n            return days;\r\n        } catch (err) {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /** Calculate the gantt scale range given the start and end date of tasks*/\r\n    public calculateScale(start: Date = new Date(), end: Date = this.addDays(start, 7)) {\r\n        const scale: any[] = [];\r\n        try {\r\n            while (start.getTime() <= end.getTime()) {\r\n                scale.push(start);\r\n                start = this.addDays(start, 7);\r\n            }\r\n            return scale;\r\n\r\n        } catch (err) {\r\n            return scale;\r\n        }\r\n    }\r\n\r\n    public calculateMonthScale(start: Date = new Date(), end: Date = this.addDays(start, 7)) {\r\n        let scale: any[] = [];\r\n        try {\r\n            // while (start.getTime() <= end.getTime()) {\r\n            //     scale.push({ start: start, width: this.calculateCellMonthWidth(start, end) });\r\n            //     start = this.addDays(start, new Date(start.getFullYear(), start.getMonth() + 1, 0).getDate());\r\n            // }\r\n            scale = this.calculateCellMonthWidth(start, end);\r\n            return scale;\r\n\r\n        } catch (err) {\r\n            return scale;\r\n        }\r\n    }\r\n\r\n    /** Determines whether given date is a weekend */\r\n    public isDayWeekend(date: Date): boolean {\r\n        const day = date.getDay();\r\n        if (day === 6 || day === 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** Add x number of days to a date object */\r\n    public addDays(date: Date, days: number): Date {\r\n        const result = new Date(date);\r\n        result.setDate(result.getDate() + days);\r\n        return result;\r\n    }\r\n\r\n    //** Remove x number of days from a date object */\r\n    public removeDays(date: Date, days: number): Date {\r\n        const result = new Date(date);\r\n        result.setDate(result.getDate() - days);\r\n        return result;\r\n    }\r\n\r\n    /** Calculates the grid scale for gantt based on tasks start and end dates */\r\n    public calculateGridScale(tasks: Task[]): IScale {\r\n        let start: Date;\r\n        let end: Date;\r\n        const dates = tasks.map((task: any) => {\r\n            return {\r\n                start: new Date(task.start),\r\n                end: new Date(task.end)\r\n            };\r\n        });\r\n\r\n        start = new Date(Math.min.apply(null, dates.map((t) => {\r\n            return t.start;\r\n        })));\r\n\r\n        end = new Date(Math.max.apply(null, dates.map((t) => {\r\n            return t.end;\r\n        })));\r\n\r\n        return {\r\n            start: start,\r\n            end: end\r\n        };\r\n    }\r\n\r\n    public getComputedStyle(element: any, attribute: any) {\r\n        return parseInt(document.defaultView.getComputedStyle(element)[attribute], 10);\r\n    }\r\n\r\n    //TODO(dale): determine whether this is needed\r\n    public calculateContainerWidth(): number {\r\n        this.windowInnerWidth = window.innerWidth;\r\n        const containerWidth = this.gridWidth - 18;\r\n        return containerWidth;\r\n    }\r\n\r\n    public calculateContainerHeight(): number {\r\n        const containerHeight = (innerHeight - 18);\r\n        return containerHeight;\r\n    }\r\n\r\n    public calculateActivityContainerDimensions(): any {\r\n        const scrollWidth = 18;\r\n        this.windowInnerWidth = window.innerWidth;\r\n        const width = window.innerWidth - this.gridWidth - scrollWidth;\r\n\r\n        return { height: this.activityHeight, width: width };\r\n    }\r\n\r\n    public calculateGanttActivityWidth(elem: HTMLElement): any {\r\n        return `calc(100% - ${(elem.offsetWidth + 1)}px)`;\r\n    }\r\n\r\n    public calculateGanttActivityHeight(elem: HTMLElement): any {\r\n        return `${elem.offsetHeight}px`;\r\n    }\r\n\r\n    public calculateCellMonthWidth(minDate: Date, maxDate: Date) {\r\n        var i, result = [];\r\n        var startDate = minDate;\r\n        var endDate = maxDate;\r\n        var monthDiff = this.calculateDiffMonths(startDate, endDate);\r\n        var dayDiff = this.calculateDiffDays(startDate, endDate);\r\n\r\n        for (i = 0; i < monthDiff; i++) {\r\n            var startOfMonth = i === 0 ? startDate : new Date(startDate.getFullYear(), i, 1);\r\n            var endOfMonth = i === monthDiff - 1 ? endDate : new Date(startDate.getFullYear(), i + 1, 0);\r\n            var dayInMonth = this.calculateDiffDays(startOfMonth, endOfMonth) + (i !== monthDiff - 1 && 1);\r\n            var width = Math.floor(dayInMonth / dayDiff * 2E3) * 1.025;\r\n\r\n            result.push({ start: startOfMonth, end: endOfMonth, width: width });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private calculateDiffMonths(start, end) {\r\n        var months = end.getMonth() - start.getMonth() + (12 * (end.getFullYear() - start.getFullYear()));\r\n\r\n        if(end.getDate() < start.getDate()) {\r\n            var newFrom = new Date(end.getFullYear(), end.getMonth(),start.getDate());\r\n            if (end < newFrom  && end.getMonth() == newFrom.getMonth() && end.getYear() % 4 != 0) {\r\n                months--;\r\n            }\r\n        }\r\n\r\n        return months + 1;\r\n    }\r\n\r\n    /** Set the vertical scroll top positions for gantt */\r\n    public scrollTop(verticalScrollElem: any, ganttGridElem: any, ganttActivityAreaElem: any) {\r\n        const verticalScrollTop = verticalScrollElem.scrollTop;\r\n        const scroll = this.setScrollTop;\r\n\r\n        // debounce\r\n        if (verticalScrollTop !== null && verticalScrollTop !== undefined) {\r\n            scroll(verticalScrollTop, ganttActivityAreaElem);\r\n            scroll(ganttActivityAreaElem.scrollTop, ganttGridElem);\r\n        }\r\n    }\r\n\r\n    /** Group data by id , only supports one level*/\r\n    public groupData(tasks: any): any {\r\n        return tasks;\r\n    }\r\n\r\n    /** Checks whether any new data needs to be added to task cache  */\r\n    public doTaskCheck(tasks: any[], scale: any): boolean {\r\n        // const cachedTaskIds = this.TASK_CACHE.map((task: any) => { return task.id });\r\n        // const itemsToCache: any[] = [];\r\n\r\n        // only look at tasks that are not cached\r\n        // tasks.filter((task: any) => {\r\n        //     return cachedTaskIds.indexOf(task.id) === -1;\r\n        // }).forEach((task: any) => {\r\n        //     itemsToCache.push(task);\r\n        // });\r\n\r\n        // itemsToCache.forEach((item: any) => {\r\n        //     this.TASK_CACHE.push(item);\r\n        // });\r\n\r\n        // if (itemsToCache.length > 0) {\r\n        //     return true;\r\n        // }\r\n\r\n        this.TASK_CACHE = tasks;\r\n\r\n        this.TIME_SCALE = this.calculateScale(scale.start, scale.end);\r\n        this.MONTH_SCALE = this.calculateMonthScale(scale.start, scale.end);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** Set a id prefix so CSS3 query selector can work with ids that contain numbers */\r\n    public setIdPrefix(id: string): string {\r\n        return `_${id}`;\r\n    }\r\n\r\n    // /** Remove the id prefix to allow querying of data */\r\n    // public removeIdPrefix(id: string): string {\r\n    //     return id.substring(1, id.length - 1);\r\n    // }\r\n\r\n    /** Set the scroll top property of a native DOM element */\r\n    public setScrollTop(scrollTop: number, element: any): void {\r\n        if (element !== null && element !== undefined) {\r\n            element.scrollTop = scrollTop;\r\n        }\r\n    }\r\n}\r\n","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\r\nimport { NgStyle } from '@angular/common';\r\nimport { GanttService } from './shared/services/gantt.service';\r\nimport { IGanttOptions, Project } from './shared/interfaces';\r\n\r\n@Component({\r\n    selector: 'gantt',\r\n    template: `\r\n        <div [ngStyle]=\"{ 'width': '100%' }\">\r\n            <div class=\"gantt-container\" (window:resize)=\"onResize($event)\">\r\n                <!--<gantt-header [name]=\"_project.name\" [startDate]=\"_project.startDate\"></gantt-header>-->\r\n                <gantt-activity [project]=\"_project\" [options]=\"_options\" (onGridRowClick)=\"gridRowClicked($event)\" (onPopoverOpen)=\"popoverOpened($event)\"></gantt-activity>\r\n                <!--<gantt-footer [project]=\"_project\"></gantt-footer>-->\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .gantt-container {\r\n            font-family: Arial;\r\n            font-size: 13px;\r\n            border: 1px solid #cecece;\r\n            position: relative;\r\n            white-space: nowrap;\r\n            margin-top: 0px;\r\n        }\r\n    `],\r\n    providers: []\r\n})\r\nexport class GanttComponent implements OnInit {\r\n    _project: Project;\r\n    _options: IGanttOptions;\r\n\r\n    @Input()\r\n    set project(project: any) {\r\n        if (project) {\r\n            this._project = project;\r\n        } else {\r\n            this.setDefaultProject();\r\n        }\r\n    }\r\n    get project() { return this._project; }\r\n\r\n    @Input()\r\n    set options(options: any) {\r\n        if (options.scale) {\r\n            this._options = options;\r\n        } else {\r\n            this.setDefaultOptions();\r\n        }\r\n    }\r\n    get options() { return this._options; }\r\n\r\n    @Output() onGridRowClick: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() onPopoverOpen: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    ganttContainerWidth: number;\r\n\r\n    constructor(public ganttService: GanttService) { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    setSizes(): void {\r\n        this.ganttContainerWidth = this.ganttService.calculateContainerWidth();\r\n    }\r\n\r\n    setDefaultOptions() {\r\n        const scale = this.ganttService.calculateGridScale(this._project.tasks);\r\n        const gridColumns = [\r\n            { name: '', left: 0, width: 16 },\r\n            { name: 'Zadanie', left: 0, width: 330 }\r\n        ];\r\n\r\n        this._options = {\r\n            scale,\r\n            gridColumns\r\n        };\r\n    }\r\n\r\n    setDefaultProject() {\r\n        this._project = {\r\n            name: '',\r\n            startDate: null,\r\n            tasks: []\r\n        };\r\n    }\r\n\r\n    gridRowClicked(task: any) {\r\n        this.onGridRowClick.emit(task);\r\n    }\r\n\r\n    popoverOpened(task: any) {\r\n        this.onPopoverOpen.emit(task);\r\n    }\r\n\r\n    onResize($event: any): void {\r\n        this.setSizes();\r\n    }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'gantt-header',\r\n    template: `\r\n        <div class=\"gantt-header\">\r\n            <div class=\"gantt-header-title\">\r\n                <div style=\"flex:1\">{{ name }}</div>\r\n                <div>Started: {{ startDate | date: 'medium'}}</div>\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .gantt-header {\r\n            background-color: whitesmoke;\r\n            height: 40px;\r\n            border-bottom: 1px solid #e0e0e0;\r\n        }\r\n        .gantt-header-title {\r\n            padding: 12px;\r\n            display: flex;\r\n            flex-wrap:wrap;\r\n            font-family: Arial, Helvetica, sans-serif;\r\n            font-size: 16px;\r\n        }\r\n        .gantt-header-actions {\r\n            display: inline;\r\n            float: right;\r\n            padding: 6px;\r\n        }\r\n    `]\r\n})\r\nexport class GanttHeaderComponent {\r\n    @Input() name: any;\r\n    @Input() startDate: Date;\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'gantt-footer',\r\n    template: `<div class=\"gantt-footer\"></div>`,\r\n    styles: [`\r\n        .gantt-footer {\r\n            background-color: whitesmoke;\r\n            height: 36px;\r\n            border-top: 1px solid #e0e0e0;\r\n        }\r\n        .gantt-footer-actions {\r\n            float: right;\r\n        }\r\n    `]\r\n})\r\nexport class GanttFooterComponent {\r\n    @Input() project: any;\r\n    constructor() { }\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, ElementRef,  ChangeDetectionStrategy, OnChanges, DoCheck } from '@angular/core';\r\n\r\nimport { GanttService } from '../shared/services/gantt.service';\r\nimport { IGridColumn, IGanttOptions, Project, IScale } from '../shared/interfaces';\r\nimport { EventManager } from '@angular/platform-browser';\r\n\r\n@Component({\r\n    selector: 'gantt-activity',\r\n    template: `\r\n\r\n    <div class=\"grid\" #ganttGrid>\r\n        <div class=\"grid-scale\" [ngStyle]=\"setGridScaleStyle()\">\r\n            <div class=\"grid-head-cell\"\r\n                *ngFor=\"let column of gridColumns\" [style.width]=\"column.width + 'px'\"\r\n                [style.left]=\"column.left + 'px'\">\r\n\r\n                <label>\r\n                    {{column.name}}\r\n                </label>\r\n            </div>\r\n        </div>\r\n        <div class=\"grid-data\"\r\n            #ganttGridData\r\n            [ngStyle]=\"{ 'height': ganttService.calculateGanttHeight() }\">\r\n\r\n            <div #row\r\n                *ngFor=\"let data of ganttService.TASK_CACHE\" class=\"grid-row\"\r\n                [ngStyle]=\"setGridRowStyle()\">\r\n\r\n                <mde-popover #appPopover=\"mdePopover\"\r\n                    [mdePopoverEnterDelay]=\"100\"\r\n                    [mdePopoverLeaveDelay]=\"0\"\r\n                    [mdePopoverPositionY]=\"'above'\"\r\n                    [mdePopoverOverlapTrigger]=\"false\"\r\n                    [mdePopoverDisableAnimation]=\"false\"\r\n                    [mdePopoverArrowWidth]=\"8\"\r\n                    [mdePopoverArrowColor]=\"'black'\"\r\n                    mdePopoverPlacement=\"bottom\">\r\n\r\n                    <mat-card style=\"max-width: 340px; padding: 3px 8px;\r\n                        color: #ffffff;\r\n                        text-align: center;\r\n                        background-color: #000000;\r\n                        border-radius: 4px;\">\r\n                        <span style=\"z-index: 1070;\r\n                            display: block;\r\n                            font-family: 'Lato','Helvetica Neue',Helvetica,Arial,sans-serif;\r\n                            font-style: normal;\r\n                            font-weight: normal;\r\n                            letter-spacing: normal;\r\n                            line-break: auto;\r\n                            line-height: 1.42857143;\r\n                            text-align: left;\r\n                            text-align: start;\r\n                            text-decoration: none;\r\n                            text-shadow: none;\r\n                            text-transform: none;\r\n                            white-space: normal;\r\n                            word-break: normal;\r\n                            word-spacing: normal;\r\n                            word-wrap: normal;\r\n                            font-size: 13px;\">{{data.name}}</span>\r\n                    </mat-card>\r\n                </mde-popover>\r\n\r\n                <div class=\"grid-cell\"\r\n                    [mdePopoverTriggerFor]=\"appPopover\"\r\n                    [mdePopoverBackdropCloseOnClick]=\"false\"\r\n                    mdePopoverOffsetX=\"25\"\r\n                    mdePopoverOffsetY=\"0\"\r\n                    [ngStyle]=\"{ 'width': gridColumns[1].width + 'px', 'padding-left': 0 }\">\r\n\r\n                    <div class=\"gantt-tree-content\">\r\n                        <span [ngStyle]=\"{ borderLeftColor: data.color.primary, borderLeftWidth: .35 + 'em', \r\n                            borderLeftStyle: 'solid', paddingRight: .5 + 'em'}\"></span>\r\n                        <span>{{data.name}}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"gantt-activity\" #ganttActivity\r\n        (wheel)=\"doWheel($event, ganttActivity)\"\r\n        (window:resize)=\"onResize($event)\"\r\n        [ngStyle]=\"{ 'height': ganttService.calculateGanttHeight() + 60, 'width': calculateColumnsWidth() }\">\r\n\r\n        <time-scale [timeScaleMonth]=\"ganttService.MONTH_SCALE\"\r\n            [timeScaleWeekend]=\"ganttService.TIME_SCALE\"\r\n            [dimensions]=\"dimensions\"\r\n            [scale]=\"options.scale\"></time-scale>\r\n        <div class=\"gantt-activity-area\"\r\n            #ganttActivityArea\r\n            [ngStyle]=\"{ 'height': ganttService.calculateGanttHeight(), 'width': containerWidth + 36 + 'px' }\">\r\n\r\n            <activity-background [timeScale]=\"ganttService.TIME_SCALE\"\r\n                [tasks]=\"ganttService.TASK_CACHE\"></activity-background>\r\n            <activity-bars [timeScale]=\"ganttService.TIME_SCALE\"\r\n                [dimensions]=\"dimensions\"\r\n                [tasks]=\"ganttService.TASK_CACHE\"\r\n                (onGridRowClick)=\"gridRowClick($event)\"\r\n                (onPopoverOpen)=\"popoverOpen($event)\"></activity-bars>\r\n        </div>\r\n    </div>\r\n    `,\r\n    styles: [`\r\n        .gantt-activity {\r\n            overflow-y: hidden;\r\n            overflow-x: scroll;\r\n            display: inline-block;\r\n            vertical-align: top;\r\n            position: relative;\r\n        }\r\n        .gantt-activity-area {\r\n            position: relative;\r\n            overflow-x: hidden;\r\n            overflow-y: hidden;\r\n            -webkit-user-select: none;\r\n        }\r\n        .gantt-vertical-scroll {\r\n            background-color: transparent;\r\n            overflow-x: hidden;\r\n            overflow-y: scroll;\r\n            position: absolute;\r\n            right: -10px;\r\n            display: block;\r\n            top: -1px;\r\n            border: 1px solid #cecece;\r\n        }\r\n        .grid {\r\n            overflow-x: hidden;\r\n            overflow-y: hidden;\r\n            display: inline-block;\r\n            vertical-align: top;\r\n            border-right: 1px solid #cecece;\r\n        }\r\n        .grid-scale {\r\n            color: #6b6b6b;\r\n            font-size: 12px;\r\n            border-bottom: 1px solid #e0e0e0;\r\n            background-color: whitesmoke;\r\n        }\r\n        .grid-head-cell {\r\n            /*color: #a6a6a6;*/\r\n            border-top: none !important;\r\n            border-right: none !important;\r\n            line-height: inherit;\r\n            box-sizing: border-box;\r\n            display: inline-block;\r\n            vertical-align: top;\r\n            border-right: 1px solid #cecece;\r\n            /*text-align: center;*/\r\n            position: relative;\r\n            cursor: default;\r\n            height: 100%;\r\n            -moz-user-select: -moz-none;\r\n            -webkit-user-select: none;\r\n            overflow: hidden;\r\n        }\r\n        .grid-data {\r\n            overflow: hidden;\r\n        }\r\n        .grid-row {\r\n            box-sizing: border-box;\r\n            border-bottom: 1px solid #e0e0e0;\r\n            background-color: #fff;\r\n            position: relative;\r\n            -webkit-user-select: none;\r\n        }\r\n        .grid-row:hover {\r\n            background-color: #eeeeee;\r\n            cursor: pointer;\r\n        }\r\n        .grid-cell {\r\n            border-right: none;\r\n            color: #454545;\r\n            display: inline-block;\r\n            vertical-align: top;\r\n            padding-left: 6px;\r\n            padding-right: 6px;\r\n            height: 100%;\r\n            overflow: hidden;\r\n            white-space: nowrap;\r\n            font-size: 13px;\r\n            box-sizing: border-box;\r\n        }\r\n        .actions-bar {\r\n            /*border-top: 1px solid #cecece;*/\r\n            border-bottom: 1px solid #e0e0e0;\r\n            clear: both;\r\n            /*margin-top: 90px;*/\r\n            height: 28px;\r\n            background: whitesmoke;\r\n            color: #494949;\r\n            font-family: Arial, sans-serif;\r\n            font-size: 13px;\r\n            padding-left: 15px;\r\n            line-height: 25px;\r\n        }\r\n        .gantt-tree-content {\r\n            padding-left: 15px;\r\n        }\r\n    `],\r\n    changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class GanttActivityComponent implements OnInit, DoCheck {\r\n    @Input() project: Project;\r\n    @Input() options: IGanttOptions;\r\n\r\n    @Output() onGridRowClick: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() onPopoverOpen: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    private start: Date;\r\n    private end: Date;\r\n    private timeScale: any;\r\n\r\n    private scale: IScale = {\r\n        start: null,\r\n        end: null\r\n    };\r\n\r\n    private activityContainerSizes: any;\r\n\r\n    containerHeight: any;\r\n    containerWidth: any;\r\n\r\n    ganttActivityHeight: any;\r\n    ganttActivityWidth: any;\r\n\r\n    dimensions = {\r\n        height: 0,\r\n        width: 0\r\n    };\r\n\r\n    gridColumns: IGridColumn[] = [\r\n        { name: '', left: 0, width: 16 },\r\n        { name: 'Zadanie', left: 0, width: 330 }\r\n    ];\r\n\r\n    constructor(\r\n        public elem: ElementRef,\r\n        public ganttService: GanttService) {\r\n    }\r\n\r\n    doWheel(event, elem: HTMLElement) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        // chome\r\n        if (event.wheelDelta) {\r\n            if ((event.wheelDelta || event.detail) > 0) {\r\n                elem.scrollLeft -= 100;\r\n            } else {\r\n                elem.scrollLeft += 100;\r\n            }\r\n        // firefox\r\n        } else {\r\n            if (event.deltaY > 0) {\r\n                elem.scrollLeft += 100;\r\n            } else {\r\n                elem.scrollLeft -= 100;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    ngOnInit() {\r\n        // Cache the project data and only work with that. Only show parent tasks by default\r\n        this.ganttService.TASK_CACHE = this.project.tasks;\r\n        this.ganttService.TIME_SCALE = this.ganttService.calculateScale(this.options.scale.start, this.options.scale.end);\r\n\r\n        this.start = this.options.scale.start;\r\n        this.end = this.options.scale.end;\r\n        this.containerWidth = this.calculateContainerWidth();\r\n        this.containerHeight = this.calculateContainerHeight();\r\n        this.activityContainerSizes = this.ganttService.calculateActivityContainerDimensions();\r\n\r\n        this.gridColumns = this.options.gridColumns ? this.options.gridColumns : this.gridColumns;\r\n\r\n        // important that these are called last as it relies on values calculated above.\r\n        this.setScale();\r\n        this.setDimensions();\r\n        this.setSizes();\r\n    }\r\n\r\n    /** Custom model check */\r\n    ngDoCheck() {\r\n        // do a check to see whether any new tasks have been added. If the task is a child then push into array if tree expanded?\r\n        this.ganttService.doTaskCheck(this.project.tasks, this.options.scale);\r\n    }\r\n\r\n    /** On vertical scroll set the scroll top of grid and activity  */\r\n    onVerticalScroll(verticalScroll: any, ganttGrid: any, ganttActivityArea: any): void {\r\n        this.ganttService.scrollTop(verticalScroll, ganttGrid, ganttActivityArea);\r\n    }\r\n\r\n    gridRowClick(task) {\r\n        try {\r\n            this.onGridRowClick.emit(task);\r\n        } catch (err) { }\r\n    }\r\n\r\n    popoverOpen(task) {\r\n        try {\r\n            this.onPopoverOpen.emit(task);\r\n        } catch (err) { }\r\n    }\r\n\r\n    /** On resize of browser window dynamically adjust gantt activity height and width */\r\n    onResize(event: any): void {\r\n        const activityContainerSizes = this.ganttService.calculateActivityContainerDimensions();\r\n        this.ganttActivityHeight = activityContainerSizes.height + 'px';\r\n        this.ganttActivityWidth = activityContainerSizes.width;\r\n    }\r\n\r\n    setScale() {\r\n        this.scale.start = this.start;\r\n        this.scale.end = this.end;\r\n    }\r\n\r\n    setDimensions() {\r\n        this.dimensions.height = this.containerHeight;\r\n        this.dimensions.width = this.containerWidth;\r\n    }\r\n\r\n    setGridRowStyle(): any {\r\n        return {\r\n            'height': this.ganttService.rowHeight + 'px',\r\n            'line-height': this.ganttService.rowHeight + 'px'\r\n        };\r\n    }\r\n\r\n    setGridScaleStyle() {\r\n        const height = this.ganttService.rowHeight + 30;\r\n        return {\r\n            'height': height + 'px',\r\n            'line-height': height + 'px'\r\n        };\r\n    }\r\n\r\n    calculateColumnsWidth() {\r\n        const ganttActivityWidth = this.gridColumns.map(column => { return column.width }).reduce((pv, cv) => pv + cv, 0) + 1;\r\n        return `calc(100% - ${(ganttActivityWidth)}px)`;\r\n    }\r\n\r\n    private calculateContainerHeight(): number {\r\n        return this.ganttService.TASK_CACHE.length * this.ganttService.rowHeight;\r\n    }\r\n\r\n    private calculateContainerWidth(): number {\r\n        return this.ganttService.TIME_SCALE.length * this.ganttService.cellWidth + this.ganttService.cellWidth;\r\n    }\r\n\r\n    private setSizes(): void {\r\n        this.ganttActivityHeight = this.activityContainerSizes.height + 'px';\r\n        this.ganttActivityWidth = this.activityContainerSizes.width;\r\n    }\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { GanttService } from '../../shared/services/gantt.service';\r\nimport { IScale } from '../../shared/interfaces';\r\n\r\n@Component({\r\n    selector: 'time-scale',\r\n    template: `\r\n        <div class=\"time-scale\" [ngStyle]=\"setTimescaleStyle()\">\r\n            <!--<div class=\"time-scale-line\" [ngStyle]=\"setTimescaleMonthLineStyle('none')\">\r\n                <div class=\"time-scale-cell\" *ngFor=\"let scale of timeScaleMonth; let i = index\"\r\n                    [ngClass]=\"(i % 2) ? 'weekend' : ''\" [style.width.px]=\"scale.width\">{{scale.start | date: 'dd-MM'}}</div>\r\n            </div>-->\r\n            <div class=\"time-scale-line\" [ngStyle]=\"setTimescaleWeekendLineStyle('none')\">\r\n                <div class=\"time-scale-cell\" *ngFor=\"let date of timeScaleWeekend; let i = index\"\r\n                    [ngClass]=\"(i % 2) ? 'weekend' : ''\" [ngStyle]=\"setTimescaleWeekendCellStyle()\">{{date | date: 'dd-MM'}}</div>\r\n            </div>\r\n            <div class=\"time-scale-line\" [ngStyle]=\"setTimescaleWeekendLineStyle('none')\">\r\n                <div class=\"time-scale-cell\" *ngFor=\"let date of timeScaleWeekend; let i = index\"\r\n                [ngClass]=\"(i % 2) ? 'weekend' : ''\" [ngStyle]=\"setTimescaleWeekendCellStyle()\">{{i + 1}}</div>\r\n            </div>\r\n        </div>`,\r\n    styles: [`\r\n        .weekend {\r\n            background-color: whitesmoke;\r\n        }\r\n        .time-scale {\r\n            font-size: 12px;\r\n            background-color: #fff;\r\n            border-bottom: 1px solid #cecece;\r\n        }\r\n        .time-scale-line {\r\n            box-sizing: border-box;\r\n            border-bottom: 1px solid #cecece;\r\n        }\r\n        .time-scale-line:first-child {\r\n            border-top: none;\r\n        }\r\n        .time-scale-cell {\r\n            display: inline-block;\r\n            white-space: nowrap;\r\n            overflow: hidden;\r\n            border-right: 1px solid #cecece;\r\n            text-align: center;\r\n            height: 100%;\r\n        }`\r\n    ],\r\n    providers: [\r\n        GanttService\r\n    ]\r\n})\r\nexport class GanttTimeScaleComponent implements OnInit {\r\n    @Input() timeScaleMonth: any;\r\n    @Input() timeScaleWeekend: any;\r\n    @Input() dimensions: any;\r\n    @Input() scale: IScale;\r\n\r\n    constructor(public ganttService: GanttService) { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    setTimescaleStyle() {\r\n        return {\r\n            'width': (this.dimensions.width + 36) + 'px'\r\n        };\r\n    }\r\n\r\n    setTimescaleMonthLineStyle(borderTop: string) {\r\n        return {\r\n            'height': this.ganttService.rowHeight + 'px',\r\n            'line-height': this.ganttService.rowHeight + 'px',\r\n            'position': 'relative',\r\n            'border-top': borderTop\r\n        };\r\n    }\r\n\r\n    setTimescaleMonthCellStyle() {\r\n        return {\r\n            'width': this.ganttService.cellWidth + 'px'\r\n        };\r\n    }\r\n\r\n    setTimescaleWeekendLineStyle(borderTop: string) {\r\n        return {\r\n            'height': this.ganttService.rowHeight + 'px',\r\n            'line-height': this.ganttService.rowHeight + 'px',\r\n            'position': 'relative',\r\n            'border-top': borderTop\r\n        };\r\n    }\r\n\r\n    setTimescaleWeekendCellStyle() {\r\n        return {\r\n            'width': this.ganttService.cellWidth + 'px'\r\n        };\r\n    }\r\n\r\n    isDayWeekend(date: Date): boolean {\r\n        return this.ganttService.isDayWeekend(date);\r\n    }\r\n}\r\n","import { Component, OnInit, Input, ViewChild, ElementRef } from '@angular/core';\r\nimport { GanttService } from '../../shared/services/gantt.service';\r\n\r\n@Component({\r\n    selector: 'activity-background',\r\n    template: `\r\n    <div #bg class=\"gantt-activity-bg\">\r\n        <div class=\"gantt-activity-row\"\r\n            [ngStyle]=\"setRowStyle()\"\r\n            *ngFor=\"let row of tasks\">\r\n\r\n            <div class=\"gantt-activity-cell\"\r\n                [ngStyle]=\"setCellStyle()\"\r\n                *ngFor=\"let cell of cells; let i = index; let l = last\" [ngClass]=\"(i % 2) ? 'weekend' : ''\" ></div>\r\n        </div>\r\n    </div>\r\n    `,\r\n    styles: [`\r\n        .weekend {\r\n            background-color: whitesmoke;\r\n        }\r\n        .gantt-activity-bg {\r\n            overflow: hidden;\r\n        }\r\n        .gantt-activity-row {\r\n            border-bottom: 1px solid #ebebeb;\r\n            background-color: #fff;\r\n            box-sizing: border-box;\r\n        }\r\n        .gantt-activity-cell {\r\n            display: inline-block;\r\n            height: 100%;\r\n            border-right: 1px solid #ebebeb;\r\n        }\r\n    `]\r\n})\r\nexport class GanttActivityBackgroundComponent implements OnInit {\r\n    @Input() tasks: any;\r\n    @Input() timeScale: any;\r\n\r\n    @ViewChild('bg') bg: ElementRef;\r\n\r\n    rows: any[] = [];\r\n    cells: any[] = [];\r\n\r\n    constructor(public ganttService: GanttService) { }\r\n\r\n    ngOnInit() {\r\n        this.drawGrid();\r\n    }\r\n\r\n    isDayWeekend(date: Date): boolean {\r\n        return this.ganttService.isDayWeekend(date);\r\n    }\r\n\r\n    setRowStyle() {\r\n        return {\r\n            'height': this.ganttService.rowHeight + 'px'\r\n        };\r\n    }\r\n\r\n    setCellStyle() {\r\n        return {\r\n            'width': this.ganttService.cellWidth + 'px'\r\n        };\r\n    }\r\n\r\n    private drawGrid(): void {\r\n        this.cells = this.timeScale;\r\n    }\r\n}\r\n","import { Component, OnInit, Input, ElementRef, EventEmitter, Output } from '@angular/core';\r\nimport { GanttService } from '../../shared/services/gantt.service';\r\n\r\n@Component({\r\n    selector: 'activity-bars',\r\n    template: `\r\n    <div class=\"gantt-activity-bars-area\"\r\n        [ngStyle]=\"{ 'height': containerHeight + 'px', 'width': containerWidth + 'px' }\">\r\n\r\n        <div #bar class=\"gantt-activity-line\"\r\n            *ngFor=\"let task of tasks; let i = index\" (click)=\"gridRowClicked(task)\"\r\n            [ngStyle]=\"drawBar(task, i)\">\r\n\r\n            <div #popoverTrigger=\"mdePopoverTrigger\"\r\n                [mdePopoverTriggerFor]=\"taskPopover\"\r\n                [mdePopoverBackdropCloseOnClick]=\"false\"\r\n                mdePopoverOffsetX=\"-15\"\r\n                mdePopoverOffsetY=\"0\"\r\n                (opened)=\"popoverOpened(task)\">\r\n\r\n                <mde-popover #taskPopover=\"mdePopover\"\r\n                    [mdePopoverEnterDelay]=\"100\"\r\n                    [mdePopoverLeaveDelay]=\"0\"\r\n                    [mdePopoverPositionY]=\"'above'\"\r\n                    [mdePopoverOverlapTrigger]=\"false\"\r\n                    [mdePopoverDisableAnimation]=\"false\"\r\n                    [mdeFocusTrapEnabled]=\"false\"\r\n                    [mdePopoverArrowWidth]=\"12\"\r\n                    [mdePopoverArrowColor]=\"task.color?.primary\"\r\n                    mdePopoverPlacement=\"bottom\">\r\n\r\n                    <ng-container *ngTemplateOutlet=\"templatePopoverTask; context: {task: task}\"></ng-container>\r\n                </mde-popover>\r\n\r\n                <div class=\"gantt-activity-content\"></div>\r\n                <div class=\"gantt-activity-link-control gantt-activity-right\" style=\"height: 26px; line-height: 30px\">\r\n                    <div class=\"gantt-link-point\"></div>\r\n                </div>\r\n                <div class=\"gantt-activity-link-control gantt-activity-left\" style=\"height: 26px; line-height: 30px\">\r\n                    <div class=\"gantt-link-point\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <ng-template #templatePopoverTask let-data=\"task\">\r\n        <mat-card *ngIf=\"data\" class=\"mat-elevation-z6\" \r\n            [ngStyle]=\"{ \r\n                borderBottomColor: data.color?.primary,\r\n                borderBottomWidth: '.25em',\r\n                borderBottomStyle: 'solid' \r\n            }\" style=\"width: 320px; max-width: 320px;\">\r\n\r\n            <mat-card-header>\r\n                <div mat-card-avatar [ngStyle]=\"{ borderColor: data.color?.primary }\" style=\"width: 0; height: unset; margin-bottom: .7em; border-radius: 0; border-style: solid;\"></div>\r\n                <mat-card-title>\r\n                    <span style=\"font-size: 80%;\">{{data.name}}</span>\r\n                </mat-card-title>\r\n                <mat-card-subtitle>\r\n                    <span>{{data.start | date:'yyyy-MM-dd'}} - {{data.end | date:'yyyy-MM-dd'}}</span>\r\n                </mat-card-subtitle>\r\n                <mat-card-subtitle>\r\n                    <span style=\"padding-left: .75em; padding-right: 1em; font-stretch: condensed;\">&#x336;</span>\r\n                    <span>{{data.resource}}</span>\r\n                </mat-card-subtitle>\r\n            </mat-card-header>\r\n            <mat-card-content>\r\n                <footer *ngIf=\"data.description\">\r\n                    <span [innerHTML]=\"data.description\"></span>\r\n                </footer>\r\n            </mat-card-content>\r\n        </mat-card>\r\n    </ng-template>\r\n    `,\r\n    styles: [`\r\n    .gantt-activity-line {\r\n        /*border-radius: 2px;*/\r\n        position: absolute;\r\n        box-sizing: border-box;\r\n        -webkit-user-select: none;\r\n    }\r\n    .gantt-activity-line:hover {\r\n        cursor: pointer;\r\n    }\r\n    .gantt-activity-content {\r\n        font-size: 12px;\r\n        color: #fff;\r\n        width: 100%;\r\n        top: 0;\r\n        position: absolute;\r\n        white-space: nowrap;\r\n        text-align: center;\r\n        line-height: inherit;\r\n        overflow: hidden;\r\n        height: 100%;\r\n    }\r\n    .gantt-activity-link-control {\r\n        position: absolute;\r\n        width: 13px;\r\n        top: 0;\r\n    }\r\n    .gantt-activity-right {\r\n        right: 0;\r\n    }\r\n    .gantt-activity-left {\r\n        left: 0;\r\n    }\r\n    .gantt-activity-right:hover {\r\n        /*cursor:w-resize;*/\r\n    }\r\n    .gantt-activity-left:hover {\r\n        /*cursor:w-resize;*/\r\n    }\r\n    `],\r\n    providers: [\r\n        GanttService\r\n    ]\r\n})\r\nexport class GanttActivityBarsComponent implements OnInit {\r\n    @Input() timeScale: any;\r\n    @Input() dimensions: any;\r\n    @Input() tasks: any;\r\n\r\n    @Output() onGridRowClick: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() onPopoverOpen: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    containerHeight = 0;\r\n    containerWidth = 0;\r\n\r\n    constructor(public ganttService: GanttService) { }\r\n\r\n    ngOnInit() {\r\n        this.containerHeight = this.dimensions.height;\r\n        this.containerWidth = this.dimensions.width;\r\n    }\r\n\r\n    drawBar(task: any, index: number) {\r\n        let style = {};\r\n        style = this.ganttService.calculateBar(task, index, this.timeScale);\r\n\r\n        return style;\r\n    }\r\n\r\n    gridRowClicked(task: any) {\r\n        try {\r\n            this.onGridRowClick.emit(task);\r\n        } catch (err) { }\r\n    }\r\n\r\n    popoverOpened(task: any) {\r\n        try {\r\n            this.onPopoverOpen.emit(task);\r\n        } catch (err) { }\r\n    }\r\n\r\n    private addMouseEventListeners(dragFn: any) {\r\n        function stopFn() {\r\n            document.documentElement.removeEventListener('mousemove', dragFn, false);\r\n            document.documentElement.removeEventListener('mouseup', stopFn, false);\r\n            document.documentElement.removeEventListener('mouseleave', stopFn, false);\r\n        }\r\n\r\n        document.documentElement.addEventListener('mousemove', dragFn, false);\r\n        document.documentElement.addEventListener('mouseup', stopFn, false);\r\n        document.documentElement.addEventListener('mouseleave', stopFn, false);\r\n    }\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\nimport { MatCardModule } from \"@angular/material/card\";\r\nimport { MdePopoverModule } from \"@material-extended/mde\";\r\n\r\nimport { GanttActivityComponent } from \"./gantt-activity.component\";\r\nimport { GanttTimeScaleComponent } from \"./time-scale/gantt-time-scale.component\";\r\nimport { GanttActivityBackgroundComponent } from \"./background/activity-background.component\";\r\nimport { GanttActivityBarsComponent } from \"./bars/activity-bars.component\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatCardModule, MdePopoverModule],\r\n  exports: [\r\n    GanttActivityComponent,\r\n    GanttTimeScaleComponent,\r\n    GanttActivityBackgroundComponent,\r\n    GanttActivityBarsComponent,\r\n  ],\r\n  declarations: [\r\n    GanttActivityComponent,\r\n    GanttTimeScaleComponent,\r\n    GanttActivityBackgroundComponent,\r\n    GanttActivityBarsComponent,\r\n  ],\r\n  providers: [],\r\n})\r\nexport class GanttActivityModule {}\r\n","import {\r\n  NgModule,\r\n  CUSTOM_ELEMENTS_SCHEMA,\r\n  ModuleWithProviders,\r\n} from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { FormsModule } from \"@angular/forms\";\r\n\r\nimport { GanttComponent } from \"./gantt.component\";\r\nimport { GanttHeaderComponent } from \"./header/gantt-header.component\";\r\nimport { GanttFooterComponent } from \"./footer/gantt-footer.component\";\r\nimport { GanttService } from \"./shared/services/gantt.service\";\r\nimport { GanttActivityModule } from \"./activity/gantt-activity.module\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, GanttActivityModule],\r\n  exports: [GanttComponent],\r\n  declarations: [GanttComponent, GanttHeaderComponent, GanttFooterComponent],\r\n  providers: [GanttService],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n})\r\nexport class GanttModule {\r\n  static forRoot(): ModuleWithProviders<GanttModule> {\r\n    return {\r\n      ngModule: GanttModule,\r\n    };\r\n  }\r\n}\r\n"]}