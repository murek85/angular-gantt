{"version":3,"sources":["ng://angular-gantt/lib/shared/services/gantt-config.service.ts","ng://angular-gantt/lib/shared/services/gantt.service.ts","ng://angular-gantt/lib/activity/time-scale/gantt-time-scale.component.ts","ng://angular-gantt/lib/activity/background/activity-background.component.ts","ng://angular-gantt/lib/activity/bars/activity-bars.component.ts","ng://angular-gantt/lib/activity/gantt-activity.component.ts","ng://angular-gantt/lib/gantt.component.ts","ng://angular-gantt/lib/header/gantt-header.component.ts","ng://angular-gantt/lib/footer/gantt-footer.component.ts","ng://angular-gantt/lib/activity/gantt-activity.module.ts","ng://angular-gantt/lib/gantt.module.ts"],"names":["GanttConfig","this","cellWidth","rowHeight","activityHeight","barHeight","barLineHeight","barMoveable","factory","ɵfac","GanttService","hourCellWidth","hoursCellWidth","windowInnerWidth","barTop","gridWidth","gridHeight","ganttConfig","prototype","calculateBarWidth","start","end","Date","days","calculateDiffDays","calculateBarLeft","scale","left","i","length","getTime","calculateBarLeftDelta","calculateGanttHeight","TASK_CACHE","startHours","getHours","getMinutes","getSeconds","calculateBar","task","index","barStyle","getBarStyle","color","top","height","line-height","width","background-color","border-left","style","secondary","primary","Math","abs","err","calculateScale","addDays","push","calculateMonthScale","calculateCellMonthWidth","isDayWeekend","date","day","getDay","result","setDate","getDate","removeDays","calculateGridScale","tasks","dates","map","min","apply","t","max","getComputedStyle","element","attribute","parseInt","document","defaultView","calculateContainerWidth","window","innerWidth","calculateContainerHeight","innerHeight","calculateActivityContainerDimensions","calculateGanttActivityWidth","elem","offsetWidth","calculateGanttActivityHeight","offsetHeight","minDate","maxDate","startDate","endDate","monthDiff","calculateDiffMonths","dayDiff","startOfMonth","getFullYear","endOfMonth","dayInMonth","floor","months","getMonth","newFrom","getYear","scrollTop","verticalScrollElem","ganttGridElem","ganttActivityAreaElem","verticalScrollTop","scroll","setScrollTop","groupData","doTaskCheck","TIME_SCALE","MONTH_SCALE","setIdPrefix","id","i0.ɵɵelementStart","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵproperty","ctx_r0","setTimescaleWeekendCellStyle","i0.ɵɵadvance","i0.ɵɵtextInterpolate","ctx_r1","GanttTimeScaleComponent","ganttService","ngOnInit","setTimescaleStyle","dimensions","setTimescaleMonthLineStyle","borderTop","position","border-top","setTimescaleMonthCellStyle","setTimescaleWeekendLineStyle","core","ɵɵdirectiveInject","selectors","inputs","timeScaleMonth","timeScaleWeekend","features","ɵɵProvidersFeature","decls","vars","consts","template","rf","ctx","i0.ɵɵtemplate","i0.ɵɵelement","i_r5","GanttActivityBackgroundComponent","rows","cells","drawGrid","setRowStyle","setCellStyle","timeScale","viewQuery","i0.ɵɵelementContainer","i0.ɵɵlistener","task_r3","ɵɵpureFunction1","_c0$1","i0.ɵɵtextInterpolate2","GanttActivityBarsComponent","onGridRowClick","EventEmitter","onPopoverOpen","containerHeight","containerWidth","drawBar","gridRowClicked","emit","popoverOpened","addMouseEventListeners","dragFn","stopFn","documentElement","removeEventListener","addEventListener","outputs","i0.ɵɵstyleProp","column_r6","i0.ɵɵtextInterpolate1","_c0$2","ctx_r3","gridColumns","GanttActivityComponent","name","doWheel","event","preventDefault","stopPropagation","wheelDelta","detail","scrollLeft","deltaY","project","options","activityContainerSizes","setScale","setDimensions","setSizes","ngDoCheck","onVerticalScroll","verticalScroll","ganttGrid","ganttActivityArea","gridRowClick","popoverOpen","onResize","ganttActivityHeight","ganttActivityWidth","setGridRowStyle","setGridScaleStyle","calculateColumnsWidth","column","reduce","pv","cv","ElementRef","$event","_r4","ɵɵresolveWindow","GanttComponent","Object","defineProperty","_project","setDefaultProject","_options","setDefaultOptions","ganttContainerWidth","GanttHeaderComponent","GanttFooterComponent","GanttActivityModule","providers","imports","CommonModule","MatCardModule","MdePopoverModule","declarations","exports","GanttModule","forRoot","ngModule","FormsModule"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class GanttConfig {\r\n    public cellWidth = 38;\r\n    public rowHeight = 30;\r\n    public activityHeight = 420;\r\n    public barHeight = 25;\r\n    public barLineHeight = 35;\r\n    public barMoveable = false;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { GanttConfig } from './gantt-config.service';\r\nimport { Task, IScale } from '../interfaces';\r\n\r\n@Injectable()\r\nexport class GanttService {\r\n    public rowHeight = 0;\r\n    public hourCellWidth = 60; // change to 60 so minutes can been seen more easily\r\n    public hoursCellWidth = this.hourCellWidth * 25;\r\n    public cellWidth = 0;\r\n    public windowInnerWidth = 0;\r\n    public activityHeight = 0;\r\n    public barHeight = 0;\r\n    public barLineHeight = 0;\r\n    public barTop = 0;\r\n    public barMoveable = false;\r\n    public gridWidth = 0; //188\r\n    public gridHeight = 332;\r\n    public TASK_CACHE: any[];\r\n    public TIME_SCALE: any[];\r\n    public MONTH_SCALE: any[];\r\n\r\n    constructor() {\r\n        const ganttConfig = new GanttConfig();\r\n\r\n        this.rowHeight = ganttConfig.rowHeight;\r\n        this.cellWidth = ganttConfig.cellWidth;\r\n        this.activityHeight = ganttConfig.activityHeight;\r\n        this.barHeight = ganttConfig.barHeight;\r\n        this.barLineHeight = ganttConfig.barLineHeight;\r\n        this.barTop = ganttConfig.rowHeight;\r\n        this.barMoveable = ganttConfig.barMoveable;\r\n    }\r\n\r\n    private calculateBarWidth(start: Date, end: Date): number {\r\n        if (typeof start === 'string') {\r\n            start = new Date(start);\r\n        }\r\n\r\n        if (typeof end === 'string') {\r\n            end = new Date(end);\r\n        }\r\n\r\n        const days = this.calculateDiffDays(start, end);\r\n        const width: number = (days * this.cellWidth + days) / 7;\r\n        return width;\r\n    }\r\n\r\n    private calculateBarLeft(start: Date, scale: any[]): number {\r\n        let left = 0;\r\n\r\n        if (start != null) {\r\n            if (typeof start === 'string') {\r\n                start = new Date();\r\n            }\r\n\r\n            for (let i = 0; i < scale.length; i++) {\r\n                if (start.getTime() >= scale[i].getTime() && start.getTime() < scale[i + 1].getTime()) {\r\n                    // left = i * this.cellWidth + i + this.calculateBarLeftDelta(start) +\r\n                    //    ((7 / (scale[i + 1].getDate() - start.getDate()) / 7) * this.cellWidth) - this.cellWidth / 7;\r\n                    left = i * this.cellWidth + ((this.cellWidth) * this.calculateDiffDays(scale[i], start) / 7) +\r\n                        i + this.calculateBarLeftDelta(start);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return left;\r\n    }\r\n\r\n    /** Calculates the height of the gantt grid, activity and vertical scroll */\r\n    public calculateGanttHeight(): string {\r\n        return `${this.TASK_CACHE.length * this.rowHeight}px`;\r\n    }\r\n\r\n    private calculateBarLeftDelta(start: Date): number {\r\n        let offset = 0;\r\n        const hoursInDay = 24;\r\n        const minutesInHour = 60;\r\n        const secondsInHour = 3600;\r\n        const startHours: number =\r\n            (start.getHours() + start.getMinutes() / minutesInHour + start.getSeconds() / secondsInHour);\r\n\r\n        offset = this.cellWidth / hoursInDay * startHours;\r\n        return offset;\r\n    }\r\n\r\n    /** Calculate the bar styles */\r\n    public calculateBar(task: any, index: number, scale: any) {\r\n        const barStyle = this.getBarStyle(task.color);\r\n        return {\r\n            'top': this.barTop * index + 2 + 'px',\r\n            'left': this.calculateBarLeft(task.start, scale) + 'px',\r\n            'height': this.barHeight + 'px',\r\n            'line-height': this.barLineHeight + 'px',\r\n            'width': this.calculateBarWidth(task.start, task.end) + 'px',\r\n            'background-color': barStyle[\"background-color\"],\r\n            'border-left': barStyle[\"border-left\"]\r\n        };\r\n    }\r\n\r\n    /** Get the bar style based on task status */\r\n    private getBarStyle(color: any): any {\r\n        const style = {};\r\n        style[\"background-color\"] = color.secondary;\r\n        style[\"border-left\"] = `5px solid ${color.primary}`;\r\n\r\n        return style;\r\n    }\r\n\r\n    /** Calculates the difference in two dates and returns number of days */\r\n    public calculateDiffDays(start: Date, end: Date): number {\r\n        try {\r\n            const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds /ms\r\n            const diffDays = Math.abs((start.getTime() - end.getTime()) / (oneDay));\r\n            const days = diffDays; // don't use Math.round as it will draw an incorrect bar\r\n            return days;\r\n        } catch (err) {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /** Calculate the gantt scale range given the start and end date of tasks*/\r\n    public calculateScale(start: Date = new Date(), end: Date = this.addDays(start, 7)) {\r\n        const scale: any[] = [];\r\n        try {\r\n            while (start.getTime() <= end.getTime()) {\r\n                scale.push(start);\r\n                start = this.addDays(start, 7);\r\n            }\r\n            return scale;\r\n\r\n        } catch (err) {\r\n            return scale;\r\n        }\r\n    }\r\n\r\n    public calculateMonthScale(start: Date = new Date(), end: Date = this.addDays(start, 7)) {\r\n        let scale: any[] = [];\r\n        try {\r\n            // while (start.getTime() <= end.getTime()) {\r\n            //     scale.push({ start: start, width: this.calculateCellMonthWidth(start, end) });\r\n            //     start = this.addDays(start, new Date(start.getFullYear(), start.getMonth() + 1, 0).getDate());\r\n            // }\r\n            scale = this.calculateCellMonthWidth(start, end);\r\n            return scale;\r\n\r\n        } catch (err) {\r\n            return scale;\r\n        }\r\n    }\r\n\r\n    /** Determines whether given date is a weekend */\r\n    public isDayWeekend(date: Date): boolean {\r\n        const day = date.getDay();\r\n        if (day === 6 || day === 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** Add x number of days to a date object */\r\n    public addDays(date: Date, days: number): Date {\r\n        const result = new Date(date);\r\n        result.setDate(result.getDate() + days);\r\n        return result;\r\n    }\r\n\r\n    //** Remove x number of days from a date object */\r\n    public removeDays(date: Date, days: number): Date {\r\n        const result = new Date(date);\r\n        result.setDate(result.getDate() - days);\r\n        return result;\r\n    }\r\n\r\n    /** Calculates the grid scale for gantt based on tasks start and end dates */\r\n    public calculateGridScale(tasks: Task[]): IScale {\r\n        let start: Date;\r\n        let end: Date;\r\n        const dates = tasks.map((task: any) => {\r\n            return {\r\n                start: new Date(task.start),\r\n                end: new Date(task.end)\r\n            };\r\n        });\r\n\r\n        start = new Date(Math.min.apply(null, dates.map((t) => {\r\n            return t.start;\r\n        })));\r\n\r\n        end = new Date(Math.max.apply(null, dates.map((t) => {\r\n            return t.end;\r\n        })));\r\n\r\n        return {\r\n            start: start,\r\n            end: end\r\n        };\r\n    }\r\n\r\n    public getComputedStyle(element: any, attribute: any) {\r\n        return parseInt(document.defaultView.getComputedStyle(element)[attribute], 10);\r\n    }\r\n\r\n    //TODO(dale): determine whether this is needed\r\n    public calculateContainerWidth(): number {\r\n        this.windowInnerWidth = window.innerWidth;\r\n        const containerWidth = this.gridWidth - 18;\r\n        return containerWidth;\r\n    }\r\n\r\n    public calculateContainerHeight(): number {\r\n        const containerHeight = (innerHeight - 18);\r\n        return containerHeight;\r\n    }\r\n\r\n    public calculateActivityContainerDimensions(): any {\r\n        const scrollWidth = 18;\r\n        this.windowInnerWidth = window.innerWidth;\r\n        const width = window.innerWidth - this.gridWidth - scrollWidth;\r\n\r\n        return { height: this.activityHeight, width: width };\r\n    }\r\n\r\n    public calculateGanttActivityWidth(elem: HTMLElement): any {\r\n        return `calc(100% - ${(elem.offsetWidth + 1)}px)`;\r\n    }\r\n\r\n    public calculateGanttActivityHeight(elem: HTMLElement): any {\r\n        return `${elem.offsetHeight}px`;\r\n    }\r\n\r\n    public calculateCellMonthWidth(minDate: Date, maxDate: Date) {\r\n        var i, result = [];\r\n        var startDate = minDate;\r\n        var endDate = maxDate;\r\n        var monthDiff = this.calculateDiffMonths(startDate, endDate);\r\n        var dayDiff = this.calculateDiffDays(startDate, endDate);\r\n\r\n        for (i = 0; i < monthDiff; i++) {\r\n            var startOfMonth = i === 0 ? startDate : new Date(startDate.getFullYear(), i, 1);\r\n            var endOfMonth = i === monthDiff - 1 ? endDate : new Date(startDate.getFullYear(), i + 1, 0);\r\n            var dayInMonth = this.calculateDiffDays(startOfMonth, endOfMonth) + (i !== monthDiff - 1 && 1);\r\n            var width = Math.floor(dayInMonth / dayDiff * 2E3) * 1.025;\r\n\r\n            result.push({ start: startOfMonth, end: endOfMonth, width: width });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private calculateDiffMonths(start, end) {\r\n        var months = end.getMonth() - start.getMonth() + (12 * (end.getFullYear() - start.getFullYear()));\r\n\r\n        if(end.getDate() < start.getDate()) {\r\n            var newFrom = new Date(end.getFullYear(), end.getMonth(),start.getDate());\r\n            if (end < newFrom  && end.getMonth() == newFrom.getMonth() && end.getYear() % 4 != 0) {\r\n                months--;\r\n            }\r\n        }\r\n\r\n        return months + 1;\r\n    }\r\n\r\n    /** Set the vertical scroll top positions for gantt */\r\n    public scrollTop(verticalScrollElem: any, ganttGridElem: any, ganttActivityAreaElem: any) {\r\n        const verticalScrollTop = verticalScrollElem.scrollTop;\r\n        const scroll = this.setScrollTop;\r\n\r\n        // debounce\r\n        if (verticalScrollTop !== null && verticalScrollTop !== undefined) {\r\n            scroll(verticalScrollTop, ganttActivityAreaElem);\r\n            scroll(ganttActivityAreaElem.scrollTop, ganttGridElem);\r\n        }\r\n    }\r\n\r\n    /** Group data by id , only supports one level*/\r\n    public groupData(tasks: any): any {\r\n        return tasks;\r\n    }\r\n\r\n    /** Checks whether any new data needs to be added to task cache  */\r\n    public doTaskCheck(tasks: any[], scale: any): boolean {\r\n        // const cachedTaskIds = this.TASK_CACHE.map((task: any) => { return task.id });\r\n        // const itemsToCache: any[] = [];\r\n\r\n        // only look at tasks that are not cached\r\n        // tasks.filter((task: any) => {\r\n        //     return cachedTaskIds.indexOf(task.id) === -1;\r\n        // }).forEach((task: any) => {\r\n        //     itemsToCache.push(task);\r\n        // });\r\n\r\n        // itemsToCache.forEach((item: any) => {\r\n        //     this.TASK_CACHE.push(item);\r\n        // });\r\n\r\n        // if (itemsToCache.length > 0) {\r\n        //     return true;\r\n        // }\r\n\r\n        this.TASK_CACHE = tasks;\r\n\r\n        this.TIME_SCALE = this.calculateScale(scale.start, scale.end);\r\n        this.MONTH_SCALE = this.calculateMonthScale(scale.start, scale.end);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** Set a id prefix so CSS3 query selector can work with ids that contain numbers */\r\n    public setIdPrefix(id: string): string {\r\n        return `_${id}`;\r\n    }\r\n\r\n    // /** Remove the id prefix to allow querying of data */\r\n    // public removeIdPrefix(id: string): string {\r\n    //     return id.substring(1, id.length - 1);\r\n    // }\r\n\r\n    /** Set the scroll top property of a native DOM element */\r\n    public setScrollTop(scrollTop: number, element: any): void {\r\n        if (element !== null && element !== undefined) {\r\n            element.scrollTop = scrollTop;\r\n        }\r\n    }\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { GanttService } from '../../shared/services/gantt.service';\r\nimport { IScale } from '../../shared/interfaces';\r\n\r\n@Component({\r\n    selector: 'time-scale',\r\n    template: `\r\n        <div class=\"time-scale\" [ngStyle]=\"setTimescaleStyle()\">\r\n            <!--<div class=\"time-scale-line\" [ngStyle]=\"setTimescaleMonthLineStyle('none')\">\r\n                <div class=\"time-scale-cell\" *ngFor=\"let scale of timeScaleMonth; let i = index\"\r\n                    [ngClass]=\"(i % 2) ? 'weekend' : ''\" [style.width.px]=\"scale.width\">{{scale.start | date: 'dd-MM'}}</div>\r\n            </div>-->\r\n            <div class=\"time-scale-line\" [ngStyle]=\"setTimescaleWeekendLineStyle('none')\">\r\n                <div class=\"time-scale-cell\" *ngFor=\"let date of timeScaleWeekend; let i = index\"\r\n                    [ngClass]=\"(i % 2) ? 'weekend' : ''\" [ngStyle]=\"setTimescaleWeekendCellStyle()\">{{date | date: 'dd-MM'}}</div>\r\n            </div>\r\n            <div class=\"time-scale-line\" [ngStyle]=\"setTimescaleWeekendLineStyle('none')\">\r\n                <div class=\"time-scale-cell\" *ngFor=\"let date of timeScaleWeekend; let i = index\"\r\n                [ngClass]=\"(i % 2) ? 'weekend' : ''\" [ngStyle]=\"setTimescaleWeekendCellStyle()\">{{i + 1}}</div>\r\n            </div>\r\n        </div>`,\r\n    styles: [`\r\n        .weekend {\r\n            background-color: whitesmoke;\r\n        }\r\n        .time-scale {\r\n            font-size: 12px;\r\n            background-color: #fff;\r\n            border-bottom: 1px solid #cecece;\r\n        }\r\n        .time-scale-line {\r\n            box-sizing: border-box;\r\n            border-bottom: 1px solid #cecece;\r\n        }\r\n        .time-scale-line:first-child {\r\n            border-top: none;\r\n        }\r\n        .time-scale-cell {\r\n            display: inline-block;\r\n            white-space: nowrap;\r\n            overflow: hidden;\r\n            border-right: 1px solid #cecece;\r\n            text-align: center;\r\n            height: 100%;\r\n        }`\r\n    ],\r\n    providers: [\r\n        GanttService\r\n    ]\r\n})\r\nexport class GanttTimeScaleComponent implements OnInit {\r\n    @Input() timeScaleMonth: any;\r\n    @Input() timeScaleWeekend: any;\r\n    @Input() dimensions: any;\r\n    @Input() scale: IScale;\r\n\r\n    constructor(public ganttService: GanttService) { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    setTimescaleStyle() {\r\n        return {\r\n            'width': (this.dimensions.width + 36) + 'px'\r\n        };\r\n    }\r\n\r\n    setTimescaleMonthLineStyle(borderTop: string) {\r\n        return {\r\n            'height': this.ganttService.rowHeight + 'px',\r\n            'line-height': this.ganttService.rowHeight + 'px',\r\n            'position': 'relative',\r\n            'border-top': borderTop\r\n        };\r\n    }\r\n\r\n    setTimescaleMonthCellStyle() {\r\n        return {\r\n            'width': this.ganttService.cellWidth + 'px'\r\n        };\r\n    }\r\n\r\n    setTimescaleWeekendLineStyle(borderTop: string) {\r\n        return {\r\n            'height': this.ganttService.rowHeight + 'px',\r\n            'line-height': this.ganttService.rowHeight + 'px',\r\n            'position': 'relative',\r\n            'border-top': borderTop\r\n        };\r\n    }\r\n\r\n    setTimescaleWeekendCellStyle() {\r\n        return {\r\n            'width': this.ganttService.cellWidth + 'px'\r\n        };\r\n    }\r\n\r\n    isDayWeekend(date: Date): boolean {\r\n        return this.ganttService.isDayWeekend(date);\r\n    }\r\n}\r\n","import { Component, OnInit, Input, ViewChild, ElementRef } from '@angular/core';\r\nimport { GanttService } from '../../shared/services/gantt.service';\r\n\r\n@Component({\r\n    selector: 'activity-background',\r\n    template: `\r\n    <div #bg class=\"gantt-activity-bg\">\r\n        <div class=\"gantt-activity-row\"\r\n            [ngStyle]=\"setRowStyle()\"\r\n            *ngFor=\"let row of tasks\">\r\n\r\n            <div class=\"gantt-activity-cell\"\r\n                [ngStyle]=\"setCellStyle()\"\r\n                *ngFor=\"let cell of cells; let i = index; let l = last\" [ngClass]=\"(i % 2) ? 'weekend' : ''\" ></div>\r\n        </div>\r\n    </div>\r\n    `,\r\n    styles: [`\r\n        .weekend {\r\n            background-color: whitesmoke;\r\n        }\r\n        .gantt-activity-bg {\r\n            overflow: hidden;\r\n        }\r\n        .gantt-activity-row {\r\n            border-bottom: 1px solid #ebebeb;\r\n            background-color: #fff;\r\n            box-sizing: border-box;\r\n        }\r\n        .gantt-activity-cell {\r\n            display: inline-block;\r\n            height: 100%;\r\n            border-right: 1px solid #ebebeb;\r\n        }\r\n    `]\r\n})\r\nexport class GanttActivityBackgroundComponent implements OnInit {\r\n    @Input() tasks: any;\r\n    @Input() timeScale: any;\r\n\r\n    @ViewChild('bg') bg: ElementRef;\r\n\r\n    rows: any[] = [];\r\n    cells: any[] = [];\r\n\r\n    constructor(public ganttService: GanttService) { }\r\n\r\n    ngOnInit() {\r\n        this.drawGrid();\r\n    }\r\n\r\n    isDayWeekend(date: Date): boolean {\r\n        return this.ganttService.isDayWeekend(date);\r\n    }\r\n\r\n    setRowStyle() {\r\n        return {\r\n            'height': this.ganttService.rowHeight + 'px'\r\n        };\r\n    }\r\n\r\n    setCellStyle() {\r\n        return {\r\n            'width': this.ganttService.cellWidth + 'px'\r\n        };\r\n    }\r\n\r\n    private drawGrid(): void {\r\n        this.cells = this.timeScale;\r\n    }\r\n}\r\n","import { Component, OnInit, Input, ElementRef, EventEmitter, Output } from '@angular/core';\r\nimport { GanttService } from '../../shared/services/gantt.service';\r\n\r\n@Component({\r\n    selector: 'activity-bars',\r\n    template: `\r\n    <div class=\"gantt-activity-bars-area\"\r\n        [ngStyle]=\"{ 'height': containerHeight + 'px', 'width': containerWidth + 'px' }\">\r\n\r\n        <div #bar class=\"gantt-activity-line\"\r\n            *ngFor=\"let task of tasks; let i = index\" (click)=\"gridRowClicked(task)\"\r\n            [ngStyle]=\"drawBar(task, i)\">\r\n\r\n            <div #popoverTrigger=\"mdePopoverTrigger\"\r\n                [mdePopoverTriggerFor]=\"taskPopover\"\r\n                [mdePopoverBackdropCloseOnClick]=\"false\"\r\n                mdePopoverOffsetX=\"-15\"\r\n                mdePopoverOffsetY=\"0\"\r\n                (opened)=\"popoverOpened(task)\">\r\n\r\n                <mde-popover #taskPopover=\"mdePopover\"\r\n                    [mdePopoverEnterDelay]=\"100\"\r\n                    [mdePopoverLeaveDelay]=\"0\"\r\n                    [mdePopoverPositionY]=\"'above'\"\r\n                    [mdePopoverOverlapTrigger]=\"false\"\r\n                    [mdePopoverDisableAnimation]=\"false\"\r\n                    [mdeFocusTrapEnabled]=\"false\"\r\n                    [mdePopoverArrowWidth]=\"12\"\r\n                    [mdePopoverArrowColor]=\"task.color?.primary\"\r\n                    mdePopoverPlacement=\"bottom\">\r\n\r\n                    <ng-container *ngTemplateOutlet=\"templatePopoverTask; context: {task: task}\"></ng-container>\r\n                </mde-popover>\r\n\r\n                <div class=\"gantt-activity-content\"></div>\r\n                <div class=\"gantt-activity-link-control gantt-activity-right\" style=\"height: 26px; line-height: 30px\">\r\n                    <div class=\"gantt-link-point\"></div>\r\n                </div>\r\n                <div class=\"gantt-activity-link-control gantt-activity-left\" style=\"height: 26px; line-height: 30px\">\r\n                    <div class=\"gantt-link-point\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <ng-template #templatePopoverTask let-data=\"task\">\r\n        <mat-card *ngIf=\"data\" class=\"mat-elevation-z6\" \r\n            [ngStyle]=\"{ \r\n                borderBottomColor: data.color?.primary,\r\n                borderBottomWidth: '.25em',\r\n                borderBottomStyle: 'solid' \r\n            }\" style=\"width: 320px; max-width: 320px;\">\r\n\r\n            <mat-card-header>\r\n                <div mat-card-avatar [ngStyle]=\"{ borderColor: data.color?.primary }\" style=\"width: 0; height: unset; margin-bottom: .7em; border-radius: 0; border-style: solid;\"></div>\r\n                <mat-card-title>\r\n                    <span style=\"font-size: 80%;\">{{data.name}}</span>\r\n                </mat-card-title>\r\n                <mat-card-subtitle>\r\n                    <span>{{data.start | date:'yyyy-MM-dd'}} - {{data.end | date:'yyyy-MM-dd'}}</span>\r\n                </mat-card-subtitle>\r\n                <mat-card-subtitle>\r\n                    <span style=\"padding-left: .75em; padding-right: 1em; font-stretch: condensed;\">&#x336;</span>\r\n                    <span>{{data.resource}}</span>\r\n                </mat-card-subtitle>\r\n            </mat-card-header>\r\n            <mat-card-content>\r\n                <footer *ngIf=\"data.description\">\r\n                    <span [innerHTML]=\"data.description\"></span>\r\n                </footer>\r\n            </mat-card-content>\r\n        </mat-card>\r\n    </ng-template>\r\n    `,\r\n    styles: [`\r\n    .gantt-activity-line {\r\n        /*border-radius: 2px;*/\r\n        position: absolute;\r\n        box-sizing: border-box;\r\n        -webkit-user-select: none;\r\n    }\r\n    .gantt-activity-line:hover {\r\n        cursor: pointer;\r\n    }\r\n    .gantt-activity-content {\r\n        font-size: 12px;\r\n        color: #fff;\r\n        width: 100%;\r\n        top: 0;\r\n        position: absolute;\r\n        white-space: nowrap;\r\n        text-align: center;\r\n        line-height: inherit;\r\n        overflow: hidden;\r\n        height: 100%;\r\n    }\r\n    .gantt-activity-link-control {\r\n        position: absolute;\r\n        width: 13px;\r\n        top: 0;\r\n    }\r\n    .gantt-activity-right {\r\n        right: 0;\r\n    }\r\n    .gantt-activity-left {\r\n        left: 0;\r\n    }\r\n    .gantt-activity-right:hover {\r\n        /*cursor:w-resize;*/\r\n    }\r\n    .gantt-activity-left:hover {\r\n        /*cursor:w-resize;*/\r\n    }\r\n    `],\r\n    providers: [\r\n        GanttService\r\n    ]\r\n})\r\nexport class GanttActivityBarsComponent implements OnInit {\r\n    @Input() timeScale: any;\r\n    @Input() dimensions: any;\r\n    @Input() tasks: any;\r\n\r\n    @Output() onGridRowClick: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() onPopoverOpen: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    containerHeight = 0;\r\n    containerWidth = 0;\r\n\r\n    constructor(public ganttService: GanttService) { }\r\n\r\n    ngOnInit() {\r\n        this.containerHeight = this.dimensions.height;\r\n        this.containerWidth = this.dimensions.width;\r\n    }\r\n\r\n    drawBar(task: any, index: number) {\r\n        let style = {};\r\n        style = this.ganttService.calculateBar(task, index, this.timeScale);\r\n\r\n        return style;\r\n    }\r\n\r\n    gridRowClicked(task: any) {\r\n        try {\r\n            this.onGridRowClick.emit(task);\r\n        } catch (err) { }\r\n    }\r\n\r\n    popoverOpened(task: any) {\r\n        try {\r\n            this.onPopoverOpen.emit(task);\r\n        } catch (err) { }\r\n    }\r\n\r\n    private addMouseEventListeners(dragFn: any) {\r\n        function stopFn() {\r\n            document.documentElement.removeEventListener('mousemove', dragFn, false);\r\n            document.documentElement.removeEventListener('mouseup', stopFn, false);\r\n            document.documentElement.removeEventListener('mouseleave', stopFn, false);\r\n        }\r\n\r\n        document.documentElement.addEventListener('mousemove', dragFn, false);\r\n        document.documentElement.addEventListener('mouseup', stopFn, false);\r\n        document.documentElement.addEventListener('mouseleave', stopFn, false);\r\n    }\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, ElementRef,  ChangeDetectionStrategy, OnChanges, DoCheck } from '@angular/core';\r\n\r\nimport { GanttService } from '../shared/services/gantt.service';\r\nimport { IGridColumn, IGanttOptions, Project, IScale } from '../shared/interfaces';\r\nimport { EventManager } from '@angular/platform-browser';\r\n\r\n@Component({\r\n    selector: 'gantt-activity',\r\n    template: `\r\n\r\n    <div class=\"grid\" #ganttGrid>\r\n        <div class=\"grid-scale\" [ngStyle]=\"setGridScaleStyle()\">\r\n            <div class=\"grid-head-cell\"\r\n                *ngFor=\"let column of gridColumns\" [style.width]=\"column.width + 'px'\"\r\n                [style.left]=\"column.left + 'px'\">\r\n\r\n                <label>\r\n                    {{column.name}}\r\n                </label>\r\n            </div>\r\n        </div>\r\n        <div class=\"grid-data\"\r\n            #ganttGridData\r\n            [ngStyle]=\"{ 'height': ganttService.calculateGanttHeight() }\">\r\n\r\n            <div #row\r\n                *ngFor=\"let data of ganttService.TASK_CACHE\" class=\"grid-row\"\r\n                [ngStyle]=\"setGridRowStyle()\">\r\n\r\n                <mde-popover #appPopover=\"mdePopover\"\r\n                    [mdePopoverEnterDelay]=\"100\"\r\n                    [mdePopoverLeaveDelay]=\"0\"\r\n                    [mdePopoverPositionY]=\"'above'\"\r\n                    [mdePopoverOverlapTrigger]=\"false\"\r\n                    [mdePopoverDisableAnimation]=\"false\"\r\n                    [mdePopoverArrowWidth]=\"8\"\r\n                    [mdePopoverArrowColor]=\"'black'\"\r\n                    mdePopoverPlacement=\"bottom\">\r\n\r\n                    <mat-card style=\"max-width: 340px; padding: 3px 8px;\r\n                        color: #ffffff;\r\n                        text-align: center;\r\n                        background-color: #000000;\r\n                        border-radius: 4px;\">\r\n                        <span style=\"z-index: 1070;\r\n                            display: block;\r\n                            font-family: 'Lato','Helvetica Neue',Helvetica,Arial,sans-serif;\r\n                            font-style: normal;\r\n                            font-weight: normal;\r\n                            letter-spacing: normal;\r\n                            line-break: auto;\r\n                            line-height: 1.42857143;\r\n                            text-align: left;\r\n                            text-align: start;\r\n                            text-decoration: none;\r\n                            text-shadow: none;\r\n                            text-transform: none;\r\n                            white-space: normal;\r\n                            word-break: normal;\r\n                            word-spacing: normal;\r\n                            word-wrap: normal;\r\n                            font-size: 13px;\">{{data.name}}</span>\r\n                    </mat-card>\r\n                </mde-popover>\r\n\r\n                <div class=\"grid-cell\"\r\n                    [mdePopoverTriggerFor]=\"appPopover\"\r\n                    [mdePopoverBackdropCloseOnClick]=\"false\"\r\n                    mdePopoverOffsetX=\"25\"\r\n                    mdePopoverOffsetY=\"0\"\r\n                    [ngStyle]=\"{ 'width': gridColumns[1].width + 'px', 'padding-left': 0 }\">\r\n\r\n                    <div class=\"gantt-tree-content\">\r\n                        <span [ngStyle]=\"{ borderLeftColor: data.color.primary, borderLeftWidth: .35 + 'em', \r\n                            borderLeftStyle: 'solid', paddingRight: .5 + 'em'}\"></span>\r\n                        <span>{{data.name}}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"gantt-activity\" #ganttActivity\r\n        (wheel)=\"doWheel($event, ganttActivity)\"\r\n        (window:resize)=\"onResize($event)\"\r\n        [ngStyle]=\"{ 'height': ganttService.calculateGanttHeight() + 60, 'width': calculateColumnsWidth() }\">\r\n\r\n        <time-scale [timeScaleMonth]=\"ganttService.MONTH_SCALE\"\r\n            [timeScaleWeekend]=\"ganttService.TIME_SCALE\"\r\n            [dimensions]=\"dimensions\"\r\n            [scale]=\"options.scale\"></time-scale>\r\n        <div class=\"gantt-activity-area\"\r\n            #ganttActivityArea\r\n            [ngStyle]=\"{ 'height': ganttService.calculateGanttHeight(), 'width': containerWidth + 36 + 'px' }\">\r\n\r\n            <activity-background [timeScale]=\"ganttService.TIME_SCALE\"\r\n                [tasks]=\"ganttService.TASK_CACHE\"></activity-background>\r\n            <activity-bars [timeScale]=\"ganttService.TIME_SCALE\"\r\n                [dimensions]=\"dimensions\"\r\n                [tasks]=\"ganttService.TASK_CACHE\"\r\n                (onGridRowClick)=\"gridRowClick($event)\"\r\n                (onPopoverOpen)=\"popoverOpen($event)\"></activity-bars>\r\n        </div>\r\n    </div>\r\n    `,\r\n    styles: [`\r\n        .gantt-activity {\r\n            overflow-y: hidden;\r\n            overflow-x: scroll;\r\n            display: inline-block;\r\n            vertical-align: top;\r\n            position: relative;\r\n        }\r\n        .gantt-activity-area {\r\n            position: relative;\r\n            overflow-x: hidden;\r\n            overflow-y: hidden;\r\n            -webkit-user-select: none;\r\n        }\r\n        .gantt-vertical-scroll {\r\n            background-color: transparent;\r\n            overflow-x: hidden;\r\n            overflow-y: scroll;\r\n            position: absolute;\r\n            right: -10px;\r\n            display: block;\r\n            top: -1px;\r\n            border: 1px solid #cecece;\r\n        }\r\n        .grid {\r\n            overflow-x: hidden;\r\n            overflow-y: hidden;\r\n            display: inline-block;\r\n            vertical-align: top;\r\n            border-right: 1px solid #cecece;\r\n        }\r\n        .grid-scale {\r\n            color: #6b6b6b;\r\n            font-size: 12px;\r\n            border-bottom: 1px solid #e0e0e0;\r\n            background-color: whitesmoke;\r\n        }\r\n        .grid-head-cell {\r\n            /*color: #a6a6a6;*/\r\n            border-top: none !important;\r\n            border-right: none !important;\r\n            line-height: inherit;\r\n            box-sizing: border-box;\r\n            display: inline-block;\r\n            vertical-align: top;\r\n            border-right: 1px solid #cecece;\r\n            /*text-align: center;*/\r\n            position: relative;\r\n            cursor: default;\r\n            height: 100%;\r\n            -moz-user-select: -moz-none;\r\n            -webkit-user-select: none;\r\n            overflow: hidden;\r\n        }\r\n        .grid-data {\r\n            overflow: hidden;\r\n        }\r\n        .grid-row {\r\n            box-sizing: border-box;\r\n            border-bottom: 1px solid #e0e0e0;\r\n            background-color: #fff;\r\n            position: relative;\r\n            -webkit-user-select: none;\r\n        }\r\n        .grid-row:hover {\r\n            background-color: #eeeeee;\r\n            cursor: pointer;\r\n        }\r\n        .grid-cell {\r\n            border-right: none;\r\n            color: #454545;\r\n            display: inline-block;\r\n            vertical-align: top;\r\n            padding-left: 6px;\r\n            padding-right: 6px;\r\n            height: 100%;\r\n            overflow: hidden;\r\n            white-space: nowrap;\r\n            font-size: 13px;\r\n            box-sizing: border-box;\r\n        }\r\n        .actions-bar {\r\n            /*border-top: 1px solid #cecece;*/\r\n            border-bottom: 1px solid #e0e0e0;\r\n            clear: both;\r\n            /*margin-top: 90px;*/\r\n            height: 28px;\r\n            background: whitesmoke;\r\n            color: #494949;\r\n            font-family: Arial, sans-serif;\r\n            font-size: 13px;\r\n            padding-left: 15px;\r\n            line-height: 25px;\r\n        }\r\n        .gantt-tree-content {\r\n            padding-left: 15px;\r\n        }\r\n    `],\r\n    changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class GanttActivityComponent implements OnInit, DoCheck {\r\n    @Input() project: Project;\r\n    @Input() options: IGanttOptions;\r\n\r\n    @Output() onGridRowClick: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() onPopoverOpen: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    private start: Date;\r\n    private end: Date;\r\n    private timeScale: any;\r\n\r\n    private scale: IScale = {\r\n        start: null,\r\n        end: null\r\n    };\r\n\r\n    private activityContainerSizes: any;\r\n\r\n    containerHeight: any;\r\n    containerWidth: any;\r\n\r\n    ganttActivityHeight: any;\r\n    ganttActivityWidth: any;\r\n\r\n    dimensions = {\r\n        height: 0,\r\n        width: 0\r\n    };\r\n\r\n    gridColumns: IGridColumn[] = [\r\n        { name: '', left: 0, width: 16 },\r\n        { name: 'Zadanie', left: 0, width: 330 }\r\n    ];\r\n\r\n    constructor(\r\n        public elem: ElementRef,\r\n        public ganttService: GanttService) {\r\n    }\r\n\r\n    doWheel(event, elem: HTMLElement) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        // chome\r\n        if (event.wheelDelta) {\r\n            if ((event.wheelDelta || event.detail) > 0) {\r\n                elem.scrollLeft -= 100;\r\n            } else {\r\n                elem.scrollLeft += 100;\r\n            }\r\n        // firefox\r\n        } else {\r\n            if (event.deltaY > 0) {\r\n                elem.scrollLeft += 100;\r\n            } else {\r\n                elem.scrollLeft -= 100;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    ngOnInit() {\r\n        // Cache the project data and only work with that. Only show parent tasks by default\r\n        this.ganttService.TASK_CACHE = this.project.tasks;\r\n        this.ganttService.TIME_SCALE = this.ganttService.calculateScale(this.options.scale.start, this.options.scale.end);\r\n\r\n        this.start = this.options.scale.start;\r\n        this.end = this.options.scale.end;\r\n        this.containerWidth = this.calculateContainerWidth();\r\n        this.containerHeight = this.calculateContainerHeight();\r\n        this.activityContainerSizes = this.ganttService.calculateActivityContainerDimensions();\r\n\r\n        this.gridColumns = this.options.gridColumns ? this.options.gridColumns : this.gridColumns;\r\n\r\n        // important that these are called last as it relies on values calculated above.\r\n        this.setScale();\r\n        this.setDimensions();\r\n        this.setSizes();\r\n    }\r\n\r\n    /** Custom model check */\r\n    ngDoCheck() {\r\n        // do a check to see whether any new tasks have been added. If the task is a child then push into array if tree expanded?\r\n        this.ganttService.doTaskCheck(this.project.tasks, this.options.scale);\r\n    }\r\n\r\n    /** On vertical scroll set the scroll top of grid and activity  */\r\n    onVerticalScroll(verticalScroll: any, ganttGrid: any, ganttActivityArea: any): void {\r\n        this.ganttService.scrollTop(verticalScroll, ganttGrid, ganttActivityArea);\r\n    }\r\n\r\n    gridRowClick(task) {\r\n        try {\r\n            this.onGridRowClick.emit(task);\r\n        } catch (err) { }\r\n    }\r\n\r\n    popoverOpen(task) {\r\n        try {\r\n            this.onPopoverOpen.emit(task);\r\n        } catch (err) { }\r\n    }\r\n\r\n    /** On resize of browser window dynamically adjust gantt activity height and width */\r\n    onResize(event: any): void {\r\n        const activityContainerSizes = this.ganttService.calculateActivityContainerDimensions();\r\n        this.ganttActivityHeight = activityContainerSizes.height + 'px';\r\n        this.ganttActivityWidth = activityContainerSizes.width;\r\n    }\r\n\r\n    setScale() {\r\n        this.scale.start = this.start;\r\n        this.scale.end = this.end;\r\n    }\r\n\r\n    setDimensions() {\r\n        this.dimensions.height = this.containerHeight;\r\n        this.dimensions.width = this.containerWidth;\r\n    }\r\n\r\n    setGridRowStyle(): any {\r\n        return {\r\n            'height': this.ganttService.rowHeight + 'px',\r\n            'line-height': this.ganttService.rowHeight + 'px'\r\n        };\r\n    }\r\n\r\n    setGridScaleStyle() {\r\n        const height = this.ganttService.rowHeight + 30;\r\n        return {\r\n            'height': height + 'px',\r\n            'line-height': height + 'px'\r\n        };\r\n    }\r\n\r\n    calculateColumnsWidth() {\r\n        const ganttActivityWidth = this.gridColumns.map(column => { return column.width }).reduce((pv, cv) => pv + cv, 0) + 1;\r\n        return `calc(100% - ${(ganttActivityWidth)}px)`;\r\n    }\r\n\r\n    private calculateContainerHeight(): number {\r\n        return this.ganttService.TASK_CACHE.length * this.ganttService.rowHeight;\r\n    }\r\n\r\n    private calculateContainerWidth(): number {\r\n        return this.ganttService.TIME_SCALE.length * this.ganttService.cellWidth + this.ganttService.cellWidth;\r\n    }\r\n\r\n    private setSizes(): void {\r\n        this.ganttActivityHeight = this.activityContainerSizes.height + 'px';\r\n        this.ganttActivityWidth = this.activityContainerSizes.width;\r\n    }\r\n}\r\n","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\r\nimport { NgStyle } from '@angular/common';\r\nimport { GanttService } from './shared/services/gantt.service';\r\nimport { IGanttOptions, Project } from './shared/interfaces';\r\n\r\n@Component({\r\n    selector: 'gantt',\r\n    template: `\r\n        <div [ngStyle]=\"{ 'width': '100%' }\">\r\n            <div class=\"gantt-container\" (window:resize)=\"onResize($event)\">\r\n                <!--<gantt-header [name]=\"_project.name\" [startDate]=\"_project.startDate\"></gantt-header>-->\r\n                <gantt-activity [project]=\"_project\" [options]=\"_options\" (onGridRowClick)=\"gridRowClicked($event)\" (onPopoverOpen)=\"popoverOpened($event)\"></gantt-activity>\r\n                <!--<gantt-footer [project]=\"_project\"></gantt-footer>-->\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .gantt-container {\r\n            font-family: Arial;\r\n            font-size: 13px;\r\n            border: 1px solid #cecece;\r\n            position: relative;\r\n            white-space: nowrap;\r\n            margin-top: 0px;\r\n        }\r\n    `],\r\n    providers: []\r\n})\r\nexport class GanttComponent implements OnInit {\r\n    _project: Project;\r\n    _options: IGanttOptions;\r\n\r\n    @Input()\r\n    set project(project: any) {\r\n        if (project) {\r\n            this._project = project;\r\n        } else {\r\n            this.setDefaultProject();\r\n        }\r\n    }\r\n    get project() { return this._project; }\r\n\r\n    @Input()\r\n    set options(options: any) {\r\n        if (options.scale) {\r\n            this._options = options;\r\n        } else {\r\n            this.setDefaultOptions();\r\n        }\r\n    }\r\n    get options() { return this._options; }\r\n\r\n    @Output() onGridRowClick: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() onPopoverOpen: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    ganttContainerWidth: number;\r\n\r\n    constructor(public ganttService: GanttService) { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    setSizes(): void {\r\n        this.ganttContainerWidth = this.ganttService.calculateContainerWidth();\r\n    }\r\n\r\n    setDefaultOptions() {\r\n        const scale = this.ganttService.calculateGridScale(this._project.tasks);\r\n        const gridColumns = [\r\n            { name: '', left: 0, width: 16 },\r\n            { name: 'Zadanie', left: 0, width: 330 }\r\n        ];\r\n\r\n        this._options = {\r\n            scale,\r\n            gridColumns\r\n        };\r\n    }\r\n\r\n    setDefaultProject() {\r\n        this._project = {\r\n            name: '',\r\n            startDate: null,\r\n            tasks: []\r\n        };\r\n    }\r\n\r\n    gridRowClicked(task: any) {\r\n        this.onGridRowClick.emit(task);\r\n    }\r\n\r\n    popoverOpened(task: any) {\r\n        this.onPopoverOpen.emit(task);\r\n    }\r\n\r\n    onResize($event: any): void {\r\n        this.setSizes();\r\n    }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'gantt-header',\r\n    template: `\r\n        <div class=\"gantt-header\">\r\n            <div class=\"gantt-header-title\">\r\n                <div style=\"flex:1\">{{ name }}</div>\r\n                <div>Started: {{ startDate | date: 'medium'}}</div>\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .gantt-header {\r\n            background-color: whitesmoke;\r\n            height: 40px;\r\n            border-bottom: 1px solid #e0e0e0;\r\n        }\r\n        .gantt-header-title {\r\n            padding: 12px;\r\n            display: flex;\r\n            flex-wrap:wrap;\r\n            font-family: Arial, Helvetica, sans-serif;\r\n            font-size: 16px;\r\n        }\r\n        .gantt-header-actions {\r\n            display: inline;\r\n            float: right;\r\n            padding: 6px;\r\n        }\r\n    `]\r\n})\r\nexport class GanttHeaderComponent {\r\n    @Input() name: any;\r\n    @Input() startDate: Date;\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'gantt-footer',\r\n    template: `<div class=\"gantt-footer\"></div>`,\r\n    styles: [`\r\n        .gantt-footer {\r\n            background-color: whitesmoke;\r\n            height: 36px;\r\n            border-top: 1px solid #e0e0e0;\r\n        }\r\n        .gantt-footer-actions {\r\n            float: right;\r\n        }\r\n    `]\r\n})\r\nexport class GanttFooterComponent {\r\n    @Input() project: any;\r\n    constructor() { }\r\n}\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\n\r\nimport { MatCardModule } from \"@angular/material/card\";\r\nimport { MdePopoverModule } from \"@material-extended/mde\";\r\n\r\nimport { GanttActivityComponent } from \"./gantt-activity.component\";\r\nimport { GanttTimeScaleComponent } from \"./time-scale/gantt-time-scale.component\";\r\nimport { GanttActivityBackgroundComponent } from \"./background/activity-background.component\";\r\nimport { GanttActivityBarsComponent } from \"./bars/activity-bars.component\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MatCardModule, MdePopoverModule],\r\n  exports: [\r\n    GanttActivityComponent,\r\n    GanttTimeScaleComponent,\r\n    GanttActivityBackgroundComponent,\r\n    GanttActivityBarsComponent,\r\n  ],\r\n  declarations: [\r\n    GanttActivityComponent,\r\n    GanttTimeScaleComponent,\r\n    GanttActivityBackgroundComponent,\r\n    GanttActivityBarsComponent,\r\n  ],\r\n  providers: [],\r\n})\r\nexport class GanttActivityModule {}\r\n","import {\r\n  NgModule,\r\n  CUSTOM_ELEMENTS_SCHEMA,\r\n  ModuleWithProviders,\r\n} from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { FormsModule } from \"@angular/forms\";\r\n\r\nimport { GanttComponent } from \"./gantt.component\";\r\nimport { GanttHeaderComponent } from \"./header/gantt-header.component\";\r\nimport { GanttFooterComponent } from \"./footer/gantt-footer.component\";\r\nimport { GanttService } from \"./shared/services/gantt.service\";\r\nimport { GanttActivityModule } from \"./activity/gantt-activity.module\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, GanttActivityModule],\r\n  exports: [GanttComponent],\r\n  declarations: [GanttComponent, GanttHeaderComponent, GanttFooterComponent],\r\n  providers: [GanttService],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n})\r\nexport class GanttModule {\r\n  static forRoot(): ModuleWithProviders<GanttModule> {\r\n    return {\r\n      ngModule: GanttModule,\r\n    };\r\n  }\r\n}\r\n"]}