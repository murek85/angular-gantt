{"version":3,"sources":["ng://angular-gantt/lib/shared/services/gantt-config.service.ts","ng://angular-gantt/lib/shared/services/gantt.service.ts","ng://angular-gantt/lib/gantt.component.ts","ng://angular-gantt/lib/header/gantt-header.component.ts","ng://angular-gantt/lib/footer/gantt-footer.component.ts","ng://angular-gantt/lib/activity/gantt-activity.component.ts","ng://angular-gantt/lib/activity/time-scale/gantt-time-scale.component.ts","ng://angular-gantt/lib/activity/background/activity-background.component.ts","ng://angular-gantt/lib/activity/bars/activity-bars.component.ts","ng://angular-gantt/lib/activity/gantt-activity.module.ts","ng://angular-gantt/lib/gantt.module.ts"],"names":["GanttConfig","Injectable","this","cellWidth","rowHeight","activityHeight","barHeight","barLineHeight","barMoveable","GanttService","prototype","calculateBarWidth","start","end","Date","days","calculateDiffDays","calculateBarLeft","scale","left","i","length","getTime","calculateBarLeftDelta","calculateGanttHeight","TASK_CACHE","startHours","getHours","getMinutes","getSeconds","calculateBar","task","index","barStyle","getBarStyle","color","top","barTop","height","line-height","width","background-color","border-left","style","secondary","primary","Math","abs","err","calculateScale","addDays","push","calculateMonthScale","calculateCellMonthWidth","isDayWeekend","date","day","getDay","result","setDate","getDate","removeDays","calculateGridScale","tasks","dates","map","min","apply","t","max","getComputedStyle","element","attribute","parseInt","document","defaultView","calculateContainerWidth","windowInnerWidth","window","innerWidth","gridWidth","calculateContainerHeight","innerHeight","calculateActivityContainerDimensions","calculateGanttActivityWidth","elem","offsetWidth","calculateGanttActivityHeight","offsetHeight","minDate","maxDate","startDate","endDate","monthDiff","calculateDiffMonths","dayDiff","startOfMonth","getFullYear","endOfMonth","dayInMonth","floor","months","getMonth","newFrom","getYear","scrollTop","verticalScrollElem","ganttGridElem","ganttActivityAreaElem","verticalScrollTop","scroll","setScrollTop","undefined","groupData","doTaskCheck","TIME_SCALE","MONTH_SCALE","setIdPrefix","id","hourCellWidth","hoursCellWidth","gridHeight","ganttConfig","GanttComponent","Object","defineProperty","_project","project","setDefaultProject","_options","options","setDefaultOptions","ngOnInit","setSizes","ganttContainerWidth","ganttService","gridColumns","name","gridRowClicked","onGridRowClick","emit","popoverOpened","onPopoverOpen","onResize","$event","Component","args","selector","template","providers","Input","Output","EventEmitter","GanttHeaderComponent","GanttFooterComponent","GanttActivityComponent","doWheel","event","preventDefault","stopPropagation","wheelDelta","detail","scrollLeft","containerWidth","containerHeight","activityContainerSizes","setScale","setDimensions","ngDoCheck","onVerticalScroll","verticalScroll","ganttGrid","ganttActivityArea","gridRowClick","popoverOpen","ganttActivityHeight","ganttActivityWidth","dimensions","setGridRowStyle","setGridScaleStyle","calculateColumnsWidth","column","reduce","pv","cv","changeDetection","ChangeDetectionStrategy","Default","ElementRef","GanttTimeScaleComponent","setTimescaleStyle","setTimescaleMonthLineStyle","borderTop","position","border-top","setTimescaleMonthCellStyle","setTimescaleWeekendLineStyle","setTimescaleWeekendCellStyle","GanttActivityBackgroundComponent","drawGrid","setRowStyle","setCellStyle","cells","timeScale","ViewChild","rows","GanttActivityBarsComponent","drawBar","addMouseEventListeners","dragFn","stopFn","documentElement","removeEventListener","addEventListener","GanttActivityModule","NgModule","imports","CommonModule","MatCardModule","MdePopoverModule","exports","declarations","GanttModule","FormsModule","schemas","CUSTOM_ELEMENTS_SCHEMA"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class GanttConfig {\r\n    public cellWidth = 38;\r\n    public rowHeight = 30;\r\n    public activityHeight = 420;\r\n    public barHeight = 25;\r\n    public barLineHeight = 35;\r\n    public barMoveable = false;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { GanttConfig } from './gantt-config.service';\r\nimport { Task, IScale } from '../interfaces';\r\n\r\n@Injectable()\r\nexport class GanttService {\r\n    public rowHeight = 0;\r\n    public hourCellWidth = 60; // change to 60 so minutes can been seen more easily\r\n    public hoursCellWidth = this.hourCellWidth * 25;\r\n    public cellWidth = 0;\r\n    public windowInnerWidth = 0;\r\n    public activityHeight = 0;\r\n    public barHeight = 0;\r\n    public barLineHeight = 0;\r\n    public barTop = 0;\r\n    public barMoveable = false;\r\n    public gridWidth = 0; //188\r\n    public gridHeight = 332;\r\n    public TASK_CACHE: any[];\r\n    public TIME_SCALE: any[];\r\n    public MONTH_SCALE: any[];\r\n\r\n    constructor() {\r\n        const ganttConfig = new GanttConfig();\r\n\r\n        this.rowHeight = ganttConfig.rowHeight;\r\n        this.cellWidth = ganttConfig.cellWidth;\r\n        this.activityHeight = ganttConfig.activityHeight;\r\n        this.barHeight = ganttConfig.barHeight;\r\n        this.barLineHeight = ganttConfig.barLineHeight;\r\n        this.barTop = ganttConfig.rowHeight;\r\n        this.barMoveable = ganttConfig.barMoveable;\r\n    }\r\n\r\n    private calculateBarWidth(start: Date, end: Date): number {\r\n        if (typeof start === 'string') {\r\n            start = new Date(start);\r\n        }\r\n\r\n        if (typeof end === 'string') {\r\n            end = new Date(end);\r\n        }\r\n\r\n        const days = this.calculateDiffDays(start, end);\r\n        const width: number = (days * this.cellWidth + days) / 7;\r\n        return width;\r\n    }\r\n\r\n    private calculateBarLeft(start: Date, scale: any[]): number {\r\n        let left = 0;\r\n\r\n        if (start != null) {\r\n            if (typeof start === 'string') {\r\n                start = new Date();\r\n            }\r\n\r\n            for (let i = 0; i < scale.length; i++) {\r\n                if (start.getTime() >= scale[i].getTime() && start.getTime() < scale[i + 1].getTime()) {\r\n                    // left = i * this.cellWidth + i + this.calculateBarLeftDelta(start) +\r\n                    //    ((7 / (scale[i + 1].getDate() - start.getDate()) / 7) * this.cellWidth) - this.cellWidth / 7;\r\n                    left = i * this.cellWidth + ((this.cellWidth) * this.calculateDiffDays(scale[i], start) / 7) +\r\n                        i + this.calculateBarLeftDelta(start);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return left;\r\n    }\r\n\r\n    /** Calculates the height of the gantt grid, activity and vertical scroll */\r\n    public calculateGanttHeight(): string {\r\n        return `${this.TASK_CACHE.length * this.rowHeight}px`;\r\n    }\r\n\r\n    private calculateBarLeftDelta(start: Date): number {\r\n        let offset = 0;\r\n        const hoursInDay = 24;\r\n        const minutesInHour = 60;\r\n        const secondsInHour = 3600;\r\n        const startHours: number =\r\n            (start.getHours() + start.getMinutes() / minutesInHour + start.getSeconds() / secondsInHour);\r\n\r\n        offset = this.cellWidth / hoursInDay * startHours;\r\n        return offset;\r\n    }\r\n\r\n    /** Calculate the bar styles */\r\n    public calculateBar(task: any, index: number, scale: any) {\r\n        const barStyle = this.getBarStyle(task.color);\r\n        return {\r\n            'top': this.barTop * index + 2 + 'px',\r\n            'left': this.calculateBarLeft(task.start, scale) + 'px',\r\n            'height': this.barHeight + 'px',\r\n            'line-height': this.barLineHeight + 'px',\r\n            'width': this.calculateBarWidth(task.start, task.end) + 'px',\r\n            'background-color': barStyle[\"background-color\"],\r\n            'border-left': barStyle[\"border-left\"]\r\n        };\r\n    }\r\n\r\n    /** Get the bar style based on task status */\r\n    private getBarStyle(color: any): any {\r\n        const style = {};\r\n        style[\"background-color\"] = color.secondary;\r\n        style[\"border-left\"] = `5px solid ${color.primary}`;\r\n\r\n        return style;\r\n    }\r\n\r\n    /** Calculates the difference in two dates and returns number of days */\r\n    public calculateDiffDays(start: Date, end: Date): number {\r\n        try {\r\n            const oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds /ms\r\n            const diffDays = Math.abs((start.getTime() - end.getTime()) / (oneDay));\r\n            const days = diffDays; // don't use Math.round as it will draw an incorrect bar\r\n            return days;\r\n        } catch (err) {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /** Calculate the gantt scale range given the start and end date of tasks*/\r\n    public calculateScale(start: Date = new Date(), end: Date = this.addDays(start, 7)) {\r\n        const scale: any[] = [];\r\n        try {\r\n            while (start.getTime() <= end.getTime()) {\r\n                scale.push(start);\r\n                start = this.addDays(start, 7);\r\n            }\r\n            return scale;\r\n\r\n        } catch (err) {\r\n            return scale;\r\n        }\r\n    }\r\n\r\n    public calculateMonthScale(start: Date = new Date(), end: Date = this.addDays(start, 7)) {\r\n        let scale: any[] = [];\r\n        try {\r\n            // while (start.getTime() <= end.getTime()) {\r\n            //     scale.push({ start: start, width: this.calculateCellMonthWidth(start, end) });\r\n            //     start = this.addDays(start, new Date(start.getFullYear(), start.getMonth() + 1, 0).getDate());\r\n            // }\r\n            scale = this.calculateCellMonthWidth(start, end);\r\n            return scale;\r\n\r\n        } catch (err) {\r\n            return scale;\r\n        }\r\n    }\r\n\r\n    /** Determines whether given date is a weekend */\r\n    public isDayWeekend(date: Date): boolean {\r\n        const day = date.getDay();\r\n        if (day === 6 || day === 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** Add x number of days to a date object */\r\n    public addDays(date: Date, days: number): Date {\r\n        const result = new Date(date);\r\n        result.setDate(result.getDate() + days);\r\n        return result;\r\n    }\r\n\r\n    //** Remove x number of days from a date object */\r\n    public removeDays(date: Date, days: number): Date {\r\n        const result = new Date(date);\r\n        result.setDate(result.getDate() - days);\r\n        return result;\r\n    }\r\n\r\n    /** Calculates the grid scale for gantt based on tasks start and end dates */\r\n    public calculateGridScale(tasks: Task[]): IScale {\r\n        let start: Date;\r\n        let end: Date;\r\n        const dates = tasks.map((task: any) => {\r\n            return {\r\n                start: new Date(task.start),\r\n                end: new Date(task.end)\r\n            };\r\n        });\r\n\r\n        start = new Date(Math.min.apply(null, dates.map((t) => {\r\n            return t.start;\r\n        })));\r\n\r\n        end = new Date(Math.max.apply(null, dates.map((t) => {\r\n            return t.end;\r\n        })));\r\n\r\n        return {\r\n            start: start,\r\n            end: end\r\n        };\r\n    }\r\n\r\n    public getComputedStyle(element: any, attribute: any) {\r\n        return parseInt(document.defaultView.getComputedStyle(element)[attribute], 10);\r\n    }\r\n\r\n    //TODO(dale): determine whether this is needed\r\n    public calculateContainerWidth(): number {\r\n        this.windowInnerWidth = window.innerWidth;\r\n        const containerWidth = this.gridWidth - 18;\r\n        return containerWidth;\r\n    }\r\n\r\n    public calculateContainerHeight(): number {\r\n        const containerHeight = (innerHeight - 18);\r\n        return containerHeight;\r\n    }\r\n\r\n    public calculateActivityContainerDimensions(): any {\r\n        const scrollWidth = 18;\r\n        this.windowInnerWidth = window.innerWidth;\r\n        const width = window.innerWidth - this.gridWidth - scrollWidth;\r\n\r\n        return { height: this.activityHeight, width: width };\r\n    }\r\n\r\n    public calculateGanttActivityWidth(elem: HTMLElement): any {\r\n        return `calc(100% - ${(elem.offsetWidth + 1)}px)`;\r\n    }\r\n\r\n    public calculateGanttActivityHeight(elem: HTMLElement): any {\r\n        return `${elem.offsetHeight}px`;\r\n    }\r\n\r\n    public calculateCellMonthWidth(minDate: Date, maxDate: Date) {\r\n        var i, result = [];\r\n        var startDate = minDate;\r\n        var endDate = maxDate;\r\n        var monthDiff = this.calculateDiffMonths(startDate, endDate);\r\n        var dayDiff = this.calculateDiffDays(startDate, endDate);\r\n\r\n        for (i = 0; i < monthDiff; i++) {\r\n            var startOfMonth = i === 0 ? startDate : new Date(startDate.getFullYear(), i, 1);\r\n            var endOfMonth = i === monthDiff - 1 ? endDate : new Date(startDate.getFullYear(), i + 1, 0);\r\n            var dayInMonth = this.calculateDiffDays(startOfMonth, endOfMonth) + (i !== monthDiff - 1 && 1);\r\n            var width = Math.floor(dayInMonth / dayDiff * 2E3) * 1.025;\r\n\r\n            result.push({ start: startOfMonth, end: endOfMonth, width: width });\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private calculateDiffMonths(start, end) {\r\n        var months = end.getMonth() - start.getMonth() + (12 * (end.getFullYear() - start.getFullYear()));\r\n\r\n        if(end.getDate() < start.getDate()) {\r\n            var newFrom = new Date(end.getFullYear(), end.getMonth(),start.getDate());\r\n            if (end < newFrom  && end.getMonth() == newFrom.getMonth() && end.getYear() % 4 != 0) {\r\n                months--;\r\n            }\r\n        }\r\n\r\n        return months + 1;\r\n    }\r\n\r\n    /** Set the vertical scroll top positions for gantt */\r\n    public scrollTop(verticalScrollElem: any, ganttGridElem: any, ganttActivityAreaElem: any) {\r\n        const verticalScrollTop = verticalScrollElem.scrollTop;\r\n        const scroll = this.setScrollTop;\r\n\r\n        // debounce\r\n        if (verticalScrollTop !== null && verticalScrollTop !== undefined) {\r\n            scroll(verticalScrollTop, ganttActivityAreaElem);\r\n            scroll(ganttActivityAreaElem.scrollTop, ganttGridElem);\r\n        }\r\n    }\r\n\r\n    /** Group data by id , only supports one level*/\r\n    public groupData(tasks: any): any {\r\n        return tasks;\r\n    }\r\n\r\n    /** Checks whether any new data needs to be added to task cache  */\r\n    public doTaskCheck(tasks: any[], scale: any): boolean {\r\n        // const cachedTaskIds = this.TASK_CACHE.map((task: any) => { return task.id });\r\n        // const itemsToCache: any[] = [];\r\n\r\n        // only look at tasks that are not cached\r\n        // tasks.filter((task: any) => {\r\n        //     return cachedTaskIds.indexOf(task.id) === -1;\r\n        // }).forEach((task: any) => {\r\n        //     itemsToCache.push(task);\r\n        // });\r\n\r\n        // itemsToCache.forEach((item: any) => {\r\n        //     this.TASK_CACHE.push(item);\r\n        // });\r\n\r\n        // if (itemsToCache.length > 0) {\r\n        //     return true;\r\n        // }\r\n\r\n        this.TASK_CACHE = tasks;\r\n\r\n        this.TIME_SCALE = this.calculateScale(scale.start, scale.end);\r\n        this.MONTH_SCALE = this.calculateMonthScale(scale.start, scale.end);\r\n\r\n        return true;\r\n    }\r\n\r\n    /** Set a id prefix so CSS3 query selector can work with ids that contain numbers */\r\n    public setIdPrefix(id: string): string {\r\n        return `_${id}`;\r\n    }\r\n\r\n    // /** Remove the id prefix to allow querying of data */\r\n    // public removeIdPrefix(id: string): string {\r\n    //     return id.substring(1, id.length - 1);\r\n    // }\r\n\r\n    /** Set the scroll top property of a native DOM element */\r\n    public setScrollTop(scrollTop: number, element: any): void {\r\n        if (element !== null && element !== undefined) {\r\n            element.scrollTop = scrollTop;\r\n        }\r\n    }\r\n}\r\n","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\r\nimport { NgStyle } from '@angular/common';\r\nimport { GanttService } from './shared/services/gantt.service';\r\nimport { IGanttOptions, Project } from './shared/interfaces';\r\n\r\n@Component({\r\n    selector: 'gantt',\r\n    template: `\r\n        <div [ngStyle]=\"{ 'width': '100%' }\">\r\n            <div class=\"gantt-container\" (window:resize)=\"onResize($event)\">\r\n                <!--<gantt-header [name]=\"_project.name\" [startDate]=\"_project.startDate\"></gantt-header>-->\r\n                <gantt-activity [project]=\"_project\" [options]=\"_options\" (onGridRowClick)=\"gridRowClicked($event)\" (onPopoverOpen)=\"popoverOpened($event)\"></gantt-activity>\r\n                <!--<gantt-footer [project]=\"_project\"></gantt-footer>-->\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .gantt-container {\r\n            font-family: Arial;\r\n            font-size: 13px;\r\n            border: 1px solid #cecece;\r\n            position: relative;\r\n            white-space: nowrap;\r\n            margin-top: 0px;\r\n        }\r\n    `],\r\n    providers: []\r\n})\r\nexport class GanttComponent implements OnInit {\r\n    _project: Project;\r\n    _options: IGanttOptions;\r\n\r\n    @Input()\r\n    set project(project: any) {\r\n        if (project) {\r\n            this._project = project;\r\n        } else {\r\n            this.setDefaultProject();\r\n        }\r\n    }\r\n    get project() { return this._project; }\r\n\r\n    @Input()\r\n    set options(options: any) {\r\n        if (options.scale) {\r\n            this._options = options;\r\n        } else {\r\n            this.setDefaultOptions();\r\n        }\r\n    }\r\n    get options() { return this._options; }\r\n\r\n    @Output() onGridRowClick: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() onPopoverOpen: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    ganttContainerWidth: number;\r\n\r\n    constructor(public ganttService: GanttService) { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    setSizes(): void {\r\n        this.ganttContainerWidth = this.ganttService.calculateContainerWidth();\r\n    }\r\n\r\n    setDefaultOptions() {\r\n        const scale = this.ganttService.calculateGridScale(this._project.tasks);\r\n        const gridColumns = [\r\n            { name: '', left: 0, width: 16 },\r\n            { name: 'Zadanie', left: 0, width: 330 }\r\n        ];\r\n\r\n        this._options = {\r\n            scale,\r\n            gridColumns\r\n        };\r\n    }\r\n\r\n    setDefaultProject() {\r\n        this._project = {\r\n            name: '',\r\n            startDate: null,\r\n            tasks: []\r\n        };\r\n    }\r\n\r\n    gridRowClicked(task: any) {\r\n        this.onGridRowClick.emit(task);\r\n    }\r\n\r\n    popoverOpened(task: any) {\r\n        this.onPopoverOpen.emit(task);\r\n    }\r\n\r\n    onResize($event: any): void {\r\n        this.setSizes();\r\n    }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'gantt-header',\r\n    template: `\r\n        <div class=\"gantt-header\">\r\n            <div class=\"gantt-header-title\">\r\n                <div style=\"flex:1\">{{ name }}</div>\r\n                <div>Started: {{ startDate | date: 'medium'}}</div>\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .gantt-header {\r\n            background-color: whitesmoke;\r\n            height: 40px;\r\n            border-bottom: 1px solid #e0e0e0;\r\n        }\r\n        .gantt-header-title {\r\n            padding: 12px;\r\n            display: flex;\r\n            flex-wrap:wrap;\r\n            font-family: Arial, Helvetica, sans-serif;\r\n            font-size: 16px;\r\n        }\r\n        .gantt-header-actions {\r\n            display: inline;\r\n            float: right;\r\n            padding: 6px;\r\n        }\r\n    `]\r\n})\r\nexport class GanttHeaderComponent {\r\n    @Input() name: any;\r\n    @Input() startDate: Date;\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'gantt-footer',\r\n    template: `<div class=\"gantt-footer\"></div>`,\r\n    styles: [`\r\n        .gantt-footer {\r\n            background-color: whitesmoke;\r\n            height: 36px;\r\n            border-top: 1px solid #e0e0e0;\r\n        }\r\n        .gantt-footer-actions {\r\n            float: right;\r\n        }\r\n    `]\r\n})\r\nexport class GanttFooterComponent {\r\n    @Input() project: any;\r\n    constructor() { }\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, ElementRef,  ChangeDetectionStrategy, OnChanges, DoCheck } from '@angular/core';\r\n\r\nimport { GanttService } from '../shared/services/gantt.service';\r\nimport { IGridColumn, IGanttOptions, Project, IScale } from '../shared/interfaces';\r\n\r\n@Component({\r\n    selector: 'gantt-activity',\r\n    template: `\r\n    <div class=\"grid\" #ganttGrid>\r\n        <div class=\"grid-scale\" [ngStyle]=\"setGridScaleStyle()\">\r\n            <div class=\"grid-head-cell\"\r\n                *ngFor=\"let column of gridColumns\" [style.width]=\"column.width + 'px'\"\r\n                [style.left]=\"column.left + 'px'\">\r\n\r\n                <label>\r\n                    {{column.name}}\r\n                </label>\r\n            </div>\r\n        </div>\r\n        <div class=\"grid-data\"\r\n            #ganttGridData\r\n            [ngStyle]=\"{ 'height': ganttService.calculateGanttHeight() }\">\r\n\r\n            <div #row\r\n                *ngFor=\"let data of ganttService.TASK_CACHE\" class=\"grid-row\"\r\n                [ngStyle]=\"setGridRowStyle()\">\r\n\r\n                <div class=\"grid-cell\"\r\n                    [ngStyle]=\"{ 'width': gridColumns[1].width + 'px', 'padding-left': 0 }\">\r\n\r\n                    <div class=\"gantt-tree-content\">\r\n                        <span [ngStyle]=\"{ borderLeftColor: data.color.primary, borderLeftWidth: .35 + 'em', \r\n                            borderLeftStyle: 'solid', paddingRight: .5 + 'em'}\"></span>\r\n                        <span>{{data.name}}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"gantt-activity\" #ganttActivity\r\n        (wheel)=\"doWheel($event, ganttActivity)\"\r\n        (window:resize)=\"onResize($event)\"\r\n        [ngStyle]=\"{ 'height': ganttService.calculateGanttHeight() + 60, 'width': calculateColumnsWidth() }\">\r\n\r\n        <time-scale [timeScaleMonth]=\"ganttService.MONTH_SCALE\"\r\n            [timeScaleWeekend]=\"ganttService.TIME_SCALE\"\r\n            [dimensions]=\"dimensions\"\r\n            [scale]=\"options.scale\"></time-scale>\r\n        <div class=\"gantt-activity-area\"\r\n            #ganttActivityArea\r\n            [ngStyle]=\"{ 'height': ganttService.calculateGanttHeight(), 'width': containerWidth + 36 + 'px' }\">\r\n\r\n            <activity-background [timeScale]=\"ganttService.TIME_SCALE\"\r\n                [tasks]=\"ganttService.TASK_CACHE\"></activity-background>\r\n            <activity-bars [timeScale]=\"ganttService.TIME_SCALE\"\r\n                [dimensions]=\"dimensions\"\r\n                [tasks]=\"ganttService.TASK_CACHE\"\r\n                (onGridRowClick)=\"gridRowClick($event)\"\r\n                (onPopoverOpen)=\"popoverOpen($event)\"></activity-bars>\r\n        </div>\r\n    </div>\r\n    `,\r\n    styles: [`\r\n        .gantt-activity {\r\n            overflow-y: hidden;\r\n            overflow-x: scroll;\r\n            display: inline-block;\r\n            vertical-align: top;\r\n            position: relative;\r\n        }\r\n        .gantt-activity-area {\r\n            position: relative;\r\n            overflow-x: hidden;\r\n            overflow-y: hidden;\r\n            -webkit-user-select: none;\r\n        }\r\n        .gantt-vertical-scroll {\r\n            background-color: transparent;\r\n            overflow-x: hidden;\r\n            overflow-y: scroll;\r\n            position: absolute;\r\n            right: -10px;\r\n            display: block;\r\n            top: -1px;\r\n            border: 1px solid #cecece;\r\n        }\r\n        .grid {\r\n            overflow-x: hidden;\r\n            overflow-y: hidden;\r\n            display: inline-block;\r\n            vertical-align: top;\r\n            border-right: 1px solid #cecece;\r\n        }\r\n        .grid-scale {\r\n            color: #6b6b6b;\r\n            font-size: 12px;\r\n            border-bottom: 1px solid #e0e0e0;\r\n            background-color: whitesmoke;\r\n        }\r\n        .grid-head-cell {\r\n            /*color: #a6a6a6;*/\r\n            border-top: none !important;\r\n            border-right: none !important;\r\n            line-height: inherit;\r\n            box-sizing: border-box;\r\n            display: inline-block;\r\n            vertical-align: top;\r\n            border-right: 1px solid #cecece;\r\n            /*text-align: center;*/\r\n            position: relative;\r\n            cursor: default;\r\n            height: 100%;\r\n            -moz-user-select: -moz-none;\r\n            -webkit-user-select: none;\r\n            overflow: hidden;\r\n        }\r\n        .grid-data {\r\n            overflow: hidden;\r\n        }\r\n        .grid-row {\r\n            box-sizing: border-box;\r\n            border-bottom: 1px solid #e0e0e0;\r\n            background-color: #fff;\r\n            position: relative;\r\n            -webkit-user-select: none;\r\n        }\r\n        .grid-row:hover {\r\n            background-color: #eeeeee;\r\n            cursor: pointer;\r\n        }\r\n        .grid-cell {\r\n            border-right: none;\r\n            color: #454545;\r\n            display: inline-block;\r\n            vertical-align: top;\r\n            padding-left: 6px;\r\n            padding-right: 6px;\r\n            height: 100%;\r\n            overflow: hidden;\r\n            white-space: nowrap;\r\n            font-size: 13px;\r\n            box-sizing: border-box;\r\n        }\r\n        .actions-bar {\r\n            /*border-top: 1px solid #cecece;*/\r\n            border-bottom: 1px solid #e0e0e0;\r\n            clear: both;\r\n            /*margin-top: 90px;*/\r\n            height: 28px;\r\n            background: whitesmoke;\r\n            color: #494949;\r\n            font-family: Arial, sans-serif;\r\n            font-size: 13px;\r\n            padding-left: 15px;\r\n            line-height: 25px;\r\n        }\r\n        .gantt-tree-content {\r\n            padding-left: 15px;\r\n        }\r\n    `],\r\n    changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class GanttActivityComponent implements OnInit, DoCheck {\r\n    @Input() project: Project;\r\n    @Input() options: IGanttOptions;\r\n\r\n    @Output() onGridRowClick: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() onPopoverOpen: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    private start: Date;\r\n    private end: Date;\r\n    private timeScale: any;\r\n\r\n    private scale: IScale = {\r\n        start: null,\r\n        end: null\r\n    };\r\n\r\n    private activityContainerSizes: any;\r\n\r\n    containerHeight: any;\r\n    containerWidth: any;\r\n\r\n    ganttActivityHeight: any;\r\n    ganttActivityWidth: any;\r\n\r\n    dimensions = {\r\n        height: 0,\r\n        width: 0\r\n    };\r\n\r\n    gridColumns: IGridColumn[] = [\r\n        { name: '', left: 0, width: 16 },\r\n        { name: 'Zadanie', left: 0, width: 330 }\r\n    ];\r\n\r\n    constructor(\r\n        public elem: ElementRef,\r\n        public ganttService: GanttService) {\r\n    }\r\n\r\n    doWheel(event, elem: HTMLElement) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        if ((event.wheelDelta || event.detail) > 0) {\r\n            elem.scrollLeft -= 100;\r\n        } else {\r\n            elem.scrollLeft += 100;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    ngOnInit() {\r\n        // Cache the project data and only work with that. Only show parent tasks by default\r\n        this.ganttService.TASK_CACHE = this.project.tasks;\r\n        this.ganttService.TIME_SCALE = this.ganttService.calculateScale(this.options.scale.start, this.options.scale.end);\r\n\r\n        this.start = this.options.scale.start;\r\n        this.end = this.options.scale.end;\r\n        this.containerWidth = this.calculateContainerWidth();\r\n        this.containerHeight = this.calculateContainerHeight();\r\n        this.activityContainerSizes = this.ganttService.calculateActivityContainerDimensions();\r\n\r\n        this.gridColumns = this.options.gridColumns ? this.options.gridColumns : this.gridColumns;\r\n\r\n        // important that these are called last as it relies on values calculated above.\r\n        this.setScale();\r\n        this.setDimensions();\r\n        this.setSizes();\r\n    }\r\n\r\n    /** Custom model check */\r\n    ngDoCheck() {\r\n        // do a check to see whether any new tasks have been added. If the task is a child then push into array if tree expanded?\r\n        this.ganttService.doTaskCheck(this.project.tasks, this.options.scale);\r\n    }\r\n\r\n    /** On vertical scroll set the scroll top of grid and activity  */\r\n    onVerticalScroll(verticalScroll: any, ganttGrid: any, ganttActivityArea: any): void {\r\n        this.ganttService.scrollTop(verticalScroll, ganttGrid, ganttActivityArea);\r\n    }\r\n\r\n    gridRowClick(task) {\r\n        try {\r\n            this.onGridRowClick.emit(task);\r\n        } catch (err) { }\r\n    }\r\n\r\n    popoverOpen(task) {\r\n        try {\r\n            this.onPopoverOpen.emit(task);\r\n        } catch (err) { }\r\n    }\r\n\r\n    /** On resize of browser window dynamically adjust gantt activity height and width */\r\n    onResize(event: any): void {\r\n        const activityContainerSizes = this.ganttService.calculateActivityContainerDimensions();\r\n        this.ganttActivityHeight = activityContainerSizes.height + 'px';\r\n        this.ganttActivityWidth = activityContainerSizes.width;\r\n    }\r\n\r\n    setScale() {\r\n        this.scale.start = this.start;\r\n        this.scale.end = this.end;\r\n    }\r\n\r\n    setDimensions() {\r\n        this.dimensions.height = this.containerHeight;\r\n        this.dimensions.width = this.containerWidth;\r\n    }\r\n\r\n    setGridRowStyle(): any {\r\n        return {\r\n            'height': this.ganttService.rowHeight + 'px',\r\n            'line-height': this.ganttService.rowHeight + 'px'\r\n        };\r\n    }\r\n\r\n    setGridScaleStyle() {\r\n        const height = this.ganttService.rowHeight + 30;\r\n        return {\r\n            'height': height + 'px',\r\n            'line-height': height + 'px'\r\n        };\r\n    }\r\n\r\n    calculateColumnsWidth() {\r\n        const ganttActivityWidth = this.gridColumns.map(column => { return column.width }).reduce((pv, cv) => pv + cv, 0) + 1;\r\n        return `calc(100% - ${(ganttActivityWidth)}px)`;\r\n    }\r\n\r\n    private calculateContainerHeight(): number {\r\n        return this.ganttService.TASK_CACHE.length * this.ganttService.rowHeight;\r\n    }\r\n\r\n    private calculateContainerWidth(): number {\r\n        return this.ganttService.TIME_SCALE.length * this.ganttService.cellWidth + this.ganttService.cellWidth;\r\n    }\r\n\r\n    private setSizes(): void {\r\n        this.ganttActivityHeight = this.activityContainerSizes.height + 'px';\r\n        this.ganttActivityWidth = this.activityContainerSizes.width;\r\n    }\r\n}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { GanttService } from '../../shared/services/gantt.service';\r\nimport { IScale } from '../../shared/interfaces';\r\n\r\n@Component({\r\n    selector: 'time-scale',\r\n    template: `\r\n        <div class=\"time-scale\" [ngStyle]=\"setTimescaleStyle()\">\r\n            <!--<div class=\"time-scale-line\" [ngStyle]=\"setTimescaleMonthLineStyle('none')\">\r\n                <div class=\"time-scale-cell\" *ngFor=\"let scale of timeScaleMonth; let i = index\"\r\n                    [ngClass]=\"(i % 2) ? 'weekend' : ''\" [style.width.px]=\"scale.width\">{{scale.start | date: 'dd-MM'}}</div>\r\n            </div>-->\r\n            <div class=\"time-scale-line\" [ngStyle]=\"setTimescaleWeekendLineStyle('none')\">\r\n                <div class=\"time-scale-cell\" *ngFor=\"let date of timeScaleWeekend; let i = index\"\r\n                    [ngClass]=\"(i % 2) ? 'weekend' : ''\" [ngStyle]=\"setTimescaleWeekendCellStyle()\">{{date | date: 'dd-MM'}}</div>\r\n            </div>\r\n            <div class=\"time-scale-line\" [ngStyle]=\"setTimescaleWeekendLineStyle('none')\">\r\n                <div class=\"time-scale-cell\" *ngFor=\"let date of timeScaleWeekend; let i = index\"\r\n                [ngClass]=\"(i % 2) ? 'weekend' : ''\" [ngStyle]=\"setTimescaleWeekendCellStyle()\">{{i + 1}}</div>\r\n            </div>\r\n        </div>`,\r\n    styles: [`\r\n        .weekend {\r\n            background-color: whitesmoke;\r\n        }\r\n        .time-scale {\r\n            font-size: 12px;\r\n            background-color: #fff;\r\n            border-bottom: 1px solid #cecece;\r\n        }\r\n        .time-scale-line {\r\n            box-sizing: border-box;\r\n            border-bottom: 1px solid #cecece;\r\n        }\r\n        .time-scale-line:first-child {\r\n            border-top: none;\r\n        }\r\n        .time-scale-cell {\r\n            display: inline-block;\r\n            white-space: nowrap;\r\n            overflow: hidden;\r\n            border-right: 1px solid #cecece;\r\n            text-align: center;\r\n            height: 100%;\r\n        }`\r\n    ],\r\n    providers: [\r\n        GanttService\r\n    ]\r\n})\r\nexport class GanttTimeScaleComponent implements OnInit {\r\n    @Input() timeScaleMonth: any;\r\n    @Input() timeScaleWeekend: any;\r\n    @Input() dimensions: any;\r\n    @Input() scale: IScale;\r\n\r\n    constructor(public ganttService: GanttService) { }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    setTimescaleStyle() {\r\n        return {\r\n            'width': (this.dimensions.width + 36) + 'px'\r\n        };\r\n    }\r\n\r\n    setTimescaleMonthLineStyle(borderTop: string) {\r\n        return {\r\n            'height': this.ganttService.rowHeight + 'px',\r\n            'line-height': this.ganttService.rowHeight + 'px',\r\n            'position': 'relative',\r\n            'border-top': borderTop\r\n        };\r\n    }\r\n\r\n    setTimescaleMonthCellStyle() {\r\n        return {\r\n            'width': this.ganttService.cellWidth + 'px'\r\n        };\r\n    }\r\n\r\n    setTimescaleWeekendLineStyle(borderTop: string) {\r\n        return {\r\n            'height': this.ganttService.rowHeight + 'px',\r\n            'line-height': this.ganttService.rowHeight + 'px',\r\n            'position': 'relative',\r\n            'border-top': borderTop\r\n        };\r\n    }\r\n\r\n    setTimescaleWeekendCellStyle() {\r\n        return {\r\n            'width': this.ganttService.cellWidth + 'px'\r\n        };\r\n    }\r\n\r\n    isDayWeekend(date: Date): boolean {\r\n        return this.ganttService.isDayWeekend(date);\r\n    }\r\n}\r\n","import { Component, OnInit, Input, ViewChild, ElementRef } from '@angular/core';\r\nimport { GanttService } from '../../shared/services/gantt.service';\r\n\r\n@Component({\r\n    selector: 'activity-background',\r\n    template: `\r\n    <div #bg class=\"gantt-activity-bg\">\r\n        <div class=\"gantt-activity-row\"\r\n            [ngStyle]=\"setRowStyle()\"\r\n            *ngFor=\"let row of tasks\">\r\n\r\n            <div class=\"gantt-activity-cell\"\r\n                [ngStyle]=\"setCellStyle()\"\r\n                *ngFor=\"let cell of cells; let i = index; let l = last\" [ngClass]=\"(i % 2) ? 'weekend' : ''\" ></div>\r\n        </div>\r\n    </div>\r\n    `,\r\n    styles: [`\r\n        .weekend {\r\n            background-color: whitesmoke;\r\n        }\r\n        .gantt-activity-bg {\r\n            overflow: hidden;\r\n        }\r\n        .gantt-activity-row {\r\n            border-bottom: 1px solid #ebebeb;\r\n            background-color: #fff;\r\n            box-sizing: border-box;\r\n        }\r\n        .gantt-activity-cell {\r\n            display: inline-block;\r\n            height: 100%;\r\n            border-right: 1px solid #ebebeb;\r\n        }\r\n    `]\r\n})\r\nexport class GanttActivityBackgroundComponent implements OnInit {\r\n    @Input() tasks: any;\r\n    @Input() timeScale: any;\r\n\r\n    @ViewChild('bg') bg: ElementRef;\r\n\r\n    rows: any[] = [];\r\n    cells: any[] = [];\r\n\r\n    constructor(public ganttService: GanttService) { }\r\n\r\n    ngOnInit() {\r\n        this.drawGrid();\r\n    }\r\n\r\n    isDayWeekend(date: Date): boolean {\r\n        return this.ganttService.isDayWeekend(date);\r\n    }\r\n\r\n    setRowStyle() {\r\n        return {\r\n            'height': this.ganttService.rowHeight + 'px'\r\n        };\r\n    }\r\n\r\n    setCellStyle() {\r\n        return {\r\n            'width': this.ganttService.cellWidth + 'px'\r\n        };\r\n    }\r\n\r\n    private drawGrid(): void {\r\n        this.cells = this.timeScale;\r\n    }\r\n}\r\n","import { Component, OnInit, Input, ElementRef, EventEmitter, Output } from '@angular/core';\r\nimport { GanttService } from '../../shared/services/gantt.service';\r\n\r\n@Component({\r\n    selector: 'activity-bars',\r\n    template: `\r\n    <div class=\"gantt-activity-bars-area\"\r\n        [ngStyle]=\"{ 'height': containerHeight + 'px', 'width': containerWidth + 'px' }\">\r\n\r\n        <div #bar class=\"gantt-activity-line\"\r\n            *ngFor=\"let task of tasks; let i = index\" (click)=\"gridRowClicked(task)\"\r\n            [ngStyle]=\"drawBar(task, i)\">\r\n\r\n            <div #popoverTrigger=\"mdePopoverTrigger\"\r\n                [mdePopoverTriggerFor]=\"taskPopover\"\r\n                [mdePopoverBackdropCloseOnClick]=\"false\"\r\n                mdePopoverOffsetX=\"-15\"\r\n                mdePopoverOffsetY=\"0\"\r\n                (opened)=\"popoverOpened(task)\">\r\n\r\n                <mde-popover #taskPopover=\"mdePopover\" \r\n                    [mdePopoverEnterDelay]=\"100\"\r\n                    [mdePopoverLeaveDelay]=\"0\"\r\n                    [mdePopoverPositionY]=\"'above'\"\r\n                    [mdePopoverOverlapTrigger]=\"false\"\r\n                    [mdePopoverDisableAnimation]=\"false\"\r\n                    [mdeFocusTrapEnabled]=\"false\"\r\n                    [mdePopoverArrowWidth]=\"12\"\r\n                    [mdePopoverArrowColor]=\"task.color?.primary\"\r\n                    mdePopoverPlacement=\"bottom\">\r\n\r\n                    <ng-container *ngTemplateOutlet=\"templatePopoverTask; context: {task: task}\"></ng-container>\r\n                </mde-popover>\r\n\r\n                <div class=\"gantt-activity-content\"></div>\r\n                <div class=\"gantt-activity-link-control gantt-activity-right\" style=\"height: 26px; line-height: 30px\">\r\n                    <div class=\"gantt-link-point\"></div>\r\n                </div>\r\n                <div class=\"gantt-activity-link-control gantt-activity-left\" style=\"height: 26px; line-height: 30px\">\r\n                    <div class=\"gantt-link-point\"></div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <ng-template #templatePopoverTask let-data=\"task\">\r\n        <mat-card *ngIf=\"data\" class=\"mat-elevation-z6\" \r\n            [ngStyle]=\"{ \r\n                borderBottomColor: data.color?.primary,\r\n                borderBottomWidth: '.25em',\r\n                borderBottomStyle: 'solid' \r\n            }\" style=\"width: 320px; max-width: 320px;\">\r\n\r\n            <mat-card-header>\r\n                <div mat-card-avatar [ngStyle]=\"{ borderColor: data.color?.primary }\" style=\"width: 0; height: calc(10vh - 30px); border-radius: 0; border-style: solid;\"></div>\r\n                <mat-card-title>\r\n                    <span style=\"font-size: 80%;\">{{data.name}}</span>\r\n                </mat-card-title>\r\n                <mat-card-subtitle>\r\n                    <span>{{data.start | date:'yyyy-MM-dd'}} - {{data.end | date:'yyyy-MM-dd'}}</span>\r\n                </mat-card-subtitle>\r\n                <mat-card-subtitle>\r\n                    <span style=\"padding-left: .75em; padding-right: 1em; font-stretch: condensed;\">&#x336;</span>\r\n                    <span>{{data.resource}}</span>\r\n                </mat-card-subtitle>\r\n            </mat-card-header>\r\n            <mat-card-content>\r\n                <footer *ngIf=\"data.description\">\r\n                    <span [innerHTML]=\"data.description\"></span>\r\n                </footer>\r\n            </mat-card-content>\r\n        </mat-card>\r\n    </ng-template>\r\n    `,\r\n    styles: [`\r\n    .gantt-activity-line {\r\n        /*border-radius: 2px;*/\r\n        position: absolute;\r\n        box-sizing: border-box;\r\n        -webkit-user-select: none;\r\n    }\r\n    .gantt-activity-line:hover {\r\n        cursor: pointer;\r\n    }\r\n    .gantt-activity-content {\r\n        font-size: 12px;\r\n        color: #fff;\r\n        width: 100%;\r\n        top: 0;\r\n        position: absolute;\r\n        white-space: nowrap;\r\n        text-align: center;\r\n        line-height: inherit;\r\n        overflow: hidden;\r\n        height: 100%;\r\n    }\r\n    .gantt-activity-link-control {\r\n        position: absolute;\r\n        width: 13px;\r\n        top: 0;\r\n    }\r\n    .gantt-activity-right {\r\n        right: 0;\r\n    }\r\n    .gantt-activity-left {\r\n        left: 0;\r\n    }\r\n    .gantt-activity-right:hover {\r\n        /*cursor:w-resize;*/\r\n    }\r\n    .gantt-activity-left:hover {\r\n        /*cursor:w-resize;*/\r\n    }\r\n    `],\r\n    providers: [\r\n        GanttService\r\n    ]\r\n})\r\nexport class GanttActivityBarsComponent implements OnInit {\r\n    @Input() timeScale: any;\r\n    @Input() dimensions: any;\r\n    @Input() tasks: any;\r\n\r\n    @Output() onGridRowClick: EventEmitter<any> = new EventEmitter<any>();\r\n    @Output() onPopoverOpen: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    containerHeight = 0;\r\n    containerWidth = 0;\r\n\r\n    constructor(public ganttService: GanttService) { }\r\n\r\n    ngOnInit() {\r\n        this.containerHeight = this.dimensions.height;\r\n        this.containerWidth = this.dimensions.width;\r\n    }\r\n\r\n    drawBar(task: any, index: number) {\r\n        let style = {};\r\n        style = this.ganttService.calculateBar(task, index, this.timeScale);\r\n\r\n        return style;\r\n    }\r\n\r\n    gridRowClicked(task: any) {\r\n        try {\r\n            this.onGridRowClick.emit(task);\r\n        } catch (err) { }\r\n    }\r\n\r\n    popoverOpened(task: any) {\r\n        try {\r\n            this.onPopoverOpen.emit(task);\r\n        } catch (err) { }\r\n    }\r\n\r\n    private addMouseEventListeners(dragFn: any) {\r\n        function stopFn() {\r\n            document.documentElement.removeEventListener('mousemove', dragFn, false);\r\n            document.documentElement.removeEventListener('mouseup', stopFn, false);\r\n            document.documentElement.removeEventListener('mouseleave', stopFn, false);\r\n        }\r\n\r\n        document.documentElement.addEventListener('mousemove', dragFn, false);\r\n        document.documentElement.addEventListener('mouseup', stopFn, false);\r\n        document.documentElement.addEventListener('mouseleave', stopFn, false);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { MatCardModule } from '@angular/material';\r\nimport { MdePopoverModule } from '@material-extended/mde';\r\n\r\nimport { GanttActivityComponent } from './gantt-activity.component';\r\nimport { GanttTimeScaleComponent } from './time-scale/gantt-time-scale.component';\r\nimport { GanttActivityBackgroundComponent } from './background/activity-background.component';\r\nimport { GanttActivityBarsComponent } from './bars/activity-bars.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        MatCardModule,\r\n        MdePopoverModule\r\n    ],\r\n    exports: [\r\n        GanttActivityComponent,\r\n        GanttTimeScaleComponent,\r\n        GanttActivityBackgroundComponent,\r\n        GanttActivityBarsComponent\r\n    ],\r\n    declarations: [\r\n        GanttActivityComponent,\r\n        GanttTimeScaleComponent,\r\n        GanttActivityBackgroundComponent,\r\n        GanttActivityBarsComponent\r\n    ],\r\n    providers: [],\r\n})\r\nexport class GanttActivityModule { }\r\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { GanttComponent } from './gantt.component';\r\nimport { GanttHeaderComponent } from './header/gantt-header.component';\r\nimport { GanttFooterComponent } from './footer/gantt-footer.component';\r\nimport { GanttService } from './shared/services/gantt.service';\r\nimport { GanttActivityModule } from './activity/gantt-activity.module';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        GanttActivityModule,\r\n    ],\r\n    exports: [\r\n        GanttComponent\r\n    ],\r\n    declarations: [\r\n        GanttComponent,\r\n        GanttHeaderComponent,\r\n        GanttFooterComponent\r\n    ],\r\n    providers: [GanttService],\r\n    schemas: [\r\n        CUSTOM_ELEMENTS_SCHEMA\r\n    ]\r\n})\r\nexport class GanttModule { }\r\n"]}