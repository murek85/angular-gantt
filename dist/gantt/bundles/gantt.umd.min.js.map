{"version":3,"sources":["ng://gantt/lib/shared/services/gantt-config.service.ts","ng://gantt/lib/shared/pipes/groupBy.pipe.ts","ng://gantt/lib/shared/services/gantt.service.ts","ng://gantt/lib/gantt.component.ts","ng://gantt/lib/header/gantt-header.component.ts","ng://gantt/lib/footer/gantt-footer.component.ts","ng://gantt/lib/shared/interfaces.ts","ng://gantt/lib/activity/gantt-activity.component.ts","ng://gantt/lib/activity/time-scale/gantt-time-scale.component.ts","ng://gantt/lib/activity/background/activity-background.component.ts","ng://gantt/lib/activity/bars/activity-bars.component.ts","ng://gantt/lib/activity/gantt-activity.module.ts","ng://gantt/lib/gantt.module.ts"],"names":["GanttConfig","Injectable","this","cellWidth","rowHeight","activityHeight","barHeight","barLineHeight","barMoveable","GroupByPipe","prototype","transform","array","f","groups","forEach","o","group","JSON","stringify","push","Object","keys","map","Pipe","args","name","GanttService","calculateBarWidth","start","end","hours","Date","days","calculateDiffDays","width","hourCellWidth","calculateBarLeft","scale","left","i","length","getDate","calculateBarLeftDelta","calculateGanttHeight","TASK_CACHE","startHours","getHours","getMinutes","getSeconds","hoursCellWidth","isParent","treePath","split","err","isChild","calculateBar","task","index","barStyle","getBarStyle","status","top","barTop","height","line-height","background-color","border","taskStatus","style","toLowerCase","barStyles","backgroundColor","getBarProgressStyle","progressBackgroundColor","calculateBarProgress","percent","Math","abs","getTime","calculateDuration","duration","round","minutes","calculateTotalDuration","tasks","filter","t","parentId","id","totalHours","calculateTotalPercentage","node","totalPercent","children","child","isNaN","percentComplete","ceil","calculateParentTotalPercentage","parent","calculateScale","addDays","isDayWeekend","date","day","getDay","result","setDate","removeDays","calculateGridScale","dates","min","apply","max","cols","toString","getComputedStyle","element","attribute","parseInt","document","defaultView","calculateContainerWidth","windowInnerWidth","window","innerWidth","calculateActivityContainerDimensions","gridWidth","scrollTop","verticalScrollElem","ganttGridElem","ganttActivityAreaElem","verticalScrollTop","scroll","setScrollTop","undefined","setTimeout","groupData","concat","transformData","input","output","chain","currentNode","j","wantedNode","lastNode","k","doTaskCheck","treeExpanded","_this","cachedTaskIds","itemsToCache","indexOf","item","setIdPrefix","_ganttConfig","GanttComponent","defineProperty","_project","project","setDefaultProject","_options","options","setDefaultOptions","ngOnInit","setSizes","ganttContainerWidth","ganttService","startDate","gridRowClicked","onGridRowClick","emit","onResize","$event","Component","selector","template","providers","Input","Output","EventEmitter","GanttHeaderComponent","GanttFooterComponent","weeks","GanttActivityComponent","slice","TIME_SCALE","zoomLevel","zooming","containerWidth","containerHeight","calculateContainerHeight","activityContainerSizes","setScale","setDimensions","expand","ngDoCheck","activityActions","expanded","onVerticalScroll","verticalScroll","ganttGrid","ganttActivityArea","toggleChildren","rowElem","getAttribute","parentId_1","replace","querySelectorAll","removedIndex","splice","toggleAllChildren","childrenIds","Array","call","childrenTasks","event","ganttActivityHeight","ganttActivityWidth","dimensions","setGridRowStyle","font-weight","cursor","zoomTasks","level","zoom","querySelector","scrollLeft","force","expandedIcon","downTriangle","upTriangle","getStatusIcon","getStatusIconColor","setGridScaleStyle","Zooming","changeDetection","ChangeDetectionStrategy","Default","ElementRef","elem","data","gridColumns","GanttTimeScaleComponent","subscribe","setTimescaleStyle","setTimescaleLineStyle","borderTop","position","border-top","setTimescaleCellStyle","timeScale","GanttActivityBackgroundComponent","drawGrid","setRowStyle","setCellStyle","cells","ViewChild","rows","GanttActivityBarsComponent","expandLeft","bar","stopPropagation","startX","clientX","startBarWidth","startBarLeft","addMouseEventListeners","doDrag","e","barWidth","expandRight","move","barLeft","drawBar","drawProgress","dragFn","stopFn","documentElement","removeEventListener","addEventListener","GanttActivityModule","NgModule","imports","CommonModule","exports","declarations","GanttModule","FormsModule"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class GanttConfig {\r\n    public cellWidth: number = 76;\r\n    public rowHeight: number = 25;\r\n    public activityHeight: number = 300;\r\n    public barHeight = 20;\r\n    public barLineHeight = 20;\r\n    public barMoveable = false;\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n/*\r\n * Group the array by given function\r\n * Takes an array argument that defaults to 1.\r\n * Usage:\r\n *   array | groupBy:func()\r\n * Example:\r\n *   {{ [ { id: '1'}] |  groupBy: }}\r\n *   formats to: []\r\n*/\r\n@Pipe({name: 'groupBy'})\r\nexport class GroupByPipe implements PipeTransform {\r\n  transform(array: any[], f: any): any[] {\r\n      var groups = {};\r\n      array.forEach((o: any) => {\r\n        var group = JSON.stringify(f(o));\r\n\r\n        groups[group] = groups[group] || [];\r\n        groups[group].push(o);\r\n      });\r\n      return Object.keys(groups).map((group: any) => {\r\n          return groups[group];\r\n      });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { GanttConfig } from './gantt-config.service';\r\nimport { IBarStyle, Task, IScale, Zooming } from '../interfaces';\r\nimport { GroupByPipe } from '../../shared/pipes/groupBy.pipe';\r\n\r\n@Injectable()\r\nexport class GanttService {\r\n    public rowHeight: number = 0;\r\n    public hourCellWidth: number = 60; // change to 60 so minutes can been seen more easily\r\n    public hoursCellWidth: number = this.hourCellWidth * 25;\r\n    public cellWidth: number = 0;\r\n    public windowInnerWidth: number = 0;\r\n    public activityHeight: number = 0;\r\n    public barHeight: number = 0;\r\n    public barLineHeight: number = 0;\r\n    public barTop: number = 0;\r\n    public barMoveable: boolean = false;\r\n    public gridWidth: number = 560;\r\n    private barStyles: IBarStyle[] = [\r\n        { status: \"information\", backgroundColor: \"rgb(18,195, 244)\", border: \"1px solid #2196F3\", progressBackgroundColor: \"#2196F3\" },\r\n        { status: \"warning\", backgroundColor: \"#FFA726\", border: \"1px solid #EF6C00\", progressBackgroundColor: \"#EF6C00\" },\r\n        { status: \"error\", backgroundColor: \"#EF5350\", border: \"1px solid #C62828\", progressBackgroundColor: \"#C62828\" },\r\n        { status: \"completed\", backgroundColor: \"#66BB6A\", border: \"1px solid #2E7D32\", progressBackgroundColor: \"#2E7D32\" }\r\n    ];\r\n    public TASK_CACHE: any[];\r\n    public TIME_SCALE: any[];\r\n\r\n    constructor() {\r\n        let _ganttConfig = new GanttConfig();\r\n\r\n        this.rowHeight = _ganttConfig.rowHeight;\r\n        this.cellWidth = _ganttConfig.cellWidth;\r\n        this.activityHeight = _ganttConfig.activityHeight;\r\n        this.barHeight = _ganttConfig.barHeight;\r\n        this.barLineHeight = _ganttConfig.barLineHeight;\r\n        this.barTop = _ganttConfig.rowHeight;\r\n        this.barMoveable = _ganttConfig.barMoveable;\r\n    }\r\n\r\n    private calculateBarWidth(start: Date, end: Date, hours?: boolean): number {\r\n        if (typeof start === \"string\") {\r\n            start = new Date(start);\r\n        }\r\n\r\n        if (typeof end === \"string\") {\r\n            end = new Date(end);\r\n        }\r\n\r\n        let days = this.calculateDiffDays(start, end);\r\n        let width: number = days * this.cellWidth + days;\r\n\r\n        if (hours) {\r\n            width = days * this.hourCellWidth * 24 + days * 24;\r\n        }\r\n\r\n        return width;\r\n    }\r\n\r\n    private calculateBarLeft(start: Date, scale: any[], hours?: boolean): number {\r\n        var left: number = 0;\r\n        var hoursInDay: number = 24;\r\n\r\n        if (start != null) {\r\n            if (typeof start === \"string\") {\r\n                start = new Date();\r\n            }\r\n\r\n            for (var i = 0; i < scale.length; i++) {\r\n                if (start.getDate() === scale[i].getDate()) {\r\n                    if (hours) {\r\n                        left = i * hoursInDay * this.hourCellWidth + hoursInDay * i + this.calculateBarLeftDelta(start, hours);\r\n                    } else {\r\n                        left = i * this.cellWidth + i + this.calculateBarLeftDelta(start, hours);\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return left;\r\n    }\r\n\r\n    /** Calculates the height of the gantt grid, activity and vertical scroll */\r\n    public calculateGanttHeight(): string {\r\n        return `${this.TASK_CACHE.length * this.rowHeight + this.rowHeight * 3}px`;\r\n    }\r\n\r\n    private calculateBarLeftDelta(start: Date, hours?: boolean): number {\r\n        var offset: number = 0;\r\n        var hoursInDay: number = 24;\r\n        var minutesInHour: number = 60;\r\n        var secondsInHour: number = 3600;\r\n        var startHours: number = start.getHours() + start.getMinutes() / minutesInHour + start.getSeconds() / secondsInHour;\r\n\r\n        if (hours) {\r\n            offset = this.hoursCellWidth / hoursInDay * startHours - startHours;\r\n        } else {\r\n            offset = this.cellWidth / hoursInDay * startHours;\r\n        }\r\n        return offset;\r\n    }\r\n\r\n    public isParent(treePath: string): boolean {\r\n\r\n        try {\r\n            var depth = treePath.split('/').length;\r\n\r\n            if (depth === 1) {\r\n                return true;\r\n            }\r\n        }\r\n        catch (err) {\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public isChild(treePath: string) {\r\n        if (this.isParent(treePath)) {\r\n            return '0px';\r\n        }\r\n        return '20px';\r\n    }\r\n\r\n    /** Calculate the bar styles */\r\n    public calculateBar(task: any, index: number, scale: any, hours?: boolean) {\r\n        var barStyle = this.getBarStyle(task.status);\r\n        return {\r\n            'top': this.barTop * index + 2 + 'px',\r\n            'left': this.calculateBarLeft(task.start, scale, hours) + 'px',\r\n            'height': this.barHeight + 'px',\r\n            'line-height': this.barLineHeight + 'px',\r\n            'width': this.calculateBarWidth(task.start, task.end, hours) + 'px',\r\n            'background-color': barStyle[\"background-color\"],\r\n            'border': barStyle[\"border\"]\r\n        }\r\n    }\r\n\r\n    /** Get the bar style based on task status */\r\n    private getBarStyle(taskStatus: string = \"\"): any {\r\n        var style = {};\r\n\r\n        try {\r\n            taskStatus = taskStatus.toLowerCase();\r\n        } catch (err) {\r\n            taskStatus = \"\";\r\n        }\r\n\r\n        switch (taskStatus) {\r\n            case \"information\":\r\n                style[\"background-color\"] = this.barStyles[0].backgroundColor;\r\n                style[\"border\"] = this.barStyles[0].border;\r\n                break;\r\n            case \"warning\":\r\n                style[\"background-color\"] = this.barStyles[1].backgroundColor;\r\n                style[\"border\"] = this.barStyles[1].border;\r\n                break;\r\n            case \"error\":\r\n                style[\"background-color\"] = this.barStyles[2].backgroundColor;\r\n                style[\"border\"] = this.barStyles[2].border;\r\n                break;\r\n            case \"completed\":\r\n                style[\"background-color\"] = this.barStyles[3].backgroundColor;\r\n                style[\"border\"] = this.barStyles[3].border;\r\n                break;\r\n            default:\r\n                style[\"background-color\"] = \"rgb(18,195, 244)\";\r\n                style[\"border\"] = \"1px solid #2196F3\";\r\n                break;\r\n        }\r\n\r\n        return style;\r\n    }\r\n\r\n    /** Get the progresss bar background colour based on task status */\r\n    public getBarProgressStyle(taskStatus: string = \"\"): any {\r\n        var style = {};\r\n\r\n        try {\r\n            taskStatus = taskStatus.toLowerCase();\r\n        } catch (err) {\r\n            taskStatus = \"\";\r\n        }\r\n\r\n        switch (taskStatus) {\r\n            case \"information\":\r\n                style[\"background-color\"] = this.barStyles[0].progressBackgroundColor;\r\n                break;\r\n            case \"warning\":\r\n                style[\"background-color\"] = this.barStyles[1].progressBackgroundColor;\r\n                break;\r\n            case \"error\":\r\n                style[\"background-color\"] = this.barStyles[2].progressBackgroundColor;\r\n                break;\r\n            case \"completed\":\r\n                style[\"background-color\"] = this.barStyles[3].progressBackgroundColor;\r\n                break;\r\n            default:\r\n                style[\"background-color\"] = this.barStyles[0].progressBackgroundColor;\r\n                break;\r\n        }\r\n\r\n        return style;\r\n    }\r\n\r\n    /** Calculates the bar progress width in pixels given task percent complete */\r\n    public calculateBarProgress(width: number, percent: number): string {\r\n        if (typeof percent === \"number\") {\r\n            if (percent > 100) {\r\n                percent = 100;\r\n            }\r\n            let progress: number = (width / 100) * percent - 2;\r\n\r\n            return `${progress}px`;\r\n        }\r\n        return `${0}px`;\r\n    }\r\n\r\n    /** Calculates the difference in two dates and returns number of days */\r\n    public calculateDiffDays(start: Date, end: Date): number {\r\n        try {\r\n            let oneDay = 24 * 60 * 60 * 1000; // hours*minutes*seconds*milliseconds /ms\r\n            let diffDays = Math.abs((start.getTime() - end.getTime()) / (oneDay));\r\n            let days = diffDays; // don't use Math.round as it will draw an incorrect bar\r\n\r\n            return days;\r\n        } catch (err) {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /** Calculates the difference in two dates and returns number of hours */\r\n    public calculateDuration(task: any): string {\r\n        try {\r\n            if (task.start != null && task.end != null) {\r\n                let oneHour = 60 * 60 * 1000;\r\n                let diffHours = (Math.abs((task.start.getTime() - task.end.getTime()) / oneHour));\r\n                let duration = diffHours;\r\n\r\n                if (duration > 24) {\r\n                    return `${Math.round(duration / 24)} day(s)`; // duration in days\r\n                } else if (duration > 1) {\r\n                    return `${Math.round(duration)} hr(s)`; // duration in hours\r\n                } else {\r\n                    let minutes = duration * 60;\r\n\r\n                    if (minutes < 1) {\r\n                        return `${Math.round(minutes * 60)} second(s)`; // duration in seconds\r\n                    }\r\n                    return `${Math.round(minutes)} min(s)` // duration in minutes\r\n                }\r\n            }\r\n\r\n            return '';\r\n        } catch (err) {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    calculateTotalDuration(tasks: any[]): string {\r\n        try {\r\n            tasks = tasks.filter(t => t.parentId === t.id); // only calculate total duration with parent tasks\r\n\r\n            let totalHours = 0;\r\n            let oneHour = 60 * 60 * 1000;\r\n            for (let i = 0; i < tasks.length; i++) {\r\n                let start = tasks[i].start;\r\n                let end = tasks[i].end;\r\n\r\n                if (start != null && end != null) {\r\n                    let duration = Math.abs(tasks[i].end.getTime() - tasks[i].start.getTime()) / oneHour; // duration in hours\r\n                    totalHours += duration;\r\n                }\r\n            }\r\n\r\n            if (totalHours === 0) {\r\n                return '';\r\n            }\r\n\r\n            if (totalHours > 24) {\r\n                return `${Math.round(totalHours / 24)} day(s)`; // duration in days\r\n            } else if (totalHours > 1) {\r\n                return `${Math.round(totalHours)} hr(s)`; // duration in hours\r\n            } else {\r\n                let minutes = totalHours * 60;\r\n\r\n                if (minutes < 1) {\r\n                    return `${Math.round(minutes * 60)} second(s)`; // duration in seconds\r\n                }\r\n                return `${Math.round(minutes)} min(s)` // duration in minutes\r\n            }\r\n        } catch (err) {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    /** Calculate the total percentage of a group of tasks */\r\n    calculateTotalPercentage(node: any): number {\r\n        var totalPercent: number = 0;\r\n        var children = node.children;\r\n\r\n        if (children.length > 0) {\r\n            children.forEach((child: any) => {\r\n                totalPercent += isNaN(child.percentComplete) ? 0 : child.percentComplete;\r\n            });\r\n\r\n            return Math.ceil(totalPercent / children.length);\r\n        } else {\r\n            return isNaN(node.percentComplete) ? 0 : node.percentComplete;\r\n        }\r\n    }\r\n\r\n    /** Calculate the total percent of the parent task */\r\n    calculateParentTotalPercentage(parent: any, tasks: any[]) {\r\n        var children = tasks.filter((task:any) => {\r\n            return task.parentId === parent.id && task.id != parent.id\r\n        }); // get only children tasks ignoring parent.\r\n\r\n        var totalPercent: number = 0;\r\n\r\n        if (children.length > 0) {\r\n            children.forEach((child:any) => {\r\n                totalPercent += isNaN(child.percentComplete) ? 0 : child.percentComplete;\r\n            });\r\n\r\n            return Math.ceil(totalPercent / children.length);\r\n        } else {\r\n            return isNaN(parent.percentComplete) ? 0 : parent.percentComplete;\r\n        }\r\n    }\r\n\r\n    /** Calculate the gantt scale range given the start and end date of tasks*/\r\n    public calculateScale(start: Date = new Date(), end: Date = this.addDays(start, 7)) {\r\n        let scale: any[] = [];\r\n\r\n        try {\r\n            while (start.getTime() <= end.getTime()) {\r\n                scale.push(start);\r\n                start = this.addDays(start, 1);\r\n            }\r\n            return scale;\r\n\r\n        } catch (err) {\r\n            return scale;\r\n        }\r\n    }\r\n\r\n    /** Determines whether given date is a weekend */\r\n    public isDayWeekend(date: Date): boolean {\r\n        let day = date.getDay();\r\n\r\n        if (day === 6 || day === 0) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /** Add x number of days to a date object */\r\n    public addDays(date: Date, days: number): Date {\r\n        let result = new Date(date);\r\n        result.setDate(result.getDate() + days);\r\n        return result;\r\n    }\r\n\r\n    //** Remove x number of days from a date object */\r\n    public removeDays(date: Date, days: number): Date {\r\n        let result = new Date(date);\r\n        result.setDate(result.getDate() - days);\r\n        return result;\r\n    }\r\n\r\n    /** Calculates the grid scale for gantt based on tasks start and end dates */\r\n    public calculateGridScale(tasks: Task[]): IScale {\r\n        var start: Date;\r\n        var end: Date;\r\n        var dates = tasks.map((task:any) => {\r\n            return {\r\n                start: new Date(task.start),\r\n                end: new Date(task.end)\r\n            }\r\n        });\r\n\r\n        start = new Date(Math.min.apply(null, dates.map(function (t) {\r\n            return t.start;\r\n        })));\r\n\r\n        end = new Date(Math.max.apply(null, dates.map(function (t) {\r\n            return t.end;\r\n        })));\r\n\r\n        return {\r\n            start: start,\r\n            end: end\r\n        }\r\n    }\r\n\r\n    /** Create an hours array for use in time scale component */\r\n    public getHours(cols: number): string[] {\r\n        var hours: string[] = [];\r\n\r\n        while (hours.length <= cols * 24) {\r\n            for (var i = 0; i <= 23; i++) {\r\n                if (i < 10) {\r\n                    hours.push('0' + i.toString());\r\n                } else {\r\n                    hours.push(i.toString());\r\n                }\r\n            }\r\n        }\r\n\r\n        return hours;\r\n    }\r\n\r\n    public getComputedStyle(element: any, attribute: any) {\r\n        return parseInt(document.defaultView.getComputedStyle(element)[attribute], 10);\r\n    }\r\n\r\n    //TODO(dale): determine whether this is needed\r\n    public calculateContainerWidth(): number {\r\n        this.windowInnerWidth = window.innerWidth;\r\n        let containerWidth = (innerWidth - 18);\r\n\r\n        return containerWidth;\r\n    }\r\n\r\n    public calculateActivityContainerDimensions(): any {\r\n        var scrollWidth: number = 18;\r\n        this.windowInnerWidth = window.innerWidth;\r\n        let width = this.windowInnerWidth - this.gridWidth - scrollWidth;\r\n\r\n        return { height: this.activityHeight, width: width };\r\n    }\r\n\r\n    /** Set the vertical scroll top positions for gantt */\r\n    public scrollTop(verticalScrollElem: any, ganttGridElem: any, ganttActivityAreaElem: any) {\r\n        let verticalScrollTop = verticalScrollElem.scrollTop;\r\n        let scroll = this.setScrollTop;\r\n\r\n        // debounce\r\n        if (verticalScrollTop !== null && verticalScrollTop !== undefined) {\r\n            setTimeout(function() {\r\n                scroll(verticalScrollTop, ganttActivityAreaElem);\r\n                scroll(ganttActivityAreaElem.scrollTop, ganttGridElem);\r\n\r\n            }, 50);\r\n        }\r\n    }\r\n\r\n    /** Group data by id , only supports one level*/\r\n    public groupData(tasks: any): any {\r\n        var merged:any = [];\r\n        var groups:any = new GroupByPipe().transform(tasks, (task:any) => {\r\n            return [task.treePath.split('/')[0]]\r\n        });\r\n        return merged.concat.apply([], groups);\r\n    }\r\n\r\n    /** Create tree of data */\r\n    public transformData(input: any): any {\r\n        var output:any = [];\r\n        for (var i = 0; i < input.length; i++) {\r\n            var chain:any = input[i].id.split('/');\r\n            var currentNode:any = output;\r\n            for (var j = 0; j < chain.length; j++) {\r\n                var wantedNode:any = chain[j];\r\n                var lastNode:any = currentNode;\r\n                for (var k = 0; k < currentNode.length; k++) {\r\n                    if (currentNode[k].name == wantedNode) {\r\n                        currentNode = currentNode[k].children;\r\n                        break;\r\n                    }\r\n                }\r\n                // If we couldn't find an item in this list of children\r\n                // that has the right name, create one:\r\n                if (lastNode == currentNode) {\r\n                    //TODO(dale): determine way to show percent complete on correct child  \r\n                    var newNode:any = currentNode[k] = {\r\n                        name: wantedNode,\r\n                        percentComplete: input[i].percentComplete,\r\n                        start: input[i].start,\r\n                        end: input[i].end,\r\n                        children: []\r\n                    };\r\n                    currentNode = newNode.children;\r\n                }\r\n            }\r\n        }\r\n        return output;\r\n    }\r\n\r\n    /** Checks whether any new data needs to be added to task cache  */\r\n    public doTaskCheck(tasks: any[], treeExpanded: boolean): boolean {\r\n        var cachedTaskIds = this.TASK_CACHE.map((task:any) => { return task.id });\r\n        var itemsToCache: any[] = [];\r\n\r\n        if (treeExpanded) {\r\n            // push children and parent tasks that are not cached\r\n            tasks.filter((task:any) => {\r\n                return cachedTaskIds.indexOf(task.id) === -1\r\n            }).forEach((task:any) => {\r\n                itemsToCache.push(task);\r\n            })\r\n        } else {\r\n            // only look at tasks that are not cached\r\n            tasks.filter((task:any) => { \r\n                return cachedTaskIds.indexOf(task.id) === -1 && task.treePath.split('/').length === 1 \r\n            }).forEach((task:any) => {\r\n                itemsToCache.push(task);\r\n            });\r\n        }\r\n\r\n        itemsToCache.forEach((item:any) => {\r\n            this.TASK_CACHE.push(item);\r\n        });\r\n\r\n        if (itemsToCache.length > 0) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** Set a id prefix so CSS3 query selector can work with ids that contain numbers */\r\n    public setIdPrefix(id: string): string {\r\n        return `_${id}`;\r\n    }\r\n\r\n    // /** Remove the id prefix to allow querying of data */\r\n    // public removeIdPrefix(id: string): string {\r\n    //     return id.substring(1, id.length - 1);\r\n    // }\r\n\r\n    /** Set the scroll top property of a native DOM element */\r\n    private setScrollTop(scrollTop: number, element: any): void {\r\n        if (element !== null && element !== undefined) {\r\n            element.scrollTop = scrollTop;\r\n        }\r\n    }\r\n}\r\n","import { Component, OnInit, Input, EventEmitter, Output } from '@angular/core';\r\nimport { NgStyle } from '@angular/common';\r\nimport { GanttService } from './shared/services/gantt.service';\r\nimport { IGanttOptions, Project } from './shared/interfaces';\r\n\r\n@Component({\r\n    selector: 'gantt',\r\n    template: `\r\n        <div style=\"width: 100%\">\r\n            <div class=\"gantt_container\" (window:resize)=\"onResize($event)\">\r\n                <gantt-header [name]=\"_project.name\" [startDate]=\"_project.startDate\"></gantt-header>\r\n                <gantt-activity [project]=\"_project\" [options]=\"_options\" (onGridRowClick)=\"gridRowClicked($event)\"></gantt-activity>\r\n                <gantt-footer [project]=\"_project\"></gantt-footer>\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .gantt_container {\r\n            font-family: Arial;\r\n            font-size: 13px;\r\n            border: 1px solid #cecece;\r\n            position: relative;\r\n            white-space: nowrap;   \r\n            margin-top: 0px;\r\n        }\r\n    `],\r\n    providers: []\r\n})\r\nexport class GanttComponent implements OnInit {\r\n    _project: Project;\r\n    _options: IGanttOptions;\r\n\r\n    //TODO(dale): this may be causing an issue in the tree builder?\r\n    @Input()\r\n    set project(project: any) {\r\n        if (project) {\r\n            this._project = project;\r\n        } else {\r\n            this.setDefaultProject();\r\n        }\r\n    }\r\n    get project() { return this._project; }\r\n\r\n    @Input()\r\n    set options(options: any) {\r\n        if (options.scale) {\r\n            this._options = options;\r\n        } else {\r\n            this.setDefaultOptions();\r\n        }\r\n    }\r\n    get options() { return this._options; }\r\n\r\n    @Output() onGridRowClick: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    private ganttContainerWidth: number;\r\n\r\n    constructor(private ganttService: GanttService) { }\r\n\r\n    ngOnInit() {\r\n\r\n     }\r\n\r\n    setSizes(): void {\r\n        this.ganttContainerWidth = this.ganttService.calculateContainerWidth();\r\n    }\r\n\r\n    setDefaultOptions() {\r\n        var scale = this.ganttService.calculateGridScale(this._project.tasks);\r\n\r\n        this._options = {\r\n            scale: scale\r\n        };\r\n    }\r\n\r\n    setDefaultProject() {\r\n        this._project = {\r\n            id: '',\r\n            name: '',\r\n            startDate: null,\r\n            tasks: []\r\n        };\r\n    }\r\n\r\n    gridRowClicked(task: any) {\r\n        this.onGridRowClick.emit(task);\r\n    }\r\n\r\n    onResize($event: any): void {\r\n        this.setSizes();\r\n    }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'gantt-header',\r\n    template: `\r\n        <div class=\"gantt-header\">\r\n            <div class=\"gantt-header-title\">\r\n                <div style=\"flex:1\">{{ name }}</div>\r\n                <div>Started: {{ startDate | date: 'medium'}}</div>\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [`\r\n        .gantt-header {\r\n            background-color: whitesmoke;\r\n            height: 40px;\r\n            border-bottom: 1px solid #e0e0e0;\r\n        }\r\n\r\n        .gantt-header-title {\r\n            padding: 12px;   \r\n            display: flex;\r\n            flex-wrap:wrap;\r\n            font-family: Arial, Helvetica, sans-serif;\r\n            font-size: 16px;\r\n        }\r\n\r\n        .gantt-header-actions {\r\n            display: inline;\r\n            float: right;\r\n            padding: 6px;\r\n        }\r\n    `]\r\n})\r\nexport class GanttHeaderComponent {\r\n    @Input() name: any;\r\n    @Input() startDate: Date;\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'gantt-footer',\r\n    template: `<div class=\"gantt-footer\"></div>`,\r\n    styles: [`\r\n        .gantt-footer {\r\n            background-color: whitesmoke;\r\n            height: 36px;\r\n            border-top: 1px solid #e0e0e0;\r\n        }\r\n\r\n        .gantt-footer-actions {\r\n            float:right;\r\n        }\r\n    `]\r\n})\r\nexport class GanttFooterComponent {\r\n    @Input() project: any;\r\n    constructor() { }\r\n}\r\n","export interface Project {\r\n    id: string;\r\n    name: string;\r\n    startDate?: Date;\r\n    tasks: Task[];\r\n}\r\n\r\nexport interface Task {\r\n    id: string;\r\n    treePath: string;\r\n    parentId: string;\r\n    name: string;\r\n    resource?: string;\r\n    start: Date;\r\n    end?: Date; \r\n    percentComplete?: number;\r\n    status?: string;\r\n}\r\n\r\nexport interface IGanttOptions {\r\n    scale?: IScale;\r\n    zooming?: string;\r\n}\r\n\r\nexport interface IScale {\r\n    start?: Date;\r\n    end?: Date;\r\n}\r\n\r\nexport interface IBarStyle {\r\n    status: string;\r\n    backgroundColor: string;\r\n    border: string;\r\n    progressBackgroundColor: string;\r\n}\r\n\r\nexport enum Zooming {\r\n    hours,\r\n    days,\r\n    weeks\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, ElementRef, AfterViewInit, ViewChild, ChangeDetectionStrategy, OnChanges, DoCheck } from '@angular/core';\r\n\r\nimport { GanttService } from '../shared/services/gantt.service';\r\nimport { GanttConfig } from '../shared/services/gantt-config.service';\r\nimport { IGanttOptions, Zooming } from '../shared/interfaces';\r\n\r\n@Component({\r\n    selector: 'gantt-activity',\r\n    template: `\r\n    <div class=\"actions-bar\">\r\n        <div style=\"float: right\">\r\n            <label>\r\n                <button (click)=\"zoomTasks('hours')\"\r\n                    style=\"background-color: whitesmoke; border: none; font-size: 16px; cursor: pointer\">Hour</button>\r\n            </label>\r\n            <label>\r\n                <button (click)=\"zoomTasks('days')\"\r\n                    style=\"background-color: whitesmoke; border: none; font-size: 16px; cursor: pointer\">Day</button>\r\n            </label>\r\n            <button (click)=\"expand()\"\r\n                style=\"background-color: whitesmoke; border: none; font-size: 21px; cursor: pointer\"\r\n                [innerHTML]=\"activityActions.expandedIcon\"></button>\r\n        </div>\r\n    </div>\r\n    <div class=\"grid\" #ganttGrid [ngStyle]=\"{ 'height': ganttActivityHeight, 'width': ganttService.gridWidth + 'px'}\">\r\n    <div class=\"grid-scale\" [ngStyle]=\"setGridScaleStyle()\">\r\n        <div class=\"grid-head-cell\"\r\n            *ngFor=\"let column of gridColumns\" [style.width]=\"column.width + 'px'\"\r\n            [style.left]=\"column.left + 'px'\">\r\n\r\n            <label>\r\n                {{column.name}}\r\n                <span *ngIf=\"column.name === 'Duration'\"\r\n                    style=\"font-weight:bold\">{{ ganttService.calculateTotalDuration(ganttService.TASK_CACHE) }}</span>\r\n            </label>\r\n        </div>\r\n        <div class=\"grid-head-cell\">\r\n            <button (click)=\"toggleAllChildren()\"\r\n                style=\"background-color: whitesmoke; border: none; font-size: 21px; cursor: pointer\">\r\n\r\n                {{ treeExpanded ? '&#x25b2;' : '&#x25bc;' }}\r\n            </button>\r\n        </div>\r\n    </div>\r\n    <div class=\"grid-data\"\r\n        #ganttGridData\r\n        [ngStyle]=\"{ 'height': ganttService.calculateGanttHeight() }\">\r\n\r\n    <div #row\r\n        *ngFor=\"let data of ganttService.groupData(ganttService.TASK_CACHE)\"\r\n        (click)=\"toggleChildren(row, data)\" class=\"grid_row\"\r\n        [ngStyle]=\"setGridRowStyle(ganttService.isParent(data.treePath))\"\r\n        [attr.data-id]=\"ganttService.setIdPrefix(data.id)\"\r\n        [attr.data-isParent]=\"ganttService.isParent(data.treePath)\"\r\n        [attr.data-parentid]=\"ganttService.setIdPrefix(data.parentId)\">\r\n\r\n            <div class=\"grid-cell\" [ngStyle]=\"{ 'width': gridColumns[0].width + 'px' }\">\r\n                <div [innerHTML]=\"getStatusIcon(data.status, data.percentComplete)\"\r\n                    [style.color]=\"getStatusIconColor(data.status, data.percentComplete)\"></div>\r\n            </div>\r\n            <div class=\"grid-cell\"\r\n                [ngStyle]=\"{ 'width': gridColumns[1].width + 'px', 'padding-left': ganttService.isChild(data.treePath) }\">\r\n\r\n                <div class=\"gantt-tree-content\">{{data.name}}</div>\r\n            </div>\r\n            <div class=\"grid-cell\" [ngStyle]=\"{ 'width': gridColumns[2].width + 'px' }\">\r\n                <div>{{ data.percentComplete }}</div>\r\n            </div>\r\n            <div class=\"grid-cell\" [ngStyle]=\"{ 'width': gridColumns[3].width + 'px'}\">\r\n                <div> {{ ganttService.calculateDuration(data) }}</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    </div>\r\n    <div class=\"gantt-activity\"\r\n        (window:resize)=\"onResize($event)\"\r\n        [ngStyle]=\"{ 'height': ganttActivityHeight, 'width': ganttActivityWidth - 18 + 'px'}\">\r\n\r\n        <time-scale [zoom]=\"zoom\"\r\n            [zoomLevel]=\"zoomLevel\"\r\n            [timeScale]=\"ganttService.TIME_SCALE\"\r\n            [dimensions]=\"dimensions\"></time-scale>\r\n        <div class=\"gantt-activity-area\"\r\n            #ganttActivityArea\r\n            [ngStyle]=\"{ 'height': ganttService.calculateGanttHeight(), 'width': containerWidth + 'px'}\">\r\n\r\n            <activity-background [zoom]=\"zoom\"\r\n                [zoomLevel]=\"zoomLevel\"\r\n                [timeScale]=\"ganttService.TIME_SCALE\"\r\n                [tasks]=\"ganttService.TASK_CACHE\"></activity-background>\r\n            <activity-bars [zoom]=\"zoom\"\r\n                [zoomLevel]=\"zoomLevel\"\r\n                [timeScale]=\"ganttService.TIME_SCALE\"\r\n                [dimensions]=\"dimensions\"\r\n                [tasks]=\"ganttService.TASK_CACHE\"></activity-bars>\r\n        </div>\r\n    </div>\r\n    <div class=\"gantt-vertical-scroll\"\r\n        #verticalScroll\r\n        (scroll)=\"onVerticalScroll(verticalScroll, ganttGrid, ganttActivityArea)\"\r\n        [ngStyle]=\"{'display': activityActions.expanded === true ? 'none' : 'block' }\">\r\n\r\n        <div [ngStyle]=\"{ 'height': ganttService.calculateGanttHeight() }\"></div>\r\n    </div>\r\n    `,\r\n    styles: [`\r\n        .gantt-activity {\r\n            /*overflow-x: hidden;*/\r\n            overflow-x: auto;\r\n            height: 250px;\r\n            overflow-y: hidden;\r\n            overflow-x: scroll;\r\n            display: inline-block;\r\n            vertical-align: top;\r\n            position:relative;\r\n        }\r\n        .gantt-activity-area {\r\n            position: relative;\r\n            overflow-x: hidden;\r\n            overflow-y: hidden;\r\n            -webkit-user-select: none;\r\n        }\r\n        .gantt-vertical-scroll {\r\n            background-color: transparent;\r\n            overflow-x: hidden;\r\n            overflow-y: scroll;\r\n            position: absolute;\r\n            right: 0;\r\n            display: block;\r\n            height: 283px;\r\n            width: 18px;\r\n            top: 70px;\r\n        }\r\n        .grid {\r\n            overflow-x: hidden;\r\n            overflow-y: hidden;\r\n            display: inline-block;\r\n            vertical-align: top;\r\n            border-right: 1px solid #cecece;\r\n        }\r\n        .grid-scale {\r\n            color: #6b6b6b;\r\n            font-size: 12px;\r\n            border-bottom: 1px solid #e0e0e0;\r\n            background-color: whitesmoke;\r\n        }\r\n        .grid-head-cell {\r\n            /*color: #a6a6a6;*/\r\n            border-top: none !important;\r\n            border-right: none !important;\r\n            line-height: inherit;\r\n            box-sizing: border-box;\r\n            display: inline-block;\r\n            vertical-align: top;\r\n            border-right: 1px solid #cecece;\r\n            /*text-align: center;*/\r\n            position: relative;\r\n            cursor: default;\r\n            height: 100%;\r\n            -moz-user-select: -moz-none;\r\n            -webkit-user-select: none;\r\n            overflow: hidden;\r\n        }\r\n        .grid-data {\r\n            overflow:hidden;\r\n        }\r\n        .grid-row {\r\n            box-sizing: border-box;\r\n            border-bottom: 1px solid #e0e0e0;\r\n            background-color: #fff;\r\n            position: relative;\r\n            -webkit-user-select: none;\r\n        }\r\n        .grid-row:hover {\r\n            background-color: #eeeeee;\r\n        }\r\n        .grid-cell {\r\n            border-right: none;\r\n            color: #454545;\r\n            display: inline-block;\r\n            vertical-align: top;\r\n            padding-left: 6px;\r\n            padding-right: 6px;\r\n            height: 100%;\r\n            overflow: hidden;\r\n            white-space: nowrap;\r\n            font-size: 13px;\r\n            box-sizing: border-box;\r\n        }\r\n        .actions-bar {\r\n            /*border-top: 1px solid #cecece;*/\r\n            border-bottom: 1px solid #e0e0e0;\r\n            clear: both;\r\n            /*margin-top: 90px;*/\r\n            height: 28px;\r\n            background: whitesmoke;\r\n            color: #494949;\r\n            font-family: Arial, sans-serif;\r\n            font-size: 13px;\r\n            padding-left: 15px;\r\n            line-height: 25px;\r\n        }\r\n        .gantt-tree-content {\r\n            padding-left:15px;\r\n        }\r\n    `],\r\n    changeDetection: ChangeDetectionStrategy.Default\r\n})\r\nexport class GanttActivityComponent implements OnInit, DoCheck {\r\n    @Input() project: any;\r\n    @Input() options: any;\r\n    @Output() onGridRowClick: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    private upTriangle: string = '&#x25b2;' // BLACK UP-POINTING TRIANGLE\r\n    private downTriangle: string = '&#x25bc;'; // BLACK DOWN-POINTING TRIANGLE\r\n\r\n    zoom: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n    activityActions = {\r\n        expanded: false,\r\n        expandedIcon: this.downTriangle\r\n    };\r\n\r\n    private timeScale: any;\r\n\r\n    private start: Date;\r\n    private end: Date;\r\n    containerHeight: any;\r\n    containerWidth: any;\r\n\r\n    private activityContainerSizes: any;\r\n\r\n    ganttActivityHeight: any;\r\n    ganttActivityWidth: any;\r\n\r\n    zoomLevel: string = Zooming[Zooming.hours];\r\n\r\n    treeExpanded = false;\r\n\r\n    private scale: any = {\r\n        start: null,\r\n        end: null\r\n    };\r\n\r\n    dimensions = {\r\n        height: 0,\r\n        width: 0\r\n    };\r\n\r\n    private data: any[] = [];\r\n\r\n    public gridColumns: any[] = [\r\n        { name: '', left: 0, width: 16 },\r\n        { name: 'Task', left: 20, width: 330 },\r\n        { name: '%', left: 8, width: 40 },\r\n        { name: 'Duration', left: 14, width: 140 }\r\n    ];\r\n\r\n    constructor(\r\n        public elem: ElementRef,\r\n        public ganttService: GanttService) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        // Cache the project data and only work with that. Only show parent tasks by default\r\n        this.ganttService.TASK_CACHE = this.project.tasks.slice(0).filter((item: any) => {\r\n            return item.treePath.split('/').length === 1;\r\n        });\r\n        this.ganttService.TIME_SCALE = this.ganttService.calculateScale(this.options.scale.start, this.options.scale.end);\r\n\r\n        this.zoomLevel = this.options.zooming;\r\n        this.start = this.options.scale.start;\r\n        this.end = this.options.scale.end;\r\n        this.containerWidth = this.calculateContainerWidth();\r\n        this.containerHeight = this.calculateContainerHeight();\r\n        this.activityContainerSizes = this.ganttService.calculateActivityContainerDimensions();\r\n\r\n        // important that these are called last as it relies on values calculated above.\r\n        this.setScale();\r\n        this.setDimensions();\r\n        this.setSizes();\r\n\r\n        this.expand(); // default to expanded\r\n    }\r\n\r\n    /** Custom model check */\r\n    ngDoCheck() {\r\n        // do a check to see whether any new tasks have been added. If the task is a child then push into array if tree expanded?\r\n        var tasksAdded = this.ganttService.doTaskCheck(this.project.tasks, this.treeExpanded);\r\n\r\n        // only force expand if tasks are added and tree is already expanded\r\n        if (tasksAdded && this.activityActions.expanded) {\r\n            this.expand(true);\r\n        }\r\n    }\r\n\r\n    /** On vertical scroll set the scroll top of grid and activity  */\r\n    onVerticalScroll(verticalScroll: any, ganttGrid: any, ganttActivityArea: any): void {\r\n        this.ganttService.scrollTop(verticalScroll, ganttGrid, ganttActivityArea);\r\n    }\r\n\r\n    /** Removes or adds children for given parent tasks back into DOM by updating TASK_CACHE */\r\n    toggleChildren(rowElem: any, task: any) {\r\n        try {\r\n            let isParent: boolean = \"true\" === rowElem.getAttribute('data-isparent');\r\n            let parentId: string = rowElem.getAttribute('data-parentid').replace(\"_\", \"\"); // remove id prefix\r\n            let children: any = document.querySelectorAll('[data-parentid=' + rowElem.getAttribute('data-parentid') + '][data-isparent=false]');\r\n\r\n            // use the task cache to allow deleting of items without polluting the project.tasks array\r\n            if (isParent) {\r\n                // remove children from the DOM as we don't want them if we are collapsing the parent\r\n                if (children.length > 0) {\r\n                    let childrenIds: any[] = this.ganttService.TASK_CACHE.filter((task: any) => {\r\n                        return task.parentId == parentId && task.treePath.split('/').length > 1;\r\n                    }).map((item: any) => { return item.id });\r\n\r\n                    childrenIds.forEach((item: any) => {\r\n                        var removedIndex = this.ganttService.TASK_CACHE.map((item: any) => { return item.id }).indexOf(item);\r\n\r\n                        this.ganttService.TASK_CACHE.splice(removedIndex, 1);\r\n                    });\r\n\r\n                    if (this.activityActions.expanded) {\r\n                        this.expand(true);\r\n                    }\r\n\r\n                } else {\r\n                    // CHECK the project cache to see if this parent id has any children\r\n                    // and if so push them back into array so DOM is updated\r\n                    let childrenTasks: any[] = this.project.tasks.filter((task: any) => {\r\n                        return task.parentId === parentId && task.treePath.split('/').length > 1;\r\n                    });\r\n\r\n                    childrenTasks.forEach((task: any) => {\r\n                        this.ganttService.TASK_CACHE.push(task);\r\n                    });\r\n\r\n                    if (this.activityActions.expanded) {\r\n                        this.expand(true);\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.onGridRowClick.emit(task);\r\n\r\n        } catch (err) { }\r\n    }\r\n\r\n    /** Removes or adds children tasks back into DOM by updating TASK_CACHE */\r\n    toggleAllChildren() {\r\n        try {\r\n            var children: any = document.querySelectorAll('[data-isparent=false]');\r\n            var childrenIds: string[] = Array.prototype.slice.call(children).map((item: any) => {\r\n                return item.getAttribute('data-id').replace(\"_\", \"\"); // remove id prefix\r\n            });\r\n\r\n            // push all the children array items into cache\r\n            if (this.treeExpanded) {\r\n                if (children.length > 0) {\r\n                    let childrenIds: string[] = this.ganttService.TASK_CACHE.filter((task: any) => {\r\n                        return task.treePath.split('/').length > 1;\r\n                    }).map((item: any) => { return item.id });\r\n\r\n                    childrenIds.forEach((item: any) => {\r\n                        var removedIndex = this.ganttService.TASK_CACHE.map((item: any) => { return item.id }).indexOf(item);\r\n                        this.ganttService.TASK_CACHE.splice(removedIndex, 1);\r\n                    });\r\n                }\r\n\r\n                this.treeExpanded = false;\r\n\r\n                if (this.activityActions.expanded) {\r\n                    this.expand(true);\r\n                }\r\n            } else {\r\n                // get all children tasks in project input\r\n                let childrenTasks: any[] = this.project.tasks.filter((task: any) => {\r\n                    return task.treePath.split('/').length > 1;\r\n                });\r\n\r\n                if (children.length > 0) {\r\n                    // filter out these children as they already exist in task cache\r\n                    childrenTasks = childrenTasks.filter((task: any) => {\r\n                        return childrenIds.indexOf(task.id) === -1;\r\n                    });\r\n                }\r\n\r\n                childrenTasks.forEach((task: any) => {\r\n                    this.ganttService.TASK_CACHE.push(task);\r\n                });\r\n\r\n                this.treeExpanded = true;\r\n\r\n                if (this.activityActions.expanded) {\r\n                    this.expand(true);\r\n                }\r\n            }\r\n        } catch (err) { }\r\n    }\r\n\r\n    /** On resize of browser window dynamically adjust gantt activity height and width */\r\n    onResize(event: any): void {\r\n        let activityContainerSizes = this.ganttService.calculateActivityContainerDimensions();\r\n        if (this.activityActions.expanded) {\r\n            this.ganttActivityHeight = this.ganttService.TASK_CACHE.length * this.ganttService.rowHeight + this.ganttService.rowHeight * 3 + 'px';\r\n        } else {\r\n            this.ganttActivityHeight = activityContainerSizes.height + 'px';;\r\n        }\r\n\r\n        this.ganttActivityWidth = activityContainerSizes.width;\r\n    }\r\n\r\n    setScale() {\r\n        this.scale.start = this.start;\r\n        this.scale.end = this.end;\r\n    }\r\n\r\n    setDimensions() {\r\n        this.dimensions.height = this.containerHeight;\r\n        this.dimensions.width = this.containerWidth;\r\n    }\r\n\r\n    setGridRowStyle(isParent: boolean): any {\r\n        if (isParent) {\r\n            return {\r\n                'height': this.ganttService.rowHeight + 'px',\r\n                'line-height': this.ganttService.rowHeight + 'px',\r\n                'font-weight': 'bold',\r\n                'cursor': 'pointer'\r\n            };\r\n        }\r\n\r\n        return {\r\n            'height': this.ganttService.rowHeight + 'px',\r\n            'line-height': this.ganttService.rowHeight + 'px'\r\n        };\r\n    }\r\n\r\n    /** Set the zoom level e.g hours, days */\r\n    zoomTasks(level: string) {\r\n        this.zoomLevel = level;\r\n        this.zoom.emit(this.zoomLevel);\r\n        this.containerWidth = this.calculateContainerWidth();\r\n        this.setDimensions();\r\n        document.querySelector('.gantt_activity').scrollLeft = 0 // reset scroll left, replace with @ViewChild?\r\n    }\r\n\r\n    /** Expand the gantt grid and activity area height */\r\n    expand(force?: boolean): void {\r\n        var verticalScroll = document.querySelector('.gantt_vertical_scroll');\r\n        var ganttActivityHeight: string = `${this.ganttService.TASK_CACHE.length * this.ganttService.rowHeight + this.ganttService.rowHeight * 3}px`;\r\n\r\n        if (force && this.activityActions.expanded) {\r\n            this.ganttActivityHeight = ganttActivityHeight;\r\n        } else if (this.activityActions.expanded) {\r\n            this.activityActions.expanded = false;\r\n            this.activityActions.expandedIcon = this.downTriangle;\r\n            this.ganttActivityHeight = '300px';\r\n        } else {\r\n            verticalScroll.scrollTop = 0;\r\n\r\n            this.activityActions.expanded = true;\r\n            this.activityActions.expandedIcon = this.upTriangle;\r\n            this.ganttActivityHeight = ganttActivityHeight;\r\n        }\r\n    }\r\n\r\n    /** Get the status icon unicode string */\r\n    getStatusIcon(status: string, percentComplete: number): string {\r\n        var checkMarkIcon: string = '&#x2714;';\r\n        var upBlackPointer: string = '&#x25b2;';\r\n        var crossMarkIcon: string = '&#x2718;';\r\n\r\n        if (status === \"Completed\" || percentComplete === 100 && status !== \"Error\") {\r\n            return checkMarkIcon;\r\n        } else if (status === \"Warning\") {\r\n            return upBlackPointer;\r\n        } else if (status === \"Error\") {\r\n            return crossMarkIcon;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    /** Get the status icon color */\r\n    getStatusIconColor(status: string, percentComplete: number): string {\r\n        if (status === \"Completed\" || percentComplete === 100 && status !== \"Error\") {\r\n            return 'green';\r\n        } else if (status === \"Warning\") {\r\n            return 'orange';\r\n        } else if (status === \"Error\") {\r\n            return 'red';\r\n        }\r\n        return '';\r\n    }\r\n\r\n    setGridScaleStyle() {\r\n        var height = this.ganttService.rowHeight;\r\n\r\n        if (this.zoomLevel === Zooming[Zooming.hours]) {\r\n            height *= 2;\r\n        }\r\n\r\n        return {\r\n            'height': height + 'px',\r\n            'line-height': height + 'px',\r\n            'width': this.ganttService.gridWidth + 'px'\r\n        };\r\n    }\r\n\r\n    private calculateContainerHeight(): number {\r\n        return this.ganttService.TASK_CACHE.length * this.ganttService.rowHeight;\r\n    }\r\n\r\n    private calculateContainerWidth(): number {\r\n        if (this.zoomLevel === Zooming[Zooming.hours]) {\r\n            return this.ganttService.TIME_SCALE.length * this.ganttService.hourCellWidth * 24 + this.ganttService.hourCellWidth\r\n        } else {\r\n            return this.ganttService.TIME_SCALE.length * this.ganttService.cellWidth + this.ganttService.cellWidth;\r\n        }\r\n    }\r\n\r\n    private setSizes(): void {\r\n        this.ganttActivityHeight = this.activityContainerSizes.height + 'px';\r\n        this.ganttActivityWidth = this.activityContainerSizes.width;\r\n    }\r\n\r\n}\r\n","import { Component, OnInit, Input, EventEmitter, ViewChild } from '@angular/core';\r\nimport { GanttService } from '../../shared/services/gantt.service';\r\nimport { Zooming } from '../../shared/interfaces';\r\n\r\n@Component({\r\n    selector: 'time-scale',\r\n    template: `\r\n        <div class=\"time-scale\" [ngStyle]=\"setTimescaleStyle()\">\r\n            <div class=\"time-scale-line\" [ngStyle]=\"setTimescaleLineStyle('none')\">\r\n                <div class=\"time-scale-cell\" *ngFor=\"let date of timeScale\" \r\n                    [ngStyle]=\"setTimescaleCellStyle()\"\r\n                    [ngClass]=\"(isDayWeekend(date)) ? 'weekend' : ''\">{{date | date: 'dd-MM-yyyy'}}</div>\r\n            </div>\r\n            <div *ngIf=\"zoomLevel === 'hours'\" class=\"time-scale-line\" [ngStyle]=\"setTimescaleLineStyle('1px solid #cecece')\">\r\n                <div class=\"time-scale-cell\"\r\n                    *ngFor=\"let hour of getHours()\"\r\n                    [ngStyle]=\"{ 'width': ganttService.hourCellWidth + 'px' }\">{{hour}}</div>\r\n            </div>\r\n        </div>`,\r\n    styles: [`\r\n        .weekend {\r\n            background-color: whitesmoke;\r\n        }\r\n        .time-scale {\r\n            font-size: 12px;\r\n            border-bottom: 1px solid #cecece;\r\n            background-color: #fff;\r\n        }\r\n        .time-scale-line {\r\n            box-sizing: border-box;\r\n        }\r\n        .time-scale-line:first-child {\r\n            border-top: none;\r\n        }\r\n        .time-scale-cell {\r\n            display: inline-block;\r\n            white-space: nowrap;\r\n            overflow: hidden;\r\n            border-right: 1px solid #cecece;\r\n            text-align: center;\r\n            height: 100%;\r\n        }`\r\n    ],\r\n    providers: [\r\n        GanttService\r\n    ]\r\n})\r\nexport class GanttTimeScaleComponent implements OnInit {\r\n    @Input() timeScale: any;\r\n    @Input() dimensions: any;\r\n    @Input() zoom: any;\r\n    @Input() zoomLevel: any;\r\n\r\n    constructor(public ganttService: GanttService) { }\r\n\r\n    ngOnInit() {\r\n        this.zoom.subscribe((zoomLevel: string) => {\r\n            this.zoomLevel = zoomLevel;\r\n        });\r\n    }\r\n\r\n    setTimescaleStyle() {\r\n        return {\r\n            'width': this.dimensions.width + 'px'\r\n        };\r\n    }\r\n\r\n    setTimescaleLineStyle(borderTop: string) {\r\n        return {\r\n            'height': this.ganttService.rowHeight + 'px',\r\n            'line-height': this.ganttService.rowHeight + 'px',\r\n            'position': 'relative',\r\n            'border-top': borderTop\r\n        };\r\n    }\r\n\r\n    setTimescaleCellStyle() {\r\n        var width = this.ganttService.cellWidth;\r\n        var hoursInDay = 24;\r\n        var hourSeperatorPixels = 23; // we don't include the first \r\n\r\n        if (this.zoomLevel ===  Zooming[Zooming.hours]) {\r\n            width = this.ganttService.hourCellWidth * hoursInDay + hourSeperatorPixels; \r\n        }\r\n\r\n        return {\r\n            'width': width + 'px'\r\n        };\r\n    }\r\n\r\n    isDayWeekend(date: Date): boolean {\r\n        return this.ganttService.isDayWeekend(date);\r\n    }\r\n\r\n    getHours(): string[] {\r\n        return this.ganttService.getHours(this.timeScale.length);\r\n    }\r\n}","import { Component, OnInit, Input, ViewChild, ElementRef } from '@angular/core';\r\nimport { GanttService } from '../../shared/services/gantt.service';\r\nimport { Zooming } from '../../shared/interfaces';\r\n\r\n@Component({\r\n    selector: 'activity-background',\r\n    template: `\r\n    <div #bg class=\"gantt-activity-bg\">\r\n        <div class=\"gantt-activity-row\"\r\n            [ngStyle]=\"setRowStyle()\"\r\n            *ngFor=\"let row of ganttService.groupData(tasks)\">\r\n\r\n            <div class=\"gantt-activity-cell\"\r\n                [ngStyle]=\"setCellStyle()\"\r\n                *ngFor=\"let cell of cells; let l = last\"\r\n                [ngClass]=\"[(isDayWeekend(cell)) ? 'weekend' : '', l ? 'last-column-cell' : '']\"></div>\r\n        </div>\r\n    </div>\r\n    `,\r\n    styles: [`\r\n        .gantt-activity-bg {\r\n            overflow: hidden;\r\n        }\r\n        .gantt-activity-row {\r\n            border-bottom: 1px solid #ebebeb;\r\n            background-color: #fff;\r\n            box-sizing: border-box;\r\n        }\r\n        .gantt-activity-cell {\r\n            display: inline-block;\r\n            height: 100%;\r\n            border-right: 1px solid #ebebeb;\r\n        }\r\n        .weekend {\r\n            background-color: whitesmoke;\r\n        }\r\n    `]\r\n})\r\nexport class GanttActivityBackgroundComponent implements OnInit {\r\n    @Input() tasks: any;\r\n    @Input() timeScale: any;\r\n    @Input() zoom: any;\r\n    @Input() zoomLevel: string;\r\n\r\n    @ViewChild('bg') bg: ElementRef;\r\n\r\n    rows: any[] = [];\r\n    cells: any[] = [];\r\n\r\n    constructor(public ganttService: GanttService) { }\r\n\r\n    ngOnInit() {\r\n        this.drawGrid();\r\n\r\n        this.zoom.subscribe((zoomLevel: string) => {\r\n            this.zoomLevel = zoomLevel;\r\n            this.drawGrid();\r\n        });\r\n    }\r\n\r\n    isDayWeekend(date: Date): boolean {\r\n        return this.ganttService.isDayWeekend(date);\r\n    }\r\n\r\n    setRowStyle() {\r\n        return {\r\n            'height': this.ganttService.rowHeight + 'px'\r\n        };\r\n    }\r\n\r\n    setCellStyle() {\r\n        var width = this.ganttService.cellWidth;\r\n\r\n        if (this.zoomLevel === Zooming[Zooming.hours]) {\r\n            width = this.ganttService.hourCellWidth;\r\n        }\r\n\r\n        return {\r\n            'width': width + 'px'\r\n        };\r\n    }\r\n\r\n    private drawGrid(): void {\r\n        if (this.zoomLevel === Zooming[Zooming.hours]) {\r\n            this.cells = [];\r\n\r\n            this.timeScale.forEach((date: any) => {\r\n                for (var i = 0; i <= 23; i++) {\r\n                    this.cells.push(date);\r\n                }\r\n            });\r\n        } else {\r\n            this.cells = this.timeScale;\r\n        }\r\n    }\r\n}\r\n","import { Component, OnInit, Input, ElementRef } from '@angular/core';\r\nimport { GanttService } from '../../shared/services/gantt.service';\r\nimport { Zooming } from '../../shared/interfaces';\r\n\r\n@Component({\r\n    selector: 'activity-bars',\r\n    template: `\r\n    <div class=\"gantt-activity-bars-area\" \r\n        [ngStyle]=\"{ 'height': containerHeight + 'px', 'width': containerWidth + 'px' }\">\r\n\r\n        <div #bar class=\"gantt-activity-line\"\r\n            *ngFor=\"let task of ganttService.groupData(tasks); let i = index\"\r\n            [ngStyle]=\"drawBar(task, i)\">\r\n\r\n            <div class=\"gantt-activity-progress\" [ngStyle]=\"drawProgress(task, bar)\"></div>\r\n            <div class=\"gantt-activity-progress_drag\" style=\"left: 518px\"></div>\r\n            <div class=\"gantt-activity-content\"></div>\r\n            <div class=\"gantt-activity-link-control gantt-activity-right\" style=\"height: 26px; line-height: 30px\">\r\n                <div class=\"gantt-link-point\"></div>\r\n            </div>\r\n            <div class=\"gantt-activity-link-control gantt-activity-left\" style=\"height: 26px; line-height: 30px\">\r\n                <div class=\"gantt-link-point\"></div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    `,\r\n    styles: [`\r\n    .gantt-activity-line {\r\n        /*border-radius: 2px;*/\r\n        position: absolute;\r\n        box-sizing: border-box;\r\n        background-color: rgb(18,195,244);\r\n        border: 1px solid #2196F3;\r\n        -webkit-user-select: none;\r\n    }\r\n    .gantt-activity-line:hover {\r\n        /*cursor: move;*/\r\n    }\r\n    .gantt-activity-progress {\r\n        text-align: center;\r\n        z-index: 0;\r\n        background: #2196F3;\r\n        position: absolute;\r\n        min-height: 18px;\r\n        display: block;\r\n        height: 18px;\r\n    }\r\n    .gantt-activity-progress-drag {\r\n        height: 8px;\r\n        width: 8px;\r\n        bottom: -4px;\r\n        margin-left: 4px;\r\n        background-position: bottom;\r\n        background-image: \"\";\r\n        background-repeat: no-repeat;\r\n        z-index: 2;\r\n    }\r\n    .gantt-activity-content {\r\n        font-size: 12px;\r\n        color: #fff;\r\n        width: 100%;\r\n        top: 0;\r\n        position: absolute;\r\n        white-space: nowrap;\r\n        text-align: center;\r\n        line-height: inherit;\r\n        overflow: hidden;\r\n        height: 100%;\r\n    }\r\n    .gantt-activity-link-control {\r\n        position: absolute;\r\n        width: 13px;\r\n        top: 0;\r\n    }\r\n    .gantt-activity-right {\r\n        right: 0;\r\n    }\r\n    .gantt-activity-left {\r\n        left: 0;\r\n    }\r\n    .gantt-activity-right:hover {\r\n        cursor:w-resize;\r\n    }\r\n    .gantt-activity-left:hover {\r\n        cursor:w-resize;\r\n    }\r\n    `],\r\n    providers: [\r\n        GanttService\r\n    ]\r\n})\r\nexport class GanttActivityBarsComponent implements OnInit {\r\n    @Input() timeScale: any;\r\n    @Input() dimensions: any;\r\n    @Input() tasks: any;\r\n    @Input() zoom: any;\r\n    @Input() zoomLevel: any;\r\n\r\n    containerHeight: number = 0;\r\n    containerWidth: number = 0;\r\n\r\n    constructor(public ganttService: GanttService) { }\r\n\r\n    ngOnInit() {\r\n        this.containerHeight = this.dimensions.height;\r\n        this.containerWidth = this.dimensions.width;\r\n\r\n        this.zoom.subscribe((zoomLevel: string) => {\r\n            this.zoomLevel = zoomLevel;\r\n        });;\r\n    }\r\n\r\n    //TODO(dale): the ability to move bars needs reviewing and there are a few quirks\r\n    expandLeft($event: any, bar: any) {\r\n        $event.stopPropagation();\r\n\r\n        let ganttService = this.ganttService;\r\n        let startX = $event.clientX;\r\n        let startBarWidth = bar.style.width;\r\n        let startBarLeft = bar.style.left;\r\n\r\n        function doDrag(e: any) {\r\n            let cellWidth = ganttService.cellWidth;\r\n            let barWidth = startBarWidth - e.clientX + startX;\r\n            let days = Math.round(barWidth / cellWidth);\r\n\r\n            bar.style.width = days * cellWidth + days;\r\n            bar.style.left = (startBarLeft - (days * cellWidth) - days);\r\n        }\r\n\r\n        this.addMouseEventListeners(doDrag);\r\n\r\n        return false;\r\n    }\r\n\r\n    expandRight($event: any, bar: any) {\r\n        $event.stopPropagation();\r\n\r\n        let ganttService = this.ganttService;\r\n        let startX = $event.clientX;\r\n        let startBarWidth = bar.style.width;\r\n        let startBarEndDate = bar.task.end;\r\n        let startBarLeft = bar.style.left;\r\n\r\n        function doDrag(e: any) {\r\n            let cellWidth = ganttService.cellWidth;\r\n            let barWidth = startBarWidth + e.clientX - startX;\r\n            let days = Math.round(barWidth / cellWidth);\r\n\r\n            if (barWidth < cellWidth) {\r\n                barWidth = cellWidth;\r\n                days = Math.round(barWidth / cellWidth);\r\n            }\r\n            bar.style.width = ((days * cellWidth) + days); // rounds to the nearest cell\r\n        }\r\n\r\n        this.addMouseEventListeners(doDrag);\r\n\r\n        return false;\r\n    }\r\n\r\n    move($event: any, bar: any) {\r\n        $event.stopPropagation();\r\n\r\n        let ganttService = this.ganttService;\r\n        let startX = $event.clientX;\r\n        let startBarLeft = bar.style.left;\r\n\r\n        function doDrag(e: any) {\r\n            let cellWidth = ganttService.cellWidth;\r\n            let barLeft = startBarLeft + e.clientX - startX;\r\n            let days = Math.round(barLeft / cellWidth);\r\n\r\n            // TODO: determine how many days the bar can be moved\r\n            // if (days < maxDays) {\r\n            bar.style.left = ((days * cellWidth) + days); // rounded to nearest cell\r\n\r\n            // keep bar in bounds of grid\r\n            if (barLeft < 0) {\r\n                bar.style.left = 0;\r\n            }\r\n            // }\r\n            // TODO: it needs to take into account the max number of days.\r\n            // TODO: it needs to take into account the current days.\r\n            // TODO: it needs to take into account the right boundary.\r\n        }\r\n\r\n        this.addMouseEventListeners(doDrag);\r\n\r\n        return false;\r\n    }\r\n\r\n    drawBar(task: any, index: number) {\r\n        let style = {};\r\n\r\n        if (this.zoomLevel === Zooming[Zooming.hours]) {\r\n            style = this.ganttService.calculateBar(task, index, this.timeScale, true);\r\n        } else {\r\n            style = this.ganttService.calculateBar(task, index, this.timeScale);\r\n        }\r\n        return style;\r\n    }\r\n\r\n    drawProgress(task: any, bar: any): any {\r\n        var barStyle = this.ganttService.getBarProgressStyle(task.status);\r\n        var width = this.ganttService.calculateBarProgress(this.ganttService.getComputedStyle(bar, 'width'), task.percentComplete);\r\n\r\n        return {\r\n            'width': width,\r\n            'background-color': barStyle[\"background-color\"],\r\n        };\r\n    }\r\n\r\n    private addMouseEventListeners(dragFn: any) {\r\n\r\n        function stopFn() {\r\n            document.documentElement.removeEventListener('mousemove', dragFn, false);\r\n            document.documentElement.removeEventListener('mouseup', stopFn, false);\r\n            document.documentElement.removeEventListener('mouseleave', stopFn, false);\r\n        }\r\n\r\n        document.documentElement.addEventListener('mousemove', dragFn, false);\r\n        document.documentElement.addEventListener('mouseup', stopFn, false);\r\n        document.documentElement.addEventListener('mouseleave', stopFn, false);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { GanttActivityComponent } from './gantt-activity.component';\r\nimport { GanttTimeScaleComponent } from './time-scale/gantt-time-scale.component';\r\nimport { GanttActivityBackgroundComponent } from './background/activity-background.component';\r\nimport { GanttActivityBarsComponent } from './bars/activity-bars.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n    ],\r\n    exports: [\r\n        GanttActivityComponent,\r\n        GanttTimeScaleComponent,\r\n        GanttActivityBackgroundComponent,\r\n        GanttActivityBarsComponent\r\n    ],\r\n    declarations: [\r\n        GanttActivityComponent,\r\n        GanttTimeScaleComponent,\r\n        GanttActivityBackgroundComponent,\r\n        GanttActivityBarsComponent\r\n    ],\r\n    providers: [],\r\n})\r\nexport class GanttActivityModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { GanttComponent } from './gantt.component';\r\nimport { GanttHeaderComponent } from './header/gantt-header.component';\r\nimport { GanttFooterComponent } from './footer/gantt-footer.component';\r\nimport { GanttService } from './shared/services/gantt.service';\r\nimport { GanttActivityModule } from './activity/gantt-activity.module';\r\n\r\nimport { GroupByPipe } from './shared/pipes/groupBy.pipe';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        GanttActivityModule,\r\n    ],\r\n    exports: [\r\n        GanttComponent\r\n    ],\r\n    declarations: [\r\n        GanttComponent,\r\n        GanttHeaderComponent,\r\n        GanttFooterComponent,\r\n        GroupByPipe\r\n    ],\r\n    providers: [GanttService],\r\n})\r\nexport class GanttModule { }"]}