!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/forms"),require("@angular/common"),require("@angular/material"),require("@material-extended/mde"),require("@angular/core")):"function"==typeof define&&define.amd?define("angular-gantt",["exports","@angular/forms","@angular/common","@angular/material","@material-extended/mde","@angular/core"],e):e(t["angular-gantt"]={},t.ng.forms,t.ng.common,t.ng.material,t.mde,t.ng.core)}(this,function(t,e,n,i,o,r){"use strict";var a=(s.decorators=[{type:r.Injectable}],s);function s(){this.cellWidth=38,this.rowHeight=30,this.activityHeight=420,this.barHeight=25,this.barLineHeight=35,this.barMoveable=!1}var l=(c.prototype.calculateBarWidth=function(t,e){"string"==typeof t&&(t=new Date(t)),"string"==typeof e&&(e=new Date(e));var n=this.calculateDiffDays(t,e);return(n*this.cellWidth+n)/7},c.prototype.calculateBarLeft=function(t,e){var n=0;if(null!=t){"string"==typeof t&&(t=new Date);for(var i=0;i<e.length;i++)if(t.getTime()>=e[i].getTime()&&t.getTime()<e[i+1].getTime()){n=i*this.cellWidth+this.cellWidth*this.calculateDiffDays(e[i],t)/7+i+this.calculateBarLeftDelta(t);break}}return n},c.prototype.calculateGanttHeight=function(){return this.TASK_CACHE.length*this.rowHeight+"px"},c.prototype.calculateBarLeftDelta=function(t){var e=t.getHours()+t.getMinutes()/60+t.getSeconds()/3600;return this.cellWidth/24*e},c.prototype.calculateBar=function(t,e,n){var i=this.getBarStyle(t.color);return{top:this.barTop*e+2+"px",left:this.calculateBarLeft(t.start,n)+"px",height:this.barHeight+"px","line-height":this.barLineHeight+"px",width:this.calculateBarWidth(t.start,t.end)+"px","background-color":i["background-color"],"border-left":i["border-left"]}},c.prototype.getBarStyle=function(t){var e={};return e["background-color"]=t.secondary,e["border-left"]="5px solid "+t.primary,e},c.prototype.calculateDiffDays=function(t,e){try{return Math.abs((t.getTime()-e.getTime())/864e5)}catch(n){return 0}},c.prototype.calculateScale=function(t,e){void 0===t&&(t=new Date),void 0===e&&(e=this.addDays(t,7));var n=[];try{for(;t.getTime()<=e.getTime();)n.push(t),t=this.addDays(t,7);return n}catch(i){return n}},c.prototype.calculateMonthScale=function(t,e){void 0===t&&(t=new Date),void 0===e&&(e=this.addDays(t,7));var n=[];try{return n=this.calculateCellMonthWidth(t,e)}catch(i){return n}},c.prototype.isDayWeekend=function(t){var e=t.getDay();return 6===e||0===e},c.prototype.addDays=function(t,e){var n=new Date(t);return n.setDate(n.getDate()+e),n},c.prototype.removeDays=function(t,e){var n=new Date(t);return n.setDate(n.getDate()-e),n},c.prototype.calculateGridScale=function(t){var e=t.map(function(t){return{start:new Date(t.start),end:new Date(t.end)}});return{start:new Date(Math.min.apply(null,e.map(function(t){return t.start}))),end:new Date(Math.max.apply(null,e.map(function(t){return t.end})))}},c.prototype.getComputedStyle=function(t,e){return parseInt(document.defaultView.getComputedStyle(t)[e],10)},c.prototype.calculateContainerWidth=function(){return this.windowInnerWidth=window.innerWidth,this.gridWidth-18},c.prototype.calculateContainerHeight=function(){return innerHeight-18},c.prototype.calculateActivityContainerDimensions=function(){this.windowInnerWidth=window.innerWidth;var t=window.innerWidth-this.gridWidth-18;return{height:this.activityHeight,width:t}},c.prototype.calculateGanttActivityWidth=function(t){return"calc(100% - "+(t.offsetWidth+1)+"px)"},c.prototype.calculateGanttActivityHeight=function(t){return t.offsetHeight+"px"},c.prototype.calculateCellMonthWidth=function(t,e){var n,i=[],o=t,r=e,a=this.calculateDiffMonths(o,r),s=this.calculateDiffDays(o,r);for(n=0;n<a;n++){var l=0===n?o:new Date(o.getFullYear(),n,1),c=n===a-1?r:new Date(o.getFullYear(),n+1,0),d=this.calculateDiffDays(l,c)+(n!==a-1&&1),p=1.025*Math.floor(d/s*2e3);i.push({start:l,end:c,width:p})}return i},c.prototype.calculateDiffMonths=function(t,e){var n=e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear());if(e.getDate()<t.getDate()){var i=new Date(e.getFullYear(),e.getMonth(),t.getDate());e<i&&e.getMonth()==i.getMonth()&&e.getYear()%4!=0&&n--}return n+1},c.prototype.scrollTop=function(t,e,n){var i=t.scrollTop,o=this.setScrollTop;null!==i&&i!==undefined&&(o(i,n),o(n.scrollTop,e))},c.prototype.groupData=function(t){return t},c.prototype.doTaskCheck=function(t,e){return this.TASK_CACHE=t,this.TIME_SCALE=this.calculateScale(e.start,e.end),this.MONTH_SCALE=this.calculateMonthScale(e.start,e.end),!0},c.prototype.setIdPrefix=function(t){return"_"+t},c.prototype.setScrollTop=function(t,e){null!==e&&e!==undefined&&(e.scrollTop=t)},c.decorators=[{type:r.Injectable}],c.ctorParameters=function(){return[]},c);function c(){this.rowHeight=0,this.hourCellWidth=60,this.hoursCellWidth=25*this.hourCellWidth,this.cellWidth=0,this.windowInnerWidth=0,this.activityHeight=0,this.barHeight=0,this.barLineHeight=0,this.barTop=0,this.barMoveable=!1,this.gridWidth=0,this.gridHeight=332;var t=new a;this.rowHeight=t.rowHeight,this.cellWidth=t.cellWidth,this.activityHeight=t.activityHeight,this.barHeight=t.barHeight,this.barLineHeight=t.barLineHeight,this.barTop=t.rowHeight,this.barMoveable=t.barMoveable}var d=(Object.defineProperty(p.prototype,"project",{get:function(){return this._project},set:function(t){t?this._project=t:this.setDefaultProject()},enumerable:!0,configurable:!0}),Object.defineProperty(p.prototype,"options",{get:function(){return this._options},set:function(t){t.scale?this._options=t:this.setDefaultOptions()},enumerable:!0,configurable:!0}),p.prototype.ngOnInit=function(){},p.prototype.setSizes=function(){this.ganttContainerWidth=this.ganttService.calculateContainerWidth()},p.prototype.setDefaultOptions=function(){var t=this.ganttService.calculateGridScale(this._project.tasks);this._options={scale:t,gridColumns:[{name:"",left:0,width:16},{name:"Zadanie",left:0,width:330}]}},p.prototype.setDefaultProject=function(){this._project={name:"",startDate:null,tasks:[]}},p.prototype.gridRowClicked=function(t){this.onGridRowClick.emit(t)},p.prototype.popoverOpened=function(t){this.onPopoverOpen.emit(t)},p.prototype.onResize=function(t){this.setSizes()},p.decorators=[{type:r.Component,args:[{selector:"gantt",template:'\n        <div [ngStyle]="{ \'width\': \'100%\' }">\n            <div class="gantt-container" (window:resize)="onResize($event)">\n                \x3c!--<gantt-header [name]="_project.name" [startDate]="_project.startDate"></gantt-header>--\x3e\n                <gantt-activity [project]="_project" [options]="_options" (onGridRowClick)="gridRowClicked($event)" (onPopoverOpen)="popoverOpened($event)"></gantt-activity>\n                \x3c!--<gantt-footer [project]="_project"></gantt-footer>--\x3e\n            </div>\n        </div>\n    ',providers:[],styles:["\n        .gantt-container {\n            font-family: Arial;\n            font-size: 13px;\n            border: 1px solid #cecece;\n            position: relative;\n            white-space: nowrap;\n            margin-top: 0px;\n        }\n    "]}]}],p.ctorParameters=function(){return[{type:l}]},p.propDecorators={project:[{type:r.Input}],options:[{type:r.Input}],onGridRowClick:[{type:r.Output}],onPopoverOpen:[{type:r.Output}]},p);function p(t){this.ganttService=t,this.onGridRowClick=new r.EventEmitter,this.onPopoverOpen=new r.EventEmitter}var h=(g.decorators=[{type:r.Component,args:[{selector:"gantt-header",template:'\n        <div class="gantt-header">\n            <div class="gantt-header-title">\n                <div style="flex:1">{{ name }}</div>\n                <div>Started: {{ startDate | date: \'medium\'}}</div>\n            </div>\n        </div>\n    ',styles:["\n        .gantt-header {\n            background-color: whitesmoke;\n            height: 40px;\n            border-bottom: 1px solid #e0e0e0;\n        }\n        .gantt-header-title {\n            padding: 12px;\n            display: flex;\n            flex-wrap:wrap;\n            font-family: Arial, Helvetica, sans-serif;\n            font-size: 16px;\n        }\n        .gantt-header-actions {\n            display: inline;\n            float: right;\n            padding: 6px;\n        }\n    "]}]}],g.propDecorators={name:[{type:r.Input}],startDate:[{type:r.Input}]},g);function g(){}var u=(v.decorators=[{type:r.Component,args:[{selector:"gantt-footer",template:'<div class="gantt-footer"></div>',styles:["\n        .gantt-footer {\n            background-color: whitesmoke;\n            height: 36px;\n            border-top: 1px solid #e0e0e0;\n        }\n        .gantt-footer-actions {\n            float: right;\n        }\n    "]}]}],v.ctorParameters=function(){return[]},v.propDecorators={project:[{type:r.Input}]},v);function v(){}var y=(m.prototype.doWheel=function(t,e){return t.preventDefault(),t.stopPropagation(),0<(t.wheelDelta||t.detail)?e.scrollLeft-=100:e.scrollLeft+=100,!1},m.prototype.ngOnInit=function(){this.ganttService.TASK_CACHE=this.project.tasks,this.ganttService.TIME_SCALE=this.ganttService.calculateScale(this.options.scale.start,this.options.scale.end),this.start=this.options.scale.start,this.end=this.options.scale.end,this.containerWidth=this.calculateContainerWidth(),this.containerHeight=this.calculateContainerHeight(),this.activityContainerSizes=this.ganttService.calculateActivityContainerDimensions(),this.gridColumns=this.options.gridColumns?this.options.gridColumns:this.gridColumns,this.setScale(),this.setDimensions(),this.setSizes()},m.prototype.ngDoCheck=function(){this.ganttService.doTaskCheck(this.project.tasks,this.options.scale)},m.prototype.onVerticalScroll=function(t,e,n){this.ganttService.scrollTop(t,e,n)},m.prototype.gridRowClick=function(t){try{this.onGridRowClick.emit(t)}catch(e){}},m.prototype.popoverOpen=function(t){try{this.onPopoverOpen.emit(t)}catch(e){}},m.prototype.onResize=function(t){var e=this.ganttService.calculateActivityContainerDimensions();this.ganttActivityHeight=e.height+"px",this.ganttActivityWidth=e.width},m.prototype.setScale=function(){this.scale.start=this.start,this.scale.end=this.end},m.prototype.setDimensions=function(){this.dimensions.height=this.containerHeight,this.dimensions.width=this.containerWidth},m.prototype.setGridRowStyle=function(){return{height:this.ganttService.rowHeight+"px","line-height":this.ganttService.rowHeight+"px"}},m.prototype.setGridScaleStyle=function(){var t=this.ganttService.rowHeight+30;return{height:t+"px","line-height":t+"px"}},m.prototype.calculateColumnsWidth=function(){return"calc(100% - "+(this.gridColumns.map(function(t){return t.width}).reduce(function(t,e){return t+e},0)+1)+"px)"},m.prototype.calculateContainerHeight=function(){return this.ganttService.TASK_CACHE.length*this.ganttService.rowHeight},m.prototype.calculateContainerWidth=function(){return this.ganttService.TIME_SCALE.length*this.ganttService.cellWidth+this.ganttService.cellWidth},m.prototype.setSizes=function(){this.ganttActivityHeight=this.activityContainerSizes.height+"px",this.ganttActivityWidth=this.activityContainerSizes.width},m.decorators=[{type:r.Component,args:[{selector:"gantt-activity",template:'\n    <div class="grid" #ganttGrid>\n        <div class="grid-scale" [ngStyle]="setGridScaleStyle()">\n            <div class="grid-head-cell"\n                *ngFor="let column of gridColumns" [style.width]="column.width + \'px\'"\n                [style.left]="column.left + \'px\'">\n\n                <label>\n                    {{column.name}}\n                </label>\n            </div>\n        </div>\n        <div class="grid-data"\n            #ganttGridData\n            [ngStyle]="{ \'height\': ganttService.calculateGanttHeight() }">\n\n            <div #row\n                *ngFor="let data of ganttService.TASK_CACHE" class="grid-row"\n                [ngStyle]="setGridRowStyle()">\n\n                <div class="grid-cell"\n                    [ngStyle]="{ \'width\': gridColumns[1].width + \'px\', \'padding-left\': 0 }">\n\n                    <div class="gantt-tree-content">\n                        <span [ngStyle]="{ borderLeftColor: data.color.primary, borderLeftWidth: .35 + \'em\', \n                            borderLeftStyle: \'solid\', paddingRight: .5 + \'em\'}"></span>\n                        <span>{{data.name}}</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <div class="gantt-activity" #ganttActivity\n        (wheel)="doWheel($event, ganttActivity)"\n        (window:resize)="onResize($event)"\n        [ngStyle]="{ \'height\': ganttService.calculateGanttHeight() + 60, \'width\': calculateColumnsWidth() }">\n\n        <time-scale [timeScaleMonth]="ganttService.MONTH_SCALE"\n            [timeScaleWeekend]="ganttService.TIME_SCALE"\n            [dimensions]="dimensions"\n            [scale]="options.scale"></time-scale>\n        <div class="gantt-activity-area"\n            #ganttActivityArea\n            [ngStyle]="{ \'height\': ganttService.calculateGanttHeight(), \'width\': containerWidth + 36 + \'px\' }">\n\n            <activity-background [timeScale]="ganttService.TIME_SCALE"\n                [tasks]="ganttService.TASK_CACHE"></activity-background>\n            <activity-bars [timeScale]="ganttService.TIME_SCALE"\n                [dimensions]="dimensions"\n                [tasks]="ganttService.TASK_CACHE"\n                (onGridRowClick)="gridRowClick($event)"\n                (onPopoverOpen)="popoverOpen($event)"></activity-bars>\n        </div>\n    </div>\n    ',changeDetection:r.ChangeDetectionStrategy.Default,styles:["\n        .gantt-activity {\n            overflow-y: hidden;\n            overflow-x: scroll;\n            display: inline-block;\n            vertical-align: top;\n            position: relative;\n        }\n        .gantt-activity-area {\n            position: relative;\n            overflow-x: hidden;\n            overflow-y: hidden;\n            -webkit-user-select: none;\n        }\n        .gantt-vertical-scroll {\n            background-color: transparent;\n            overflow-x: hidden;\n            overflow-y: scroll;\n            position: absolute;\n            right: -10px;\n            display: block;\n            top: -1px;\n            border: 1px solid #cecece;\n        }\n        .grid {\n            overflow-x: hidden;\n            overflow-y: hidden;\n            display: inline-block;\n            vertical-align: top;\n            border-right: 1px solid #cecece;\n        }\n        .grid-scale {\n            color: #6b6b6b;\n            font-size: 12px;\n            border-bottom: 1px solid #e0e0e0;\n            background-color: whitesmoke;\n        }\n        .grid-head-cell {\n            /*color: #a6a6a6;*/\n            border-top: none !important;\n            border-right: none !important;\n            line-height: inherit;\n            box-sizing: border-box;\n            display: inline-block;\n            vertical-align: top;\n            border-right: 1px solid #cecece;\n            /*text-align: center;*/\n            position: relative;\n            cursor: default;\n            height: 100%;\n            -moz-user-select: -moz-none;\n            -webkit-user-select: none;\n            overflow: hidden;\n        }\n        .grid-data {\n            overflow: hidden;\n        }\n        .grid-row {\n            box-sizing: border-box;\n            border-bottom: 1px solid #e0e0e0;\n            background-color: #fff;\n            position: relative;\n            -webkit-user-select: none;\n        }\n        .grid-row:hover {\n            background-color: #eeeeee;\n            cursor: pointer;\n        }\n        .grid-cell {\n            border-right: none;\n            color: #454545;\n            display: inline-block;\n            vertical-align: top;\n            padding-left: 6px;\n            padding-right: 6px;\n            height: 100%;\n            overflow: hidden;\n            white-space: nowrap;\n            font-size: 13px;\n            box-sizing: border-box;\n        }\n        .actions-bar {\n            /*border-top: 1px solid #cecece;*/\n            border-bottom: 1px solid #e0e0e0;\n            clear: both;\n            /*margin-top: 90px;*/\n            height: 28px;\n            background: whitesmoke;\n            color: #494949;\n            font-family: Arial, sans-serif;\n            font-size: 13px;\n            padding-left: 15px;\n            line-height: 25px;\n        }\n        .gantt-tree-content {\n            padding-left: 15px;\n        }\n    "]}]}],m.ctorParameters=function(){return[{type:r.ElementRef},{type:l}]},m.propDecorators={project:[{type:r.Input}],options:[{type:r.Input}],onGridRowClick:[{type:r.Output}],onPopoverOpen:[{type:r.Output}]},m);function m(t,e){this.elem=t,this.ganttService=e,this.onGridRowClick=new r.EventEmitter,this.onPopoverOpen=new r.EventEmitter,this.scale={start:null,end:null},this.dimensions={height:0,width:0},this.gridColumns=[{name:"",left:0,width:16},{name:"Zadanie",left:0,width:330}]}var f=(w.prototype.ngOnInit=function(){},w.prototype.setTimescaleStyle=function(){return{width:this.dimensions.width+36+"px"}},w.prototype.setTimescaleMonthLineStyle=function(t){return{height:this.ganttService.rowHeight+"px","line-height":this.ganttService.rowHeight+"px",position:"relative","border-top":t}},w.prototype.setTimescaleMonthCellStyle=function(){return{width:this.ganttService.cellWidth+"px"}},w.prototype.setTimescaleWeekendLineStyle=function(t){return{height:this.ganttService.rowHeight+"px","line-height":this.ganttService.rowHeight+"px",position:"relative","border-top":t}},w.prototype.setTimescaleWeekendCellStyle=function(){return{width:this.ganttService.cellWidth+"px"}},w.prototype.isDayWeekend=function(t){return this.ganttService.isDayWeekend(t)},w.decorators=[{type:r.Component,args:[{selector:"time-scale",template:'\n        <div class="time-scale" [ngStyle]="setTimescaleStyle()">\n            \x3c!--<div class="time-scale-line" [ngStyle]="setTimescaleMonthLineStyle(\'none\')">\n                <div class="time-scale-cell" *ngFor="let scale of timeScaleMonth; let i = index"\n                    [ngClass]="(i % 2) ? \'weekend\' : \'\'" [style.width.px]="scale.width">{{scale.start | date: \'dd-MM\'}}</div>\n            </div>--\x3e\n            <div class="time-scale-line" [ngStyle]="setTimescaleWeekendLineStyle(\'none\')">\n                <div class="time-scale-cell" *ngFor="let date of timeScaleWeekend; let i = index"\n                    [ngClass]="(i % 2) ? \'weekend\' : \'\'" [ngStyle]="setTimescaleWeekendCellStyle()">{{date | date: \'dd-MM\'}}</div>\n            </div>\n            <div class="time-scale-line" [ngStyle]="setTimescaleWeekendLineStyle(\'none\')">\n                <div class="time-scale-cell" *ngFor="let date of timeScaleWeekend; let i = index"\n                [ngClass]="(i % 2) ? \'weekend\' : \'\'" [ngStyle]="setTimescaleWeekendCellStyle()">{{i + 1}}</div>\n            </div>\n        </div>',providers:[l],styles:["\n        .weekend {\n            background-color: whitesmoke;\n        }\n        .time-scale {\n            font-size: 12px;\n            background-color: #fff;\n            border-bottom: 1px solid #cecece;\n        }\n        .time-scale-line {\n            box-sizing: border-box;\n            border-bottom: 1px solid #cecece;\n        }\n        .time-scale-line:first-child {\n            border-top: none;\n        }\n        .time-scale-cell {\n            display: inline-block;\n            white-space: nowrap;\n            overflow: hidden;\n            border-right: 1px solid #cecece;\n            text-align: center;\n            height: 100%;\n        }"]}]}],w.ctorParameters=function(){return[{type:l}]},w.propDecorators={timeScaleMonth:[{type:r.Input}],timeScaleWeekend:[{type:r.Input}],dimensions:[{type:r.Input}],scale:[{type:r.Input}]},w);function w(t){this.ganttService=t}var b=(S.prototype.ngOnInit=function(){this.drawGrid()},S.prototype.isDayWeekend=function(t){return this.ganttService.isDayWeekend(t)},S.prototype.setRowStyle=function(){return{height:this.ganttService.rowHeight+"px"}},S.prototype.setCellStyle=function(){return{width:this.ganttService.cellWidth+"px"}},S.prototype.drawGrid=function(){this.cells=this.timeScale},S.decorators=[{type:r.Component,args:[{selector:"activity-background",template:'\n    <div #bg class="gantt-activity-bg">\n        <div class="gantt-activity-row"\n            [ngStyle]="setRowStyle()"\n            *ngFor="let row of tasks">\n\n            <div class="gantt-activity-cell"\n                [ngStyle]="setCellStyle()"\n                *ngFor="let cell of cells; let i = index; let l = last" [ngClass]="(i % 2) ? \'weekend\' : \'\'" ></div>\n        </div>\n    </div>\n    ',styles:["\n        .weekend {\n            background-color: whitesmoke;\n        }\n        .gantt-activity-bg {\n            overflow: hidden;\n        }\n        .gantt-activity-row {\n            border-bottom: 1px solid #ebebeb;\n            background-color: #fff;\n            box-sizing: border-box;\n        }\n        .gantt-activity-cell {\n            display: inline-block;\n            height: 100%;\n            border-right: 1px solid #ebebeb;\n        }\n    "]}]}],S.ctorParameters=function(){return[{type:l}]},S.propDecorators={tasks:[{type:r.Input}],timeScale:[{type:r.Input}],bg:[{type:r.ViewChild,args:["bg"]}]},S);function S(t){this.ganttService=t,this.rows=[],this.cells=[]}var x=(k.prototype.ngOnInit=function(){this.containerHeight=this.dimensions.height,this.containerWidth=this.dimensions.width},k.prototype.drawBar=function(t,e){return this.ganttService.calculateBar(t,e,this.timeScale)},k.prototype.gridRowClicked=function(t){try{this.onGridRowClick.emit(t)}catch(e){}},k.prototype.popoverOpened=function(t){try{this.onPopoverOpen.emit(t)}catch(e){}},k.prototype.addMouseEventListeners=function(t){function e(){document.documentElement.removeEventListener("mousemove",t,!1),document.documentElement.removeEventListener("mouseup",e,!1),document.documentElement.removeEventListener("mouseleave",e,!1)}document.documentElement.addEventListener("mousemove",t,!1),document.documentElement.addEventListener("mouseup",e,!1),document.documentElement.addEventListener("mouseleave",e,!1)},k.decorators=[{type:r.Component,args:[{selector:"activity-bars",template:'\n    <div class="gantt-activity-bars-area"\n        [ngStyle]="{ \'height\': containerHeight + \'px\', \'width\': containerWidth + \'px\' }">\n\n        <div #bar class="gantt-activity-line"\n            *ngFor="let task of tasks; let i = index" (click)="gridRowClicked(task)"\n            [ngStyle]="drawBar(task, i)">\n\n            <div #popoverTrigger="mdePopoverTrigger"\n                [mdePopoverTriggerFor]="taskPopover"\n                [mdePopoverBackdropCloseOnClick]="false"\n                mdePopoverOffsetX="-15"\n                mdePopoverOffsetY="0"\n                (opened)="popoverOpened(task)">\n\n                <mde-popover #taskPopover="mdePopover" \n                    [mdePopoverEnterDelay]="100"\n                    [mdePopoverLeaveDelay]="0"\n                    [mdePopoverPositionY]="\'above\'"\n                    [mdePopoverOverlapTrigger]="false"\n                    [mdePopoverDisableAnimation]="false"\n                    [mdeFocusTrapEnabled]="false"\n                    [mdePopoverArrowWidth]="12"\n                    [mdePopoverArrowColor]="task.color?.primary"\n                    mdePopoverPlacement="bottom">\n\n                    <ng-container *ngTemplateOutlet="templatePopoverTask; context: {task: task}"></ng-container>\n                </mde-popover>\n\n                <div class="gantt-activity-content"></div>\n                <div class="gantt-activity-link-control gantt-activity-right" style="height: 26px; line-height: 30px">\n                    <div class="gantt-link-point"></div>\n                </div>\n                <div class="gantt-activity-link-control gantt-activity-left" style="height: 26px; line-height: 30px">\n                    <div class="gantt-link-point"></div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <ng-template #templatePopoverTask let-data="task">\n        <mat-card *ngIf="data" class="mat-elevation-z6" \n            [ngStyle]="{ \n                borderBottomColor: data.color?.primary,\n                borderBottomWidth: \'.25em\',\n                borderBottomStyle: \'solid\' \n            }" style="width: 320px; max-width: 320px;">\n\n            <mat-card-header>\n                <div mat-card-avatar [ngStyle]="{ borderColor: data.color?.primary }" style="width: 0; height: unset; margin-bottom: .7em; border-radius: 0; border-style: solid;"></div>\n                <mat-card-title>\n                    <span style="font-size: 80%;">{{data.name}}</span>\n                </mat-card-title>\n                <mat-card-subtitle>\n                    <span>{{data.start | date:\'yyyy-MM-dd\'}} - {{data.end | date:\'yyyy-MM-dd\'}}</span>\n                </mat-card-subtitle>\n                <mat-card-subtitle>\n                    <span style="padding-left: .75em; padding-right: 1em; font-stretch: condensed;">&#x336;</span>\n                    <span>{{data.resource}}</span>\n                </mat-card-subtitle>\n            </mat-card-header>\n            <mat-card-content>\n                <footer *ngIf="data.description">\n                    <span [innerHTML]="data.description"></span>\n                </footer>\n            </mat-card-content>\n        </mat-card>\n    </ng-template>\n    ',providers:[l],styles:["\n    .gantt-activity-line {\n        /*border-radius: 2px;*/\n        position: absolute;\n        box-sizing: border-box;\n        -webkit-user-select: none;\n    }\n    .gantt-activity-line:hover {\n        cursor: pointer;\n    }\n    .gantt-activity-content {\n        font-size: 12px;\n        color: #fff;\n        width: 100%;\n        top: 0;\n        position: absolute;\n        white-space: nowrap;\n        text-align: center;\n        line-height: inherit;\n        overflow: hidden;\n        height: 100%;\n    }\n    .gantt-activity-link-control {\n        position: absolute;\n        width: 13px;\n        top: 0;\n    }\n    .gantt-activity-right {\n        right: 0;\n    }\n    .gantt-activity-left {\n        left: 0;\n    }\n    .gantt-activity-right:hover {\n        /*cursor:w-resize;*/\n    }\n    .gantt-activity-left:hover {\n        /*cursor:w-resize;*/\n    }\n    "]}]}],k.ctorParameters=function(){return[{type:l}]},k.propDecorators={timeScale:[{type:r.Input}],dimensions:[{type:r.Input}],tasks:[{type:r.Input}],onGridRowClick:[{type:r.Output}],onPopoverOpen:[{type:r.Output}]},k);function k(t){this.ganttService=t,this.onGridRowClick=new r.EventEmitter,this.onPopoverOpen=new r.EventEmitter,this.containerHeight=0,this.containerWidth=0}var C=(D.decorators=[{type:r.NgModule,args:[{imports:[n.CommonModule,i.MatCardModule,o.MdePopoverModule],exports:[y,f,b,x],declarations:[y,f,b,x],providers:[]}]}],D);function D(){}var W=(H.decorators=[{type:r.NgModule,args:[{imports:[n.CommonModule,e.FormsModule,C],exports:[d],declarations:[d,h,u],providers:[l],schemas:[r.CUSTOM_ELEMENTS_SCHEMA]}]}],H);function H(){}t.GanttModule=W,t.ɵe=b,t.ɵf=x,t.ɵb=y,t.ɵa=C,t.ɵd=f,t.ɵi=u,t.ɵg=d,t.ɵh=h,t.ɵc=l,Object.defineProperty(t,"__esModule",{value:!0})});
//# sourceMappingURL=angular-gantt.umd.min.js.map